package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.$p;
import static org.matheclipse.core.expression.F.And;
import static org.matheclipse.core.expression.F.C0;
import static org.matheclipse.core.expression.F.C1;
import static org.matheclipse.core.expression.F.C2;
import static org.matheclipse.core.expression.F.C2Pi;
import static org.matheclipse.core.expression.F.C3;
import static org.matheclipse.core.expression.F.CI;
import static org.matheclipse.core.expression.F.CN1;
import static org.matheclipse.core.expression.F.CN1D2;
import static org.matheclipse.core.expression.F.Condition;
import static org.matheclipse.core.expression.F.Cos;
import static org.matheclipse.core.expression.F.Equal;
import static org.matheclipse.core.expression.F.Exp;
import static org.matheclipse.core.expression.F.Greater;
import static org.matheclipse.core.expression.F.GreaterEqual;
import static org.matheclipse.core.expression.F.IInit;
import static org.matheclipse.core.expression.F.ISetDelayed;
import static org.matheclipse.core.expression.F.LegendreP;
import static org.matheclipse.core.expression.F.List;
import static org.matheclipse.core.expression.F.Plus;
import static org.matheclipse.core.expression.F.Power;
import static org.matheclipse.core.expression.F.Sin;
import static org.matheclipse.core.expression.F.SphericalHarmonicY;
import static org.matheclipse.core.expression.F.Sqrt;
import static org.matheclipse.core.expression.F.Subtract;
import static org.matheclipse.core.expression.F.Times;
import static org.matheclipse.core.expression.F.m_;
import static org.matheclipse.core.expression.F.n_;
import static org.matheclipse.core.expression.F.p_;
import static org.matheclipse.core.expression.F.t_;
import static org.matheclipse.core.expression.S.Integer;
import static org.matheclipse.core.expression.S.Pi;
import static org.matheclipse.core.expression.S.SphericalHarmonicY;
import static org.matheclipse.core.expression.S.m;
import static org.matheclipse.core.expression.S.n;
import static org.matheclipse.core.expression.S.p;
import static org.matheclipse.core.expression.S.t;
import org.matheclipse.core.interfaces.IAST;

/**
 * <p>
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.
 * </p>
 * <p>
 * See GIT repository at:
 * <a href="https://github.com/axkr/symja_android_library">github.com/axkr/symja_android_library
 * under the tools directory</a>.
 * </p>
 */
public interface SphericalHarmonicYRules {
  /**
   * <ul>
   * <li>index 0 - number of equal rules in <code>RULES</code></li>
   * </ul>
   */
  final public static int[] SIZES = {0, 2};

  final public static IAST RULES = List(IInit(SphericalHarmonicY, SIZES),
      // SphericalHarmonicY(0,0,t_,p_):=1/(2*Sqrt(Pi))
      ISetDelayed(SphericalHarmonicY(C0, C0, t_, p_), Power(Times(C2, Sqrt(Pi)), CN1)),
      // SphericalHarmonicY(1,1,t_,p_):=-1/2*E^(I*p)*Sqrt(3/(2*Pi))*Sin(t)
      ISetDelayed(SphericalHarmonicY(C1, C1, t_, p_),
          Times(CN1D2, Exp(Times(CI, p)), Sqrt(Times(C3, Power(C2Pi, CN1))), Sin(t))),
      // SphericalHarmonicY(n_,0,0,p_):=Sqrt(1+2*n)/(2*Sqrt(Pi))
      ISetDelayed(SphericalHarmonicY(n_, C0, C0, p_),
          Times(Sqrt(Plus(C1, Times(C2, n))), Power(Times(C2, Sqrt(Pi)), CN1))),
      // SphericalHarmonicY(n_Integer,0,t_,p_):=(Sqrt(1+2*n)*LegendreP(n,Cos(t)))/(2*Sqrt(Pi))
      ISetDelayed(SphericalHarmonicY($p(n, Integer), C0, t_, p_),
          Times(Sqrt(Plus(C1, Times(C2, n))), Power(Times(C2, Sqrt(Pi)), CN1),
              LegendreP(n, Cos(t)))),
      // SphericalHarmonicY(n_Integer,m_Integer,t_,p_):=0/;n>=0&&m>n
      ISetDelayed(SphericalHarmonicY($p(n, Integer), $p(m, Integer), t_, p_),
          Condition(C0, And(GreaterEqual(n, C0), Greater(m, n)))),
      // SphericalHarmonicY(n_,m_,t_,p_):=0/;m==-1-n
      ISetDelayed(SphericalHarmonicY(n_, m_, t_, p_), Condition(C0, Equal(m, Subtract(CN1, n)))));
}

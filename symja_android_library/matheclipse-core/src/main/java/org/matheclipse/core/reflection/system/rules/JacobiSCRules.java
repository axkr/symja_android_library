package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.ISymbol;
import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.patternmatching.Matcher;

/**
 * <p>
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.
 * </p>
 * <p>
 * See GIT repository at:
 * <a href="https://github.com/axkr/symja_android_library">github.com/axkr/symja_android_library
 * under the tools directory</a>.
 * </p>
 */
public interface JacobiSCRules {
  /**
   * <ul>
   * <li>index 0 - number of equal rules in <code>RULES</code></li>
   * </ul>
   */
  final public static int[] SIZES = {0, 2};

  final public static IAST RULES = List(IInit(JacobiSC, SIZES),
      // JacobiSC(EllipticK(m_)/2,m_):=1/(1-m)^(1/4)
      ISetDelayed(JacobiSC(Times(C1D2, EllipticK(m_)), m_), Power(Subtract(C1, m), CN1D4)),
      // JacobiSC(I*1/2*EllipticK(1+l_),m_):=I/Sqrt(1+Sqrt(m))/;-l==m
      ISetDelayed(JacobiSC(Times(CC(0L, 1L, 1L, 2L), EllipticK(Plus(C1, l_))), m_),
          Condition(Times(CI, Power(Plus(C1, Sqrt(m)), CN1D2)), Equal(Negate(l), m))));
}

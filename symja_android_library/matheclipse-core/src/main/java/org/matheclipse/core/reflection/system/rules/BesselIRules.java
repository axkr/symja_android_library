package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.BesselI;
import static org.matheclipse.core.expression.F.C1D2;
import static org.matheclipse.core.expression.F.C2;
import static org.matheclipse.core.expression.F.CN1;
import static org.matheclipse.core.expression.F.CN1D2;
import static org.matheclipse.core.expression.F.Cosh;
import static org.matheclipse.core.expression.F.IInit;
import static org.matheclipse.core.expression.F.ISetDelayed;
import static org.matheclipse.core.expression.F.List;
import static org.matheclipse.core.expression.F.Power;
import static org.matheclipse.core.expression.F.Sinh;
import static org.matheclipse.core.expression.F.Sqrt;
import static org.matheclipse.core.expression.F.Times;
import static org.matheclipse.core.expression.F.x_;
import static org.matheclipse.core.expression.F.y_;
import static org.matheclipse.core.expression.F.z_;
import static org.matheclipse.core.expression.S.BesselI;
import static org.matheclipse.core.expression.S.Pi;
import static org.matheclipse.core.expression.S.Undefined;
import static org.matheclipse.core.expression.S.z;
import org.matheclipse.core.interfaces.IAST;

/**
 * <p>
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.
 * </p>
 * <p>
 * See GIT repository at:
 * <a href="https://github.com/axkr/symja_android_library">github.com/axkr/symja_android_library
 * under the tools directory</a>.
 * </p>
 */
public interface BesselIRules {
  /**
   * <ul>
   * <li>index 0 - number of equal rules in <code>RULES</code></li>
   * </ul>
   */
  final public static int[] SIZES = {0, 3};

  final public static IAST RULES = List(IInit(BesselI, SIZES),
      // BesselI(Undefined,y_):=Undefined
      ISetDelayed(BesselI(Undefined, y_), Undefined),
      // BesselI(x_,Undefined):=Undefined
      ISetDelayed(BesselI(x_, Undefined), Undefined),
      // BesselI(-1/2,z_):=(Sqrt(2/Pi)*Cosh(z))/Sqrt(z)
      ISetDelayed(BesselI(CN1D2, z_),
          Times(Sqrt(Times(C2, Power(Pi, CN1))), Power(z, CN1D2), Cosh(z))),
      // BesselI(1/2,z_):=(Sqrt(2/Pi)*Sinh(z))/Sqrt(z)
      ISetDelayed(BesselI(C1D2, z_),
          Times(Sqrt(Times(C2, Power(Pi, CN1))), Power(z, CN1D2), Sinh(z))));
}

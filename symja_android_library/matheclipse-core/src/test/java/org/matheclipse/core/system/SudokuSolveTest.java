package org.matheclipse.core.system;

import org.junit.jupiter.api.Test;

/** Tests forSolve and Roots functions */
public class SudokuSolveTest extends ExprEvaluatorTestCase {

  @Test
  public void testSudokuSolve01() {
    check(
        "SudokuSolve({{8, 5, 0, 0, 0, 2, 4, 0, 0},\n" //
            + "{7, 2, 0, 0, 0, 0, 0, 0, 9},\n" //
            + "{0, 0, 4, 0, 0, 0, 0, 0, 0},\n" //
            + "{0, 0, 0, 1, 0, 7, 0, 0, 2},\n" //
            + "{3, 0, 5, 0, 0, 0, 9, 0, 0},\n" //
            + "{0, 4, 0, 0, 0, 0, 0, 0, 0},\n" //
            + "{0, 0, 0, 0, 8, 0, 0, 7, 0},\n" //
            + "{0, 1, 7, 0, 0, 0, 0, 0, 0},\n" //
            + "{0, 0, 0, 0, 3, 6, 0, 4, 0}})", //
        "{{8,5,9,6,1,2,4,3,7},\n" //
            + " {7,2,3,8,5,4,1,6,9},\n" //
            + " {1,6,4,3,7,9,5,2,8},\n" //
            + " {9,8,6,1,4,7,3,5,2},\n" //
            + " {3,7,5,2,6,8,9,1,4},\n" //
            + " {2,4,1,5,9,3,7,8,6},\n" //
            + " {4,3,2,9,8,1,6,7,5},\n" //
            + " {6,1,7,4,2,5,8,9,3},\n" //
            + " {5,9,8,7,3,6,2,4,1}}");
  }

  @Test
  public void testSudokuSolve02() {
    check("SudokuSolve({{9, 7, 0, 3, 0, 0, 0, 6, 0},\n" //
        + "  {0, 6, 0, 7, 5, 0, 0, 0, 0},\n" //
        + "  {0, 0, 0, 0, 0, 8, 0, 5, 0},\n" //
        + "  {0, 0, 0, 0, 0, 0, 6, 7, 0},\n" //
        + "  {0, 0, 0, 0, 3, 0, 0, 0, 0},\n" //
        + "  {0, 5, 3, 9, 0, 0, 2, 0, 0},\n" //
        + "  {7, 0, 0, 0, 2, 5, 0, 0, 0},\n" //
        + "  {0, 0, 2, 0, 1, 0, 0, 0, 8},\n" //
        + "  {0, 4, 0, 0, 0, 7, 3, 0, 0}})", //
        "{{9,7,5,3,4,2,8,6,1},\n" //
            + " {8,6,1,7,5,9,4,3,2},\n" //
            + " {3,2,4,1,6,8,9,5,7},\n" //
            + " {2,1,9,5,8,4,6,7,3},\n" //
            + " {4,8,7,2,3,6,5,1,9},\n" //
            + " {6,5,3,9,7,1,2,8,4},\n" //
            + " {7,3,8,4,2,5,1,9,6},\n" //
            + " {5,9,2,6,1,3,7,4,8},\n" //
            + " {1,4,6,8,9,7,3,2,5}}");
  }

  @Test
  public void testSudokuSolve03() {
    check("SudokuSolve({{0,0,3,0,0,0,0,0,0},\n" //
        + "  {4,0,0,0,8,0,0,3,6},\n" //
        + "  {0,0,8,0,0,0,1,0,0},\n" //
        + "  {0,4,0,0,6,0,0,7,3},\n" //
        + "  {0,0,0,9,0,0,0,0,0},\n" //
        + "  {0,0,0,0,0,2,0,0,5},\n" //
        + "  {0,0,4,0,7,0,0,6,8},\n" //
        + "  {6,0,0,0,0,0,0,0,0},\n" //
        + "  {7,0,0,6,0,0,5,0,0}})", //
        "{{1,2,3,4,5,6,7,8,9},\n" //
            + " {4,5,7,1,8,9,2,3,6},\n" //
            + " {9,6,8,3,2,7,1,5,4},\n" //
            + " {2,4,9,5,6,1,8,7,3},\n" //
            + " {5,7,6,9,3,8,4,1,2},\n" //
            + " {8,3,1,7,4,2,6,9,5},\n" //
            + " {3,1,4,2,7,5,9,6,8},\n" //
            + " {6,9,5,8,1,4,3,2,7},\n" //
        + " {7,8,2,6,9,3,5,4,1}}");
  }

  @Test
  public void testSudokuSolve04() {
    check("SudokuSolve({{5,3,0,0,2,4,7,0,0},\n" //
        + "  {0,0,2,0,0,0,8,0,0},\n" //
        + "  {1,0,0,7,0,3,9,0,2},\n" //
        + "  {0,0,8,0,7,2,0,4,9},\n" //
        + "  {0,2,0,9,8,0,0,7,0},\n" //
        + "  {7,9,0,0,0,0,0,8,0},\n" //
        + "  {0,0,0,0,3,0,5,0,6},\n" //
        + "  {9,6,0,0,1,0,3,0,0},\n" //
        + "  {0,5,0,6,9,0,0,1,0}})", //
        "{{5,3,9,8,2,4,7,6,1},\n" //
            + " {6,7,2,1,5,9,8,3,4},\n" //
            + " {1,8,4,7,6,3,9,5,2},\n" //
            + " {3,1,8,5,7,2,6,4,9},\n" //
            + " {4,2,5,9,8,6,1,7,3},\n" //
            + " {7,9,6,3,4,1,2,8,5},\n" //
            + " {8,4,1,2,3,7,5,9,6},\n" //
            + " {9,6,7,4,1,5,3,2,8},\n" //
            + " {2,5,3,6,9,8,4,1,7}}");
  }

  @Test
  public void testSudokuSolveContradiction() {
    check("SudokuSolve({{4,0,3,7,6,2,8,0,0},\n" //
        + "  {0,6,8,4,3,1,0,7,0},\n" //
        + "  {0,0,0,0,8,5,0,3,6},\n" //
        + "  {3,2,6,8,0,9,0,4,0},\n" //
        + "  {0,0,7,0,2,0,9,6,0},\n" //
        + "  {0,5,0,1,0,6,3,2,0},\n" //
        + "  {0,4,0,6,1,0,0,0,0},\n" //
        + "  {0,3,0,2,0,7,6,9,0},\n" //
        + "  {6,0,0,0,9,0,0,0,0}})", //
        "SudokuSolve(\n" //
            + "{{4,0,3,7,6,2,8,0,0},\n" //
            + " {0,6,8,4,3,1,0,7,0},\n" //
            + " {0,0,0,0,8,5,0,3,6},\n" //
            + " {3,2,6,8,0,9,0,4,0},\n" //
            + " {0,0,7,0,2,0,9,6,0},\n" //
            + " {0,5,0,1,0,6,3,2,0},\n" //
            + " {0,4,0,6,1,0,0,0,0},\n" //
            + " {0,3,0,2,0,7,6,9,0},\n" //
            + " {6,0,0,0,9,0,0,0,0}})");
  }

}

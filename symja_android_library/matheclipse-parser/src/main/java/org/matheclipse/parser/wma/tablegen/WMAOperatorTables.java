package org.matheclipse.parser.wma.tablegen;

import java.util.*;

/**
 * Auto-generated class containing operator tables for the matheclipse parser.
 * <p>This class is generated from YAML resources defining operators and special characters.
 * <p>DO NOT MODIFY MANUALLY - Generated by WMAOperatorTablesCodeGenerator
 */
public final class WMAOperatorTables {

  /** Private constructor to prevent instantiation */
  private WMAOperatorTables() {}

  /** Map of operator names to their precedence values */
  public static final Map<String, Integer> OPERATOR_PRECEDENCES = createOperatorPrecedencesMap();

  private static Map<String, Integer> createOperatorPrecedencesMap() {
    Map<String, Integer> map = new HashMap<>();
    map.put("PrecedesTilde", 290);
    map.put("Factorial2", 610);
    map.put("NestedGreaterGreater", 290);
    map.put("Product", 380);
    map.put("Therefore", 50);
    map.put("SucceedsTilde", 290);
    map.put("LeftTeeVector", 270);
    map.put("NotSucceeds", 290);
    map.put("NotVerticalBar", 280);
    map.put("CornerBracket", 760);
    map.put("Proportion", 290);
    map.put("SquareIntersection", 305);
    map.put("NonCommutativeMultiply", 510);
    map.put("NotCongruent", 290);
    map.put("SlotSequenceNumber", 740);
    map.put("CupCap", 290);
    map.put("Equilibrium", 290);
    map.put("PartialUnderscriptBox", 710);
    map.put("SucceedsSlantEqual", 290);
    map.put("SameQ", 290);
    map.put("DoubleUpDownArrow", 580);
    map.put("Part", 670);
    map.put("NotSquareSubset", 250);
    map.put("LeftDownTeeVector", 580);
    map.put("Xor", 220);
    map.put("Minus", 480);
    map.put("Set", 40);
    map.put("AutoMatch", 760);
    map.put("NumberPrecision", 760);
    map.put("NotSupersetEqual", 250);
    map.put("Prefix", 640);
    map.put("MessageName", 750);
    map.put("NotLeftTriangleBar", 290);
    map.put("CompoundExpressionNull", 10);
    map.put("SuperscriptBox", 590);
    map.put("DoubleContourIntegral", 325);
    map.put("NotPrecedesEqual", 290);
    map.put("GreaterEqualLess", 290);
    map.put("NotGreaterEqual", 290);
    map.put("SlotNumber", 740);
    map.put("CapitalDifferentialD", 550);
    map.put("OverunderscriptBox", 700);
    map.put("RoundImplies", 193);
    map.put("Laplacian", 550);
    map.put("TagSetDelayed", 40);
    map.put("RightArrowLeftArrow", 270);
    map.put("Distributed", 250);
    map.put("RightUpVector", 580);
    map.put("AngleBracket", 760);
    map.put("Power", 590);
    map.put("Perpendicular", 190);
    map.put("Apply", 620);
    map.put("Infix", 630);
    map.put("CurlyDoubleQuote", 760);
    map.put("FormBox", 5);
    map.put("PlusMinus", 310);
    map.put("NotLessSlantEqual", 290);
    map.put("List", 760);
    map.put("Optional", 140);
    map.put("GreaterTilde", 290);
    map.put("Alternatives", 160);
    map.put("BlankHead", 730);
    map.put("LeftRightArrow", 270);
    map.put("Postfix", 70);
    map.put("Because", 50);
    map.put("FunctionApplyPostfix", 70);
    map.put("NotRightTriangle", 290);
    map.put("NotExists", 240);
    map.put("WhiteCornerBracket", 760);
    map.put("GreaterSlantEqual", 290);
    map.put("SubscriptBox", 690);
    map.put("NotSubsetEqual", 250);
    map.put("UpArrowDownArrow", 580);
    map.put("UpEquilibrium", 580);
    map.put("Backslash", 460);
    map.put("NotSucceedsEqual", 290);
    map.put("BlankNullSequenceHead", 730);
    map.put("NotDoubleVerticalBar", 280);
    map.put("Increment", 660);
    map.put("ProbabilityPr", 325);
    map.put("Skeleton", 760);
    map.put("Colon", 80);
    map.put("NotSquareSupersetEqual", 250);
    map.put("NumberPrecisionPostfix", 760);
    map.put("Condition", 130);
    map.put("CircleDot", 520);
    map.put("Composition", 625);
    map.put("EqualTilde", 290);
    map.put("NotPrecedes", 290);
    map.put("Diamond", 450);
    map.put("LeftTee", 190);
    map.put("Exists", 240);
    map.put("CenterDot", 410);
    map.put("UpperRightArrow", 270);
    map.put("Coproduct", 360);
    map.put("NotLess", 290);
    map.put("PreDecrement", 660);
    map.put("Divergence", 485);
    map.put("ShortUpArrow", 580);
    map.put("DiscreteRatio", 550);
    map.put("LeftTriangleBar", 290);
    map.put("GreaterEqual", 290);
    map.put("FullwidthAngleBracket", 760);
    map.put("RightComposition", 650);
    map.put("RightArrow", 270);
    map.put("LeftVector", 270);
    map.put("AddTo", 100);
    map.put("Dot", 490);
    map.put("NotGreaterSlantEqual", 290);
    map.put("Square", 540);
    map.put("Transpose", 670);
    map.put("Precedes", 290);
    map.put("NotGreaterFullEqual", 290);
    map.put("NotNestedGreaterGreater", 290);
    map.put("UpSetDelayed", 40);
    map.put("Map", 620);
    map.put("Intersection", 305);
    map.put("TildeTilde", 290);
    map.put("UnaryPlus", 480);
    map.put("NotTilde", 290);
    map.put("PartialSuperscriptBox", 590);
    map.put("UpArrow", 580);
    map.put("RadicalBox", 570);
    map.put("DiscreteShift", 550);
    map.put("DifferenceDelta", 550);
    map.put("Sqrt", 570);
    map.put("UndirectedEdge", 295);
    map.put("ReverseEquilibrium", 290);
    map.put("RightVector", 270);
    map.put("InterpretedBox", 670);
    map.put("PartialSubscriptBox", 690);
    map.put("DownRightVectorBar", 270);
    map.put("DifferentialD", 550);
    map.put("RawBackquote", 760);
    map.put("DoubleUpArrow", 580);
    map.put("TortoiseShellBracket", 760);
    map.put("LeftTeeArrow", 270);
    map.put("DownTeeArrow", 580);
    map.put("LeftArrowRightArrow", 270);
    map.put("DoubleDownArrow", 580);
    map.put("NumberMagnitude", 760);
    map.put("LessSlantEqual", 290);
    map.put("RuleDelayed", 120);
    map.put("NotCupCap", 290);
    map.put("DownRightTeeVector", 270);
    map.put("LowerRightArrow", 270);
    map.put("MinLimit", 320);
    map.put("ApplyTo", 75);
    map.put("FunctionApplyInfix", 630);
    map.put("Plus", 310);
    map.put("Less", 290);
    map.put("SqrtBox", 570);
    map.put("ShortLeftArrow", 270);
    map.put("SucceedsEqual", 290);
    map.put("NotLessGreater", 290);
    map.put("InvisiblePrefixScriptBase", 715);
    map.put("PartialD", 550);
    map.put("And", 225);
    map.put("Conditioned", 195);
    map.put("CompoundExpression", 10);
    map.put("UnderoverscriptBox", 700);
    map.put("DownRightVector", 270);
    map.put("PartialFractionBox", 470);
    map.put("LeftArrow", 270);
    map.put("LessTilde", 290);
    map.put("PreIncrement", 660);
    map.put("Integrate", 325);
    map.put("InvisiblePostfixScriptBase", 715);
    map.put("NamedBlank", 730);
    map.put("SlotSequence", 740);
    map.put("Information", 5001);
    map.put("Function", 90);
    map.put("RightUpDownVector", 580);
    map.put("ClockwiseContourIntegral", 325);
    map.put("SquareSubset", 250);
    map.put("VerticalTilde", 370);
    map.put("RightUpTeeVector", 580);
    map.put("LeftDownVectorBar", 580);
    map.put("PrecedesEqual", 290);
    map.put("LessGreater", 290);
    map.put("BlankSequenceHead", 730);
    map.put("ReverseElement", 250);
    map.put("LessFullEqual", 290);
    map.put("FullwidthParenthesis", 760);
    map.put("SquareSupersetEqual", 250);
    map.put("BlankNullSequence", 730);
    map.put("DoubleLeftTee", 190);
    map.put("Unequal", 290);
    map.put("StringJoin", 600);
    map.put("StringExpression", 135);
    map.put("ForAll", 240);
    map.put("RightTeeArrow", 270);
    map.put("Divides", 470);
    map.put("PutAppend", 30);
    map.put("NotSquareSuperset", 250);
    map.put("Or", 215);
    map.put("Subset", 250);
    map.put("RightUpVectorBar", 580);
    map.put("Ceiling", 760);
    map.put("FunctionApply", 670);
    map.put("SquareSuperset", 250);
    map.put("TagUnset", 40);
    map.put("DoubleLeftRightArrow", 270);
    map.put("GreaterLess", 290);
    map.put("BlankOptional", 730);
    map.put("Congruent", 290);
    map.put("DotEqual", 290);
    map.put("Cup", 340);
    map.put("NotTildeTilde", 290);
    map.put("DoubleBracketingBar", 760);
    map.put("NamedBlankNullSequenceHead", 730);
    map.put("MapAll", 620);
    map.put("Sum", 325);
    map.put("ConjugateTranspose", 670);
    map.put("CirclePlus", 330);
    map.put("LeftDownVector", 580);
    map.put("LeftTriangleEqual", 290);
    map.put("Piecewise", 535);
    map.put("RightDownVectorBar", 580);
    map.put("RightTee", 190);
    map.put("Slot", 740);
    map.put("Subtract", 310);
    map.put("TensorProduct", 487);
    map.put("NotTildeFullEqual", 290);
    map.put("NotEqualTilde", 290);
    map.put("NotLeftTriangle", 290);
    map.put("LeftUpVectorBar", 580);
    map.put("NotLessLess", 290);
    map.put("Repeated", 170);
    map.put("Union", 300);
    map.put("VerticalSeparator", 60);
    map.put("Association", 760);
    map.put("LeftRightVector", 270);
    map.put("Star", 390);
    map.put("TagSet", 40);
    map.put("NamedBlankHead", 730);
    map.put("LeftArrowBar", 270);
    map.put("Proportional", 290);
    map.put("TildeFullEqual", 290);
    map.put("Gradient", 545);
    map.put("DownLeftVector", 270);
    map.put("Curl", 485);
    map.put("Wedge", 440);
    map.put("HumpDownHump", 290);
    map.put("PartialOverscriptBox", 710);
    map.put("SquareUnion", 300);
    map.put("LongRightArrow", 580);
    map.put("NotSuperset", 250);
    map.put("NotGreaterGreater", 290);
    map.put("RightTriangleEqual", 290);
    map.put("NotLessFullEqual", 290);
    map.put("Conjugate", 670);
    map.put("NotPrecedesSlantEqual", 290);
    map.put("Divide", 470);
    map.put("Implies", 200);
    map.put("LessLess", 290);
    map.put("DownTee", 190);
    map.put("NotSubset", 250);
    map.put("RightVectorBar", 270);
    map.put("SuchThat", 180);
    map.put("RepeatedNull", 170);
    map.put("LowerLeftArrow", 270);
    map.put("RightDownVector", 580);
    map.put("OverscriptBox", 710);
    map.put("Nor", 215);
    map.put("LessEqualGreater", 290);
    map.put("Not", 230);
    map.put("ParameterizedFunction", 40);
    map.put("NumberBase", 760);
    map.put("UnaryPlusMinus", 480);
    map.put("SetDelayed", 40);
    map.put("ReverseUpEquilibrium", 580);
    map.put("BlankSequence", 730);
    map.put("ReplaceRepeated", 110);
    map.put("UpArrowBar", 580);
    map.put("NestedLessLess", 290);
    map.put("NotRightTriangleBar", 290);
    map.put("Element", 250);
    map.put("NotTildeEqual", 290);
    map.put("SubsuperscriptBox", 690);
    map.put("RightTeeVector", 270);
    map.put("SubsetEqual", 250);
    map.put("Factorial", 610);
    map.put("NotHumpEqual", 290);
    map.put("DoubleRightTee", 190);
    map.put("Blank", 730);
    map.put("CircleTimes", 420);
    map.put("NotReverseElement", 250);
    map.put("Nand", 225);
    map.put("Put", 30);
    map.put("NotHumpDownHump", 290);
    map.put("MinusPlus", 310);
    map.put("NamedBlankOptional", 730);
    map.put("ShortRightArrow", 270);
    map.put("NotElement", 250);
    map.put("TimesBy", 100);
    map.put("NotLessTilde", 290);
    map.put("FullwidthSquareBracket", 760);
    map.put("OutNumber", 735);
    map.put("CircleMinus", 330);
    map.put("LeftTriangle", 290);
    map.put("Equal", 290);
    map.put("UnaryMinusPlus", 480);
    map.put("DoubleRightArrow", 270);
    map.put("CounterClockwiseContourIntegral", 325);
    map.put("ShortDownArrow", 580);
    map.put("DoubleLongRightArrow", 580);
    map.put("UpTeeArrow", 580);
    map.put("NotSucceedsTilde", 290);
    map.put("LongLeftRightArrow", 580);
    map.put("Decrement", 660);
    map.put("NotPrecedesTilde", 290);
    map.put("DownLeftTeeVector", 270);
    map.put("Definition", 5000);
    map.put("LessEqual", 290);
    map.put("NotSucceedsSlantEqual", 290);
    map.put("DoubleVerticalBar", 280);
    map.put("Out", 735);
    map.put("DownArrow", 580);
    map.put("SubSuperscriptBox", 590);
    map.put("Get", 720);
    map.put("DoubleLeftArrow", 270);
    map.put("Superset", 250);
    map.put("NotSquareSubsetEqual", 250);
    map.put("Rule", 120);
    map.put("UnsameQ", 290);
    map.put("LeftUpVector", 580);
    map.put("ReplaceAll", 110);
    map.put("DivideBy", 100);
    map.put("NotNestedLessLess", 290);
    map.put("UpSet", 40);
    map.put("FractionBox", 470);
    map.put("DoubleLongLeftRightArrow", 580);
    map.put("MapApply", 625);
    map.put("Span", 305);
    map.put("NotGreaterTilde", 290);
    map.put("BoxGroup", 760);
    map.put("SuperDagger", 605);
    map.put("SupersetEqual", 250);
    map.put("Xnor", 220);
    map.put("DirectedEdge", 295);
    map.put("RightDownTeeVector", 580);
    map.put("TensorWedge", 488);
    map.put("RightArrowBar", 270);
    map.put("LongLeftArrow", 580);
    map.put("SmallCircle", 530);
    map.put("Succeeds", 290);
    map.put("DownArrowBar", 580);
    map.put("Pattern", 150);
    map.put("UnderscriptBox", 710);
    map.put("DownLeftRightVector", 270);
    map.put("DownArrowUpArrow", 580);
    map.put("NamedBlankSequence", 730);
    map.put("UpDownArrow", 580);
    map.put("NotGreaterLess", 290);
    map.put("UnionPlus", 300);
    map.put("LeftUpTeeVector", 580);
    map.put("Vee", 430);
    map.put("BracketingBar", 760);
    map.put("InlinePart", 675);
    map.put("GreaterGreater", 290);
    map.put("NotRightTriangleEqual", 290);
    map.put("PermutationProduct", 486);
    map.put("PrecedesSlantEqual", 290);
    map.put("FunctionApplyPrefix", 640);
    map.put("TwoWayRule", 125);
    map.put("LeftUpDownVector", 580);
    map.put("VerticalBar", 280);
    map.put("TildeEqual", 290);
    map.put("Cap", 350);
    map.put("NotLeftTriangleEqual", 290);
    map.put("Equivalent", 205);
    map.put("Derivative", 670);
    map.put("DoubleAngleBracket", 760);
    map.put("UpTee", 197);
    map.put("SquareSubsetEqual", 250);
    map.put("CurlyQuote", 760);
    map.put("Cross", 500);
    map.put("PatternTest", 680);
    map.put("SubtractFrom", 100);
    map.put("MaxLimit", 320);
    map.put("DownLeftVectorBar", 270);
    map.put("NotLessEqual", 290);
    map.put("ContextPathSeparator", 760);
    map.put("HumpEqual", 290);
    map.put("UpperLeftArrow", 270);
    map.put("Parentheses", 760);
    map.put("DoubleLongLeftArrow", 580);
    map.put("NamedBlankSequenceHead", 730);
    map.put("GreaterFullEqual", 290);
    map.put("Floor", 760);
    map.put("NamedBlankNullSequence", 730);
    map.put("Unset", 670);
    map.put("Tilde", 290);
    map.put("BlackLenticularBracket", 760);
    map.put("Del", 550);
    map.put("ImplicitSequence", 755);
    map.put("LeftVectorBar", 270);
    map.put("ContourIntegral", 325);
    map.put("FullwidthCurlyBracket", 760);
    map.put("RightTriangleBar", 290);
    map.put("NotGreater", 290);
    map.put("RightTriangle", 290);
    map.put("Times", 400);
    map.put("Greater", 290);
    map.put("Limit", 320);
    return Collections.unmodifiableMap(map);
  }

  /** Operators with flat associativity */
  public static final Map<String, Integer> FLAT_BINARY_OPERATORS = createFlatBinaryOperators();

  private static Map<String, Integer> createFlatBinaryOperators() {
    Map<String, Integer> map = new HashMap<>();
    map.put("NotSquareSuperset", 250);
    map.put("Or", 215);
    map.put("PrecedesTilde", 290);
    map.put("Subset", 250);
    map.put("NestedGreaterGreater", 290);
    map.put("RightUpVectorBar", 580);
    map.put("SquareSuperset", 250);
    map.put("SucceedsTilde", 290);
    map.put("LeftTeeVector", 270);
    map.put("NotSucceeds", 290);
    map.put("NotVerticalBar", 280);
    map.put("Proportion", 290);
    map.put("SquareIntersection", 305);
    map.put("DoubleLeftRightArrow", 270);
    map.put("GreaterLess", 290);
    map.put("NonCommutativeMultiply", 510);
    map.put("Congruent", 290);
    map.put("NotCongruent", 290);
    map.put("DotEqual", 290);
    map.put("Cup", 340);
    map.put("NotTildeTilde", 290);
    map.put("NamedBlankNullSequenceHead", 730);
    map.put("CupCap", 290);
    map.put("Equilibrium", 290);
    map.put("SucceedsSlantEqual", 290);
    map.put("CirclePlus", 330);
    map.put("LeftDownVector", 580);
    map.put("SameQ", 290);
    map.put("DoubleUpDownArrow", 580);
    map.put("LeftTriangleEqual", 290);
    map.put("NotSquareSubset", 250);
    map.put("LeftDownTeeVector", 580);
    map.put("RightDownVectorBar", 580);
    map.put("TensorProduct", 487);
    map.put("Xor", 220);
    map.put("NotTildeFullEqual", 290);
    map.put("NotEqualTilde", 290);
    map.put("NotLeftTriangle", 290);
    map.put("LeftUpVectorBar", 580);
    map.put("NotLessLess", 290);
    map.put("NumberPrecision", 760);
    map.put("NotSupersetEqual", 250);
    map.put("Prefix", 640);
    map.put("MessageName", 750);
    map.put("Union", 300);
    map.put("NotLeftTriangleBar", 290);
    map.put("VerticalSeparator", 60);
    map.put("LeftRightVector", 270);
    map.put("Star", 390);
    map.put("NotPrecedesEqual", 290);
    map.put("NamedBlankHead", 730);
    map.put("GreaterEqualLess", 290);
    map.put("LeftArrowBar", 270);
    map.put("Proportional", 290);
    map.put("TildeFullEqual", 290);
    map.put("NotGreaterEqual", 290);
    map.put("DownLeftVector", 270);
    map.put("Wedge", 440);
    map.put("HumpDownHump", 290);
    map.put("RightArrowLeftArrow", 270);
    map.put("Distributed", 250);
    map.put("RightUpVector", 580);
    map.put("SquareUnion", 300);
    map.put("LongRightArrow", 580);
    map.put("NotSuperset", 250);
    map.put("NotGreaterGreater", 290);
    map.put("RightTriangleEqual", 290);
    map.put("NotLessFullEqual", 290);
    map.put("Perpendicular", 190);
    map.put("NotPrecedesSlantEqual", 290);
    map.put("NotLessSlantEqual", 290);
    map.put("LessLess", 290);
    map.put("GreaterTilde", 290);
    map.put("NotSubset", 250);
    map.put("RightVectorBar", 270);
    map.put("LowerLeftArrow", 270);
    map.put("RightDownVector", 580);
    map.put("Alternatives", 160);
    map.put("Nor", 215);
    map.put("LessEqualGreater", 290);
    map.put("LeftRightArrow", 270);
    map.put("NumberBase", 760);
    map.put("NotRightTriangle", 290);
    map.put("GreaterSlantEqual", 290);
    map.put("ReverseUpEquilibrium", 580);
    map.put("NotSubsetEqual", 250);
    map.put("UpArrowBar", 580);
    map.put("NestedLessLess", 290);
    map.put("NotRightTriangleBar", 290);
    map.put("Element", 250);
    map.put("NotTildeEqual", 290);
    map.put("UpArrowDownArrow", 580);
    map.put("UpEquilibrium", 580);
    map.put("Backslash", 460);
    map.put("RightTeeVector", 270);
    map.put("SubsetEqual", 250);
    map.put("NotSucceedsEqual", 290);
    map.put("NotHumpEqual", 290);
    map.put("NotDoubleVerticalBar", 280);
    map.put("Colon", 80);
    map.put("NotSquareSupersetEqual", 250);
    map.put("CircleDot", 520);
    map.put("Composition", 625);
    map.put("CircleTimes", 420);
    map.put("EqualTilde", 290);
    map.put("NotReverseElement", 250);
    map.put("NotPrecedes", 290);
    map.put("Diamond", 450);
    map.put("Nand", 225);
    map.put("NotHumpDownHump", 290);
    map.put("CenterDot", 410);
    map.put("ShortRightArrow", 270);
    map.put("UpperRightArrow", 270);
    map.put("NotElement", 250);
    map.put("Coproduct", 360);
    map.put("NotLess", 290);
    map.put("NotLessTilde", 290);
    map.put("ShortUpArrow", 580);
    map.put("LeftTriangleBar", 290);
    map.put("CircleMinus", 330);
    map.put("GreaterEqual", 290);
    map.put("LeftTriangle", 290);
    map.put("Equal", 290);
    map.put("DoubleRightArrow", 270);
    map.put("ShortDownArrow", 580);
    map.put("RightComposition", 650);
    map.put("RightArrow", 270);
    map.put("DoubleLongRightArrow", 580);
    map.put("LeftVector", 270);
    map.put("UpTeeArrow", 580);
    map.put("NotSucceedsTilde", 290);
    map.put("LongLeftRightArrow", 580);
    map.put("NotPrecedesTilde", 290);
    map.put("DownLeftTeeVector", 270);
    map.put("Dot", 490);
    map.put("LessEqual", 290);
    map.put("NotGreaterSlantEqual", 290);
    map.put("NotSucceedsSlantEqual", 290);
    map.put("DoubleVerticalBar", 280);
    map.put("Precedes", 290);
    map.put("NotGreaterFullEqual", 290);
    map.put("DownArrow", 580);
    map.put("NotNestedGreaterGreater", 290);
    map.put("DoubleLeftArrow", 270);
    map.put("Superset", 250);
    map.put("NotSquareSubsetEqual", 250);
    map.put("UnsameQ", 290);
    map.put("LeftUpVector", 580);
    map.put("Intersection", 305);
    map.put("TildeTilde", 290);
    map.put("NotNestedLessLess", 290);
    map.put("DoubleLongLeftRightArrow", 580);
    map.put("NotGreaterTilde", 290);
    map.put("SupersetEqual", 250);
    map.put("Xnor", 220);
    map.put("RightDownTeeVector", 580);
    map.put("TensorWedge", 488);
    map.put("NotTilde", 290);
    map.put("UpArrow", 580);
    map.put("RightArrowBar", 270);
    map.put("LongLeftArrow", 580);
    map.put("SmallCircle", 530);
    map.put("Succeeds", 290);
    map.put("DownArrowBar", 580);
    map.put("DownLeftRightVector", 270);
    map.put("DownArrowUpArrow", 580);
    map.put("UpDownArrow", 580);
    map.put("ReverseEquilibrium", 290);
    map.put("RightVector", 270);
    map.put("NotGreaterLess", 290);
    map.put("UnionPlus", 300);
    map.put("LeftUpTeeVector", 580);
    map.put("Vee", 430);
    map.put("DownRightVectorBar", 270);
    map.put("RawBackquote", 760);
    map.put("DoubleUpArrow", 580);
    map.put("LeftTeeArrow", 270);
    map.put("GreaterGreater", 290);
    map.put("DownTeeArrow", 580);
    map.put("LeftArrowRightArrow", 270);
    map.put("NotRightTriangleEqual", 290);
    map.put("DoubleDownArrow", 580);
    map.put("NumberMagnitude", 760);
    map.put("LessSlantEqual", 290);
    map.put("NotCupCap", 290);
    map.put("DownRightTeeVector", 270);
    map.put("PermutationProduct", 486);
    map.put("LowerRightArrow", 270);
    map.put("PrecedesSlantEqual", 290);
    map.put("Plus", 310);
    map.put("Less", 290);
    map.put("ShortLeftArrow", 270);
    map.put("SucceedsEqual", 290);
    map.put("LeftUpDownVector", 580);
    map.put("NotLessGreater", 290);
    map.put("VerticalBar", 280);
    map.put("TildeEqual", 290);
    map.put("Cap", 350);
    map.put("NotLeftTriangleEqual", 290);
    map.put("And", 225);
    map.put("Conditioned", 195);
    map.put("CompoundExpression", 10);
    map.put("Equivalent", 205);
    map.put("DownRightVector", 270);
    map.put("SquareSubsetEqual", 250);
    map.put("LeftArrow", 270);
    map.put("LessTilde", 290);
    map.put("Cross", 500);
    map.put("DownLeftVectorBar", 270);
    map.put("NotLessEqual", 290);
    map.put("RightUpDownVector", 580);
    map.put("HumpEqual", 290);
    map.put("SquareSubset", 250);
    map.put("VerticalTilde", 370);
    map.put("UpperLeftArrow", 270);
    map.put("RightUpTeeVector", 580);
    map.put("DoubleLongLeftArrow", 580);
    map.put("LeftDownVectorBar", 580);
    map.put("NamedBlankSequenceHead", 730);
    map.put("PrecedesEqual", 290);
    map.put("GreaterFullEqual", 290);
    map.put("LessGreater", 290);
    map.put("ReverseElement", 250);
    map.put("LessFullEqual", 290);
    map.put("Tilde", 290);
    map.put("ImplicitSequence", 755);
    map.put("LeftVectorBar", 270);
    map.put("SquareSupersetEqual", 250);
    map.put("RightTriangleBar", 290);
    map.put("Unequal", 290);
    map.put("StringJoin", 600);
    map.put("NotGreater", 290);
    map.put("RightTriangle", 290);
    map.put("StringExpression", 135);
    map.put("Times", 400);
    map.put("Greater", 290);
    map.put("RightTeeArrow", 270);
    map.put("Divides", 470);
    return Collections.unmodifiableMap(map);
  }

  /** Operators with left associativity */
  public static final Map<String, Integer> LEFT_BINARY_OPERATORS = createLeftBinaryOperators();

  private static Map<String, Integer> createLeftBinaryOperators() {
    Map<String, Integer> map = new HashMap<>();
    map.put("Condition", 130);
    map.put("PutAppend", 30);
    map.put("DownTee", 190);
    map.put("ReplaceRepeated", 110);
    map.put("LeftTee", 190);
    map.put("Put", 30);
    map.put("DoubleLeftTee", 190);
    map.put("PlusMinus", 310);
    map.put("Divide", 470);
    map.put("Postfix", 70);
    map.put("Because", 50);
    map.put("FunctionApplyPostfix", 70);
    map.put("MinusPlus", 310);
    map.put("ApplyTo", 75);
    map.put("UpTee", 197);
    map.put("Subtract", 310);
    map.put("ReplaceAll", 110);
    return Collections.unmodifiableMap(map);
  }

  /** Operators with right associativity */
  public static final Map<String, Integer> RIGHT_BINARY_OPERATORS = createRightBinaryOperators();

  private static Map<String, Integer> createRightBinaryOperators() {
    Map<String, Integer> map = new HashMap<>();
    map.put("DivideBy", 100);
    map.put("Set", 40);
    map.put("Apply", 620);
    map.put("UpSet", 40);
    map.put("SubtractFrom", 100);
    map.put("Therefore", 50);
    map.put("MapApply", 625);
    map.put("TagUnset", 40);
    map.put("RuleDelayed", 120);
    map.put("Implies", 200);
    map.put("FunctionApplyPrefix", 640);
    map.put("DoubleRightTee", 190);
    map.put("AddTo", 100);
    map.put("TwoWayRule", 125);
    map.put("SuchThat", 180);
    map.put("MapAll", 620);
    map.put("RoundImplies", 193);
    map.put("ParameterizedFunction", 40);
    map.put("SetDelayed", 40);
    map.put("RightTee", 190);
    map.put("UpSetDelayed", 40);
    map.put("TimesBy", 100);
    map.put("Rule", 120);
    map.put("InlinePart", 675);
    map.put("Map", 620);
    map.put("Power", 590);
    return Collections.unmodifiableMap(map);
  }

  /** Operators with non-associative property */
  public static final Map<String, Integer> NON_ASSOC_BINARY_OPERATORS = createNonAssocBinaryOperators();

  private static Map<String, Integer> createNonAssocBinaryOperators() {
    Map<String, Integer> map = new HashMap<>();
    map.put("DirectedEdge", 295);
    map.put("UndirectedEdge", 295);
    map.put("PatternTest", 680);
    return Collections.unmodifiableMap(map);
  }

  /** Prefix operators and their precedence values */
  public static final Map<String, Integer> PREFIX_OPERATORS = createPrefixOperatorsMap();

  private static Map<String, Integer> createPrefixOperatorsMap() {
    Map<String, Integer> map = new HashMap<>();
    map.put("PreIncrement", 660);
    map.put("Divergence", 485);
    map.put("UnaryPlus", 480);
    map.put("DiscreteRatio", 550);
    map.put("Product", 380);
    map.put("MaxLimit", 320);
    map.put("Information", 5001);
    map.put("OutNumber", 735);
    map.put("BlankNullSequenceHead", 730);
    map.put("UnaryMinusPlus", 480);
    map.put("MinLimit", 320);
    map.put("ProbabilityPr", 325);
    map.put("SlotSequenceNumber", 740);
    map.put("Gradient", 545);
    map.put("DiscreteShift", 550);
    map.put("SlotNumber", 740);
    map.put("BlankSequenceHead", 730);
    map.put("CapitalDifferentialD", 550);
    map.put("DifferenceDelta", 550);
    map.put("Sqrt", 570);
    map.put("Definition", 5000);
    map.put("Del", 550);
    map.put("Sum", 325);
    map.put("InterpretedBox", 670);
    map.put("Curl", 485);
    map.put("Square", 540);
    map.put("Laplacian", 550);
    map.put("BlankHead", 730);
    map.put("InvisiblePrefixScriptBase", 715);
    map.put("Not", 230);
    map.put("UnaryPlusMinus", 480);
    map.put("NotExists", 240);
    map.put("PartialD", 550);
    map.put("Exists", 240);
    map.put("Get", 720);
    map.put("Piecewise", 535);
    map.put("DifferentialD", 550);
    map.put("Limit", 320);
    map.put("ForAll", 240);
    map.put("PreDecrement", 660);
    map.put("Minus", 480);
    return Collections.unmodifiableMap(map);
  }

  /** Postfix operators and their precedence values */
  public static final Map<String, Integer> POSTFIX_OPERATORS = createPostfixOperatorsMap();

  private static Map<String, Integer> createPostfixOperatorsMap() {
    Map<String, Integer> map = new HashMap<>();
    map.put("Conjugate", 670);
    map.put("Factorial2", 610);
    map.put("InvisiblePostfixScriptBase", 715);
    map.put("NamedBlank", 730);
    map.put("FunctionApply", 670);
    map.put("Repeated", 170);
    map.put("Factorial", 610);
    map.put("SuperDagger", 605);
    map.put("Function", 90);
    map.put("CompoundExpressionNull", 10);
    map.put("Increment", 660);
    map.put("PartialSuperscriptBox", 590);
    map.put("NumberPrecisionPostfix", 760);
    map.put("Decrement", 660);
    map.put("RepeatedNull", 170);
    map.put("NamedBlankNullSequence", 730);
    map.put("NamedBlankSequence", 730);
    map.put("Unset", 670);
    map.put("Transpose", 670);
    map.put("PartialUnderscriptBox", 710);
    map.put("ConjugateTranspose", 670);
    map.put("PartialSubscriptBox", 690);
    map.put("PartialOverscriptBox", 710);
    map.put("NamedBlankOptional", 730);
    map.put("Part", 670);
    map.put("Derivative", 670);
    map.put("PartialFractionBox", 470);
    return Collections.unmodifiableMap(map);
  }

  /** Ternary operators with their precedence values for each part */
  public static final Map<String, List<Integer>> TERNARY_OPERATORS = createTernaryOperatorsMap();

  private static Map<String, List<Integer>> createTernaryOperatorsMap() {
    Map<String, List<Integer>> map = new HashMap<>();
    map.put("TagSetDelayed", Arrays.asList(40, 40, 40));
    map.put("RadicalBox", Arrays.asList(570, 570, 570));
    map.put("SubSuperscriptBox", Arrays.asList(590, 590, 590));
    map.put("TagSet", Arrays.asList(40, 40, 40));
    map.put("UnderoverscriptBox", Arrays.asList(700, 700, 700));
    map.put("Infix", Arrays.asList(630, 630, 630));
    map.put("FunctionApplyInfix", Arrays.asList(630, 630, 630));
    map.put("OverunderscriptBox", Arrays.asList(700, 700, 700));
    map.put("SubsuperscriptBox", Arrays.asList(690, 690, 690));
    map.put("Span", Arrays.asList(305, 305, 305));
    return Collections.unmodifiableMap(map);
  }

  /** Mapping from special character to operator name */
  public static final Map<String, String> CHARACTER_TO_OPERATOR = createCharacterToOperatorMap();

  private static Map<String, String> createCharacterToOperatorMap() {
    Map<String, String> map = new HashMap<>();
    map.put(">>>", "PutAppend");
    map.put("⊂", "Subset");
    map.put("≾", "PrecedesTilde");
    map.put("∨", "Or");
    map.put("||", "Or");
    map.put("⪢", "NestedGreaterGreater");
    map.put("!!", "Factorial2");
    map.put("⥔", "RightUpVectorBar");
    map.put("∏", "Product");
    map.put("∴", "Therefore");
    map.put("⊐", "SquareSuperset");
    map.put("≿", "SucceedsTilde");
    map.put("⊁", "NotSucceeds");
    map.put("⥚", "LeftTeeVector");
    map.put("⊓", "SquareIntersection");
    map.put("∷", "Proportion");
    map.put("::", "Proportion");
    map.put("⇔", "DoubleLeftRightArrow");
    map.put("**", "NonCommutativeMultiply");
    map.put("≷", "GreaterLess");
    map.put("≢", "NotCongruent");
    map.put("≡", "Congruent");
    map.put("≐", "DotEqual");
    map.put("⌣", "Cup");
    map.put("≉", "NotTildeTilde");
    map.put("∑", "Sum");
    map.put("//@", "MapAll");
    map.put("⇌", "Equilibrium");
    map.put("≍", "CupCap");
    map.put("≽", "SucceedsSlantEqual");
    map.put("⊕", "CirclePlus");
    map.put("===", "SameQ");
    map.put("⇃", "LeftDownVector");
    map.put("⇕", "DoubleUpDownArrow");
    map.put("⊴", "LeftTriangleEqual");
    map.put("⊗", "TensorProduct");
    map.put("⊢", "RightTee");
    map.put("⥕", "RightDownVectorBar");
    map.put("⥡", "LeftDownTeeVector");
    map.put("⊻", "Xor");
    map.put("−", "Minus");
    map.put("-", "Minus");
    map.put("≇", "NotTildeFullEqual");
    map.put("=", "Set");
    map.put("⋪", "NotLeftTriangle");
    map.put("⥘", "LeftUpVectorBar");
    map.put("..", "Repeated");
    map.put("⊉", "NotSupersetEqual");
    map.put("⋃", "Union");
    map.put("::", "MessageName");
    map.put("∯", "DoubleContourIntegral");
    map.put("⥎", "LeftRightVector");
    map.put("⋆", "Star");
    map.put("/:", "TagSet");
    map.put("⇤", "LeftArrowBar");
    map.put("⋛", "GreaterEqualLess");
    map.put("≅", "TildeFullEqual");
    map.put("∝", "Proportional");
    map.put("≱", "NotGreaterEqual");
    map.put("↽", "DownLeftVector");
    map.put("ⅅ", "CapitalDifferentialD");
    map.put("d", "CapitalDifferentialD");
    map.put("⥰", "RoundImplies");
    map.put("⋀", "Wedge");
    map.put("≎", "HumpDownHump");
    map.put("⇄", "RightArrowLeftArrow");
    map.put("↾", "RightUpVector");
    map.put("⊔", "SquareUnion");
    map.put("⟶", "LongRightArrow");
    map.put("⊅", "NotSuperset");
    map.put("^", "Power");
    map.put("⊵", "RightTriangleEqual");
    map.put("", "NotGreaterGreater");
    map.put("≨", "NotLessFullEqual");
    map.put("⟂", "Perpendicular");
    map.put("⋠", "NotPrecedesSlantEqual");
    map.put("@@", "Apply");
    map.put("~", "Infix");
    map.put("±", "PlusMinus");
    map.put("÷", "Divide");
    map.put("/", "Divide");
    map.put("⇒", "Implies");
    map.put("≪", "LessLess");
    map.put("⊤", "DownTee");
    map.put("∍", "SuchThat");
    map.put("⥓", "RightVectorBar");
    map.put("⊄", "NotSubset");
    map.put("≳", "GreaterTilde");
    map.put("...", "RepeatedNull");
    map.put("⇂", "RightDownVector");
    map.put("↙", "LowerLeftArrow");
    map.put("|", "Alternatives");
    map.put("⊽", "Nor");
    map.put("⋚", "LessEqualGreater");
    map.put("//", "Postfix");
    map.put("¬", "Not");
    map.put("!", "Not");
    map.put("↔", "LeftRightArrow");
    map.put("∵", "Because");
    map.put("⋫", "NotRightTriangle");
    map.put("∄", "NotExists");
    map.put(":=", "SetDelayed");
    map.put("⩾", "GreaterSlantEqual");
    map.put("⥯", "ReverseUpEquilibrium");
    map.put("__", "BlankSequence");
    map.put("//.", "ReplaceRepeated");
    map.put("⤒", "UpArrowBar");
    map.put("⊈", "NotSubsetEqual");
    map.put("⪡", "NestedLessLess");
    map.put("∈", "Element");
    map.put("≄", "NotTildeEqual");
    map.put("⥮", "UpEquilibrium");
    map.put("⇅", "UpArrowDownArrow");
    map.put("⊆", "SubsetEqual");
    map.put("⥛", "RightTeeVector");
    map.put("∖", "Backslash");
    map.put("!", "Factorial");
    map.put("∦", "NotDoubleVerticalBar");
    map.put("⊨", "DoubleRightTee");
    map.put("∶", "Colon");
    map.put(":", "Colon");
    map.put("⋣", "NotSquareSupersetEqual");
    map.put("/;", "Condition");
    map.put("_", "Blank");
    map.put("@*", "Composition");
    map.put("⊙", "CircleDot");
    map.put("⊗", "CircleTimes");
    map.put("≂", "EqualTilde");
    map.put("∌", "NotReverseElement");
    map.put("⊀", "NotPrecedes");
    map.put("⋄", "Diamond");
    map.put("⊣", "LeftTee");
    map.put("⊼", "Nand");
    map.put(">>", "Put");
    map.put("∓", "MinusPlus");
    map.put("∃", "Exists");
    map.put("→", "ShortRightArrow");
    map.put("·", "CenterDot");
    map.put("↗", "UpperRightArrow");
    map.put("∉", "NotElement");
    map.put("*=", "TimesBy");
    map.put("≮", "NotLess");
    map.put("∐", "Coproduct");
    map.put("≴", "NotLessTilde");
    map.put("↑", "ShortUpArrow");
    map.put("ϴ", "DiscreteRatio");
    map.put("⧏", "LeftTriangleBar");
    map.put("⊖", "CircleMinus");
    map.put("≥", "GreaterEqual");
    map.put(">=", "GreaterEqual");
    map.put("⊲", "LeftTriangle");
    map.put("⩵", "Equal");
    map.put("==", "Equal");
    map.put("⇒", "DoubleRightArrow");
    map.put("↓", "ShortDownArrow");
    map.put("∳", "CounterClockwiseContourIntegral");
    map.put("/*", "RightComposition");
    map.put("→", "RightArrow");
    map.put("⟹", "DoubleLongRightArrow");
    map.put("↼", "LeftVector");
    map.put("↥", "UpTeeArrow");
    map.put("+=", "AddTo");
    map.put("⋩", "NotSucceedsTilde");
    map.put("⟷", "LongLeftRightArrow");
    map.put("⋨", "NotPrecedesTilde");
    map.put("--", "Decrement");
    map.put("⥞", "DownLeftTeeVector");
    map.put("≤", "LessEqual");
    map.put("<=", "LessEqual");
    map.put(".", "Dot");
    map.put("⋡", "NotSucceedsSlantEqual");
    map.put("ᵀ", "Transpose");
    map.put("▫", "Square");
    map.put("∥", "DoubleVerticalBar");
    map.put("≺", "Precedes");
    map.put("≩", "NotGreaterFullEqual");
    map.put("↓", "DownArrow");
    map.put("<<", "Get");
    map.put("⇐", "DoubleLeftArrow");
    map.put("^:=", "UpSetDelayed");
    map.put("⊃", "Superset");
    map.put("=!=", "UnsameQ");
    map.put("→", "Rule");
    map.put("->", "Rule");
    map.put("⋢", "NotSquareSubsetEqual");
    map.put("↿", "LeftUpVector");
    map.put("/@", "Map");
    map.put("/.", "ReplaceAll");
    map.put("⋂", "Intersection");
    map.put("/=", "DivideBy");
    map.put("≈", "TildeTilde");
    map.put("^=", "UpSet");
    map.put("⟺", "DoubleLongLeftRightArrow");
    map.put("@@@", "MapApply");
    map.put(";;", "Span");
    map.put("≵", "NotGreaterTilde");
    map.put("⊇", "SupersetEqual");
    map.put("→", "DirectedEdge");
    map.put("⥝", "RightDownTeeVector");
    map.put("↑", "UpArrow");
    map.put("≁", "NotTilde");
    map.put("⇥", "RightArrowBar");
    map.put("⟵", "LongLeftArrow");
    map.put("≻", "Succeeds");
    map.put("∘", "SmallCircle");
    map.put("⤓", "DownArrowBar");
    map.put("⥐", "DownLeftRightVector");
    map.put("↔", "UndirectedEdge");
    map.put("<->", "UndirectedEdge");
    map.put("√", "Sqrt");
    map.put("⇵", "DownArrowUpArrow");
    map.put("∆", "DifferenceDelta");
    map.put("↕", "UpDownArrow");
    map.put("⇋", "ReverseEquilibrium");
    map.put("⇀", "RightVector");
    map.put("\\!", "InterpretedBox");
    map.put("≹", "NotGreaterLess");
    map.put("⊎", "UnionPlus");
    map.put("⥠", "LeftUpTeeVector");
    map.put("⋁", "Vee");
    map.put("⥗", "DownRightVectorBar");
    map.put("𝑑", "DifferentialD");
    map.put("`", "RawBackquote");
    map.put("⇑", "DoubleUpArrow");
    map.put("↤", "LeftTeeArrow");
    map.put("≫", "GreaterGreater");
    map.put("⋭", "NotRightTriangleEqual");
    map.put("⇆", "LeftArrowRightArrow");
    map.put("↧", "DownTeeArrow");
    map.put("⇓", "DoubleDownArrow");
    map.put("⩽", "LessSlantEqual");
    map.put("⧴", "RuleDelayed");
    map.put(":>", "RuleDelayed");
    map.put("≭", "NotCupCap");
    map.put("⥟", "DownRightTeeVector");
    map.put("⊙", "PermutationProduct");
    map.put("≼", "PrecedesSlantEqual");
    map.put("↘", "LowerRightArrow");
    map.put("lim", "MinLimit");
    map.put("//=", "ApplyTo");
    map.put("+", "Plus");
    map.put("<", "Less");
    map.put("←", "ShortLeftArrow");
    map.put("⪰", "SucceedsEqual");
    map.put("❘", "VerticalBar");
    map.put("|", "VerticalBar");
    map.put("≸", "NotLessGreater");
    map.put("⥑", "LeftUpDownVector");
    map.put("≃", "TildeEqual");
    map.put("", "InvisiblePrefixScriptBase");
    map.put("⌢", "Cap");
    map.put("∂", "PartialD");
    map.put("⋬", "NotLeftTriangleEqual");
    map.put("∧", "And");
    map.put("&&", "And");
    map.put("⧦", "Equivalent");
    map.put(";", "CompoundExpression");
    map.put("⊥", "UpTee");
    map.put("'", "Derivative");
    map.put("⇁", "DownRightVector");
    map.put("⊑", "SquareSubsetEqual");
    map.put("←", "LeftArrow");
    map.put("≲", "LessTilde");
    map.put("++", "PreIncrement");
    map.put("⨯", "Cross");
    map.put("", "InvisiblePostfixScriptBase");
    map.put("?", "PatternTest");
    map.put("-=", "SubtractFrom");
    map.put("≰", "NotLessEqual");
    map.put("??", "Information");
    map.put("⥖", "DownLeftVectorBar");
    map.put("⟼", "Function");
    map.put("|->", "Function");
    map.put("⥏", "RightUpDownVector");
    map.put("≏", "HumpEqual");
    map.put("∲", "ClockwiseContourIntegral");
    map.put("⊏", "SquareSubset");
    map.put("≀", "VerticalTilde");
    map.put("↖", "UpperLeftArrow");
    map.put("⥜", "RightUpTeeVector");
    map.put("⪯", "PrecedesEqual");
    map.put("⥙", "LeftDownVectorBar");
    map.put("⟸", "DoubleLongLeftArrow");
    map.put("≧", "GreaterFullEqual");
    map.put("≶", "LessGreater");
    map.put("∋", "ReverseElement");
    map.put("=.", "Unset");
    map.put("≦", "LessFullEqual");
    map.put("∼", "Tilde");
    map.put("∇", "Del");
    map.put("⥒", "LeftVectorBar");
    map.put("⊒", "SquareSupersetEqual");
    map.put("∮", "ContourIntegral");
    map.put("⧐", "RightTriangleBar");
    map.put("⫤", "DoubleLeftTee");
    map.put("=|", "DoubleLeftTee");
    map.put("___", "BlankNullSequence");
    map.put("<>", "StringJoin");
    map.put("≯", "NotGreater");
    map.put("⊳", "RightTriangle");
    map.put("×", "Times");
    map.put("*", "Times");
    map.put("~~", "StringExpression");
    map.put("∀", "ForAll");
    map.put("↦", "RightTeeArrow");
    map.put("∣", "Divides");
    return Collections.unmodifiableMap(map);
  }

  /** Mapping from operator name to list of representation characters */
  public static final Map<String, List<String>> OPERATOR_TO_CHARACTERS = createOperatorToCharactersMap();

  private static Map<String, List<String>> createOperatorToCharactersMap() {
    Map<String, List<String>> map = new HashMap<>();
    map.put("PutAppend", Arrays.asList(">>>"));
    map.put("Subset", Arrays.asList("⊂"));
    map.put("PrecedesTilde", Arrays.asList("≾"));
    map.put("Or", Arrays.asList("∨", "||"));
    map.put("NestedGreaterGreater", Arrays.asList("⪢"));
    map.put("Factorial2", Arrays.asList("!!"));
    map.put("RightUpVectorBar", Arrays.asList("⥔"));
    map.put("Product", Arrays.asList("∏"));
    map.put("Therefore", Arrays.asList("∴"));
    map.put("SquareSuperset", Arrays.asList("⊐"));
    map.put("SucceedsTilde", Arrays.asList("≿"));
    map.put("NotSucceeds", Arrays.asList("⊁"));
    map.put("LeftTeeVector", Arrays.asList("⥚"));
    map.put("SquareIntersection", Arrays.asList("⊓"));
    map.put("Proportion", Arrays.asList("∷", "::"));
    map.put("DoubleLeftRightArrow", Arrays.asList("⇔"));
    map.put("NonCommutativeMultiply", Arrays.asList("**"));
    map.put("GreaterLess", Arrays.asList("≷"));
    map.put("NotCongruent", Arrays.asList("≢"));
    map.put("Congruent", Arrays.asList("≡"));
    map.put("DotEqual", Arrays.asList("≐"));
    map.put("Cup", Arrays.asList("⌣"));
    map.put("NotTildeTilde", Arrays.asList("≉"));
    map.put("Sum", Arrays.asList("∑"));
    map.put("MapAll", Arrays.asList("//@"));
    map.put("Equilibrium", Arrays.asList("⇌"));
    map.put("CupCap", Arrays.asList("≍"));
    map.put("SucceedsSlantEqual", Arrays.asList("≽"));
    map.put("CirclePlus", Arrays.asList("⊕"));
    map.put("SameQ", Arrays.asList("==="));
    map.put("LeftDownVector", Arrays.asList("⇃"));
    map.put("DoubleUpDownArrow", Arrays.asList("⇕"));
    map.put("LeftTriangleEqual", Arrays.asList("⊴"));
    map.put("TensorProduct", Arrays.asList("⊗"));
    map.put("RightTee", Arrays.asList("⊢"));
    map.put("RightDownVectorBar", Arrays.asList("⥕"));
    map.put("LeftDownTeeVector", Arrays.asList("⥡"));
    map.put("Xor", Arrays.asList("⊻"));
    map.put("Minus", Arrays.asList("−", "-"));
    map.put("NotTildeFullEqual", Arrays.asList("≇"));
    map.put("Set", Arrays.asList("="));
    map.put("NotLeftTriangle", Arrays.asList("⋪"));
    map.put("LeftUpVectorBar", Arrays.asList("⥘"));
    map.put("Repeated", Arrays.asList(".."));
    map.put("NotSupersetEqual", Arrays.asList("⊉"));
    map.put("Union", Arrays.asList("⋃"));
    map.put("MessageName", Arrays.asList("::"));
    map.put("DoubleContourIntegral", Arrays.asList("∯"));
    map.put("LeftRightVector", Arrays.asList("⥎"));
    map.put("Star", Arrays.asList("⋆"));
    map.put("TagSet", Arrays.asList("/:"));
    map.put("LeftArrowBar", Arrays.asList("⇤"));
    map.put("GreaterEqualLess", Arrays.asList("⋛"));
    map.put("TildeFullEqual", Arrays.asList("≅"));
    map.put("Proportional", Arrays.asList("∝"));
    map.put("NotGreaterEqual", Arrays.asList("≱"));
    map.put("DownLeftVector", Arrays.asList("↽"));
    map.put("CapitalDifferentialD", Arrays.asList("ⅅ", "d"));
    map.put("RoundImplies", Arrays.asList("⥰"));
    map.put("Wedge", Arrays.asList("⋀"));
    map.put("HumpDownHump", Arrays.asList("≎"));
    map.put("RightArrowLeftArrow", Arrays.asList("⇄"));
    map.put("RightUpVector", Arrays.asList("↾"));
    map.put("SquareUnion", Arrays.asList("⊔"));
    map.put("LongRightArrow", Arrays.asList("⟶"));
    map.put("NotSuperset", Arrays.asList("⊅"));
    map.put("Power", Arrays.asList("^"));
    map.put("RightTriangleEqual", Arrays.asList("⊵"));
    map.put("NotGreaterGreater", Arrays.asList(""));
    map.put("NotLessFullEqual", Arrays.asList("≨"));
    map.put("Perpendicular", Arrays.asList("⟂"));
    map.put("NotPrecedesSlantEqual", Arrays.asList("⋠"));
    map.put("Apply", Arrays.asList("@@"));
    map.put("Infix", Arrays.asList("~"));
    map.put("PlusMinus", Arrays.asList("±"));
    map.put("Divide", Arrays.asList("÷", "/"));
    map.put("Implies", Arrays.asList("⇒"));
    map.put("LessLess", Arrays.asList("≪"));
    map.put("DownTee", Arrays.asList("⊤"));
    map.put("SuchThat", Arrays.asList("∍"));
    map.put("RightVectorBar", Arrays.asList("⥓"));
    map.put("NotSubset", Arrays.asList("⊄"));
    map.put("GreaterTilde", Arrays.asList("≳"));
    map.put("RepeatedNull", Arrays.asList("..."));
    map.put("RightDownVector", Arrays.asList("⇂"));
    map.put("LowerLeftArrow", Arrays.asList("↙"));
    map.put("Alternatives", Arrays.asList("|"));
    map.put("Nor", Arrays.asList("⊽"));
    map.put("LessEqualGreater", Arrays.asList("⋚"));
    map.put("Postfix", Arrays.asList("//"));
    map.put("Not", Arrays.asList("¬", "!"));
    map.put("LeftRightArrow", Arrays.asList("↔"));
    map.put("Because", Arrays.asList("∵"));
    map.put("NotRightTriangle", Arrays.asList("⋫"));
    map.put("NotExists", Arrays.asList("∄"));
    map.put("SetDelayed", Arrays.asList(":="));
    map.put("GreaterSlantEqual", Arrays.asList("⩾"));
    map.put("ReverseUpEquilibrium", Arrays.asList("⥯"));
    map.put("BlankSequence", Arrays.asList("__"));
    map.put("ReplaceRepeated", Arrays.asList("//."));
    map.put("UpArrowBar", Arrays.asList("⤒"));
    map.put("NotSubsetEqual", Arrays.asList("⊈"));
    map.put("NestedLessLess", Arrays.asList("⪡"));
    map.put("Element", Arrays.asList("∈"));
    map.put("NotTildeEqual", Arrays.asList("≄"));
    map.put("UpEquilibrium", Arrays.asList("⥮"));
    map.put("UpArrowDownArrow", Arrays.asList("⇅"));
    map.put("SubsetEqual", Arrays.asList("⊆"));
    map.put("RightTeeVector", Arrays.asList("⥛"));
    map.put("Backslash", Arrays.asList("∖"));
    map.put("Factorial", Arrays.asList("!"));
    map.put("NotDoubleVerticalBar", Arrays.asList("∦"));
    map.put("DoubleRightTee", Arrays.asList("⊨"));
    map.put("Colon", Arrays.asList("∶", ":"));
    map.put("NotSquareSupersetEqual", Arrays.asList("⋣"));
    map.put("Condition", Arrays.asList("/;"));
    map.put("Blank", Arrays.asList("_"));
    map.put("Composition", Arrays.asList("@*"));
    map.put("CircleDot", Arrays.asList("⊙"));
    map.put("CircleTimes", Arrays.asList("⊗"));
    map.put("EqualTilde", Arrays.asList("≂"));
    map.put("NotReverseElement", Arrays.asList("∌"));
    map.put("NotPrecedes", Arrays.asList("⊀"));
    map.put("Diamond", Arrays.asList("⋄"));
    map.put("LeftTee", Arrays.asList("⊣"));
    map.put("Nand", Arrays.asList("⊼"));
    map.put("Put", Arrays.asList(">>"));
    map.put("MinusPlus", Arrays.asList("∓"));
    map.put("Exists", Arrays.asList("∃"));
    map.put("ShortRightArrow", Arrays.asList("→"));
    map.put("CenterDot", Arrays.asList("·"));
    map.put("UpperRightArrow", Arrays.asList("↗"));
    map.put("NotElement", Arrays.asList("∉"));
    map.put("TimesBy", Arrays.asList("*="));
    map.put("NotLess", Arrays.asList("≮"));
    map.put("Coproduct", Arrays.asList("∐"));
    map.put("NotLessTilde", Arrays.asList("≴"));
    map.put("ShortUpArrow", Arrays.asList("↑"));
    map.put("DiscreteRatio", Arrays.asList("ϴ"));
    map.put("LeftTriangleBar", Arrays.asList("⧏"));
    map.put("CircleMinus", Arrays.asList("⊖"));
    map.put("GreaterEqual", Arrays.asList("≥", ">="));
    map.put("LeftTriangle", Arrays.asList("⊲"));
    map.put("Equal", Arrays.asList("⩵", "=="));
    map.put("DoubleRightArrow", Arrays.asList("⇒"));
    map.put("ShortDownArrow", Arrays.asList("↓"));
    map.put("CounterClockwiseContourIntegral", Arrays.asList("∳"));
    map.put("RightComposition", Arrays.asList("/*"));
    map.put("RightArrow", Arrays.asList("→"));
    map.put("DoubleLongRightArrow", Arrays.asList("⟹"));
    map.put("LeftVector", Arrays.asList("↼"));
    map.put("UpTeeArrow", Arrays.asList("↥"));
    map.put("AddTo", Arrays.asList("+="));
    map.put("NotSucceedsTilde", Arrays.asList("⋩"));
    map.put("LongLeftRightArrow", Arrays.asList("⟷"));
    map.put("NotPrecedesTilde", Arrays.asList("⋨"));
    map.put("Decrement", Arrays.asList("--"));
    map.put("DownLeftTeeVector", Arrays.asList("⥞"));
    map.put("LessEqual", Arrays.asList("≤", "<="));
    map.put("Dot", Arrays.asList("."));
    map.put("NotSucceedsSlantEqual", Arrays.asList("⋡"));
    map.put("Transpose", Arrays.asList("ᵀ"));
    map.put("Square", Arrays.asList("▫"));
    map.put("DoubleVerticalBar", Arrays.asList("∥"));
    map.put("Precedes", Arrays.asList("≺"));
    map.put("NotGreaterFullEqual", Arrays.asList("≩"));
    map.put("DownArrow", Arrays.asList("↓"));
    map.put("Get", Arrays.asList("<<"));
    map.put("DoubleLeftArrow", Arrays.asList("⇐"));
    map.put("UpSetDelayed", Arrays.asList("^:="));
    map.put("Superset", Arrays.asList("⊃"));
    map.put("UnsameQ", Arrays.asList("=!="));
    map.put("Rule", Arrays.asList("→", "->"));
    map.put("NotSquareSubsetEqual", Arrays.asList("⋢"));
    map.put("LeftUpVector", Arrays.asList("↿"));
    map.put("Map", Arrays.asList("/@"));
    map.put("ReplaceAll", Arrays.asList("/."));
    map.put("Intersection", Arrays.asList("⋂"));
    map.put("DivideBy", Arrays.asList("/="));
    map.put("TildeTilde", Arrays.asList("≈"));
    map.put("UpSet", Arrays.asList("^="));
    map.put("DoubleLongLeftRightArrow", Arrays.asList("⟺"));
    map.put("MapApply", Arrays.asList("@@@"));
    map.put("Span", Arrays.asList(";;"));
    map.put("NotGreaterTilde", Arrays.asList("≵"));
    map.put("SupersetEqual", Arrays.asList("⊇"));
    map.put("DirectedEdge", Arrays.asList("→"));
    map.put("RightDownTeeVector", Arrays.asList("⥝"));
    map.put("UpArrow", Arrays.asList("↑"));
    map.put("NotTilde", Arrays.asList("≁"));
    map.put("RightArrowBar", Arrays.asList("⇥"));
    map.put("LongLeftArrow", Arrays.asList("⟵"));
    map.put("Succeeds", Arrays.asList("≻"));
    map.put("SmallCircle", Arrays.asList("∘"));
    map.put("DownArrowBar", Arrays.asList("⤓"));
    map.put("DownLeftRightVector", Arrays.asList("⥐"));
    map.put("UndirectedEdge", Arrays.asList("↔", "<->"));
    map.put("Sqrt", Arrays.asList("√"));
    map.put("DownArrowUpArrow", Arrays.asList("⇵"));
    map.put("DifferenceDelta", Arrays.asList("∆"));
    map.put("UpDownArrow", Arrays.asList("↕"));
    map.put("ReverseEquilibrium", Arrays.asList("⇋"));
    map.put("RightVector", Arrays.asList("⇀"));
    map.put("InterpretedBox", Arrays.asList("\\!"));
    map.put("NotGreaterLess", Arrays.asList("≹"));
    map.put("UnionPlus", Arrays.asList("⊎"));
    map.put("LeftUpTeeVector", Arrays.asList("⥠"));
    map.put("Vee", Arrays.asList("⋁"));
    map.put("DownRightVectorBar", Arrays.asList("⥗"));
    map.put("DifferentialD", Arrays.asList("𝑑"));
    map.put("RawBackquote", Arrays.asList("`"));
    map.put("DoubleUpArrow", Arrays.asList("⇑"));
    map.put("LeftTeeArrow", Arrays.asList("↤"));
    map.put("GreaterGreater", Arrays.asList("≫"));
    map.put("NotRightTriangleEqual", Arrays.asList("⋭"));
    map.put("LeftArrowRightArrow", Arrays.asList("⇆"));
    map.put("DownTeeArrow", Arrays.asList("↧"));
    map.put("DoubleDownArrow", Arrays.asList("⇓"));
    map.put("LessSlantEqual", Arrays.asList("⩽"));
    map.put("RuleDelayed", Arrays.asList("⧴", ":>"));
    map.put("NotCupCap", Arrays.asList("≭"));
    map.put("DownRightTeeVector", Arrays.asList("⥟"));
    map.put("PermutationProduct", Arrays.asList("⊙"));
    map.put("PrecedesSlantEqual", Arrays.asList("≼"));
    map.put("LowerRightArrow", Arrays.asList("↘"));
    map.put("MinLimit", Arrays.asList("lim"));
    map.put("ApplyTo", Arrays.asList("//="));
    map.put("Plus", Arrays.asList("+"));
    map.put("Less", Arrays.asList("<"));
    map.put("ShortLeftArrow", Arrays.asList("←"));
    map.put("SucceedsEqual", Arrays.asList("⪰"));
    map.put("VerticalBar", Arrays.asList("❘", "|"));
    map.put("NotLessGreater", Arrays.asList("≸"));
    map.put("LeftUpDownVector", Arrays.asList("⥑"));
    map.put("TildeEqual", Arrays.asList("≃"));
    map.put("InvisiblePrefixScriptBase", Arrays.asList(""));
    map.put("Cap", Arrays.asList("⌢"));
    map.put("PartialD", Arrays.asList("∂"));
    map.put("NotLeftTriangleEqual", Arrays.asList("⋬"));
    map.put("And", Arrays.asList("∧", "&&"));
    map.put("Equivalent", Arrays.asList("⧦"));
    map.put("CompoundExpression", Arrays.asList(";"));
    map.put("UpTee", Arrays.asList("⊥"));
    map.put("Derivative", Arrays.asList("'"));
    map.put("DownRightVector", Arrays.asList("⇁"));
    map.put("SquareSubsetEqual", Arrays.asList("⊑"));
    map.put("LeftArrow", Arrays.asList("←"));
    map.put("LessTilde", Arrays.asList("≲"));
    map.put("PreIncrement", Arrays.asList("++"));
    map.put("Cross", Arrays.asList("⨯"));
    map.put("InvisiblePostfixScriptBase", Arrays.asList(""));
    map.put("PatternTest", Arrays.asList("?"));
    map.put("SubtractFrom", Arrays.asList("-="));
    map.put("NotLessEqual", Arrays.asList("≰"));
    map.put("Information", Arrays.asList("??"));
    map.put("DownLeftVectorBar", Arrays.asList("⥖"));
    map.put("Function", Arrays.asList("⟼", "|->"));
    map.put("RightUpDownVector", Arrays.asList("⥏"));
    map.put("HumpEqual", Arrays.asList("≏"));
    map.put("ClockwiseContourIntegral", Arrays.asList("∲"));
    map.put("SquareSubset", Arrays.asList("⊏"));
    map.put("VerticalTilde", Arrays.asList("≀"));
    map.put("UpperLeftArrow", Arrays.asList("↖"));
    map.put("RightUpTeeVector", Arrays.asList("⥜"));
    map.put("PrecedesEqual", Arrays.asList("⪯"));
    map.put("LeftDownVectorBar", Arrays.asList("⥙"));
    map.put("DoubleLongLeftArrow", Arrays.asList("⟸"));
    map.put("GreaterFullEqual", Arrays.asList("≧"));
    map.put("LessGreater", Arrays.asList("≶"));
    map.put("ReverseElement", Arrays.asList("∋"));
    map.put("Unset", Arrays.asList("=."));
    map.put("LessFullEqual", Arrays.asList("≦"));
    map.put("Tilde", Arrays.asList("∼"));
    map.put("Del", Arrays.asList("∇"));
    map.put("LeftVectorBar", Arrays.asList("⥒"));
    map.put("SquareSupersetEqual", Arrays.asList("⊒"));
    map.put("ContourIntegral", Arrays.asList("∮"));
    map.put("RightTriangleBar", Arrays.asList("⧐"));
    map.put("DoubleLeftTee", Arrays.asList("⫤", "=|"));
    map.put("BlankNullSequence", Arrays.asList("___"));
    map.put("StringJoin", Arrays.asList("<>"));
    map.put("NotGreater", Arrays.asList("≯"));
    map.put("RightTriangle", Arrays.asList("⊳"));
    map.put("Times", Arrays.asList("×", "*"));
    map.put("StringExpression", Arrays.asList("~~"));
    map.put("ForAll", Arrays.asList("∀"));
    map.put("RightTeeArrow", Arrays.asList("↦"));
    map.put("Divides", Arrays.asList("∣"));
    return Collections.unmodifiableMap(map);
  }

  /** Mapping from character to LaTeX representation */
  public static final Map<String, String> CHARACTER_TO_LATEX = createCharacterToLatexMap();

  private static Map<String, String> createCharacterToLatexMap() {
    Map<String, String> map = new HashMap<>();
    map.put("∂", "\\partial");
    map.put("∃", "\\exists");
    map.put("∄", "\\nexists");
    map.put("∇", "\\nabla");
    map.put("∈", "\\in");
    map.put("∉", "\\notin");
    map.put("∋", "\\ni");
    map.put("∌", "\\not{\\ni}");
    map.put("∍", "\\backepsilon");
    map.put("∏", "\\prod");
    map.put("∐", "\\coprod");
    map.put("∑", "\\sum");
    map.put("−", "-");
    map.put("∓", "\\mp");
    map.put("∖", "\\\\");
    map.put("∘", "\\circ");
    map.put("√", "\\sqrt");
    map.put("∝", "\\propto");
    map.put("∣", "\\mid");
    map.put("∥", "\\parallel");
    map.put("∦", "\\nparallel");
    map.put("∧", "\\&");
    map.put("", "\\not{\\gg}");
    map.put("∨", "\\vert");
    map.put("∮", "\\oint");
    map.put("∯", "\\oiint");
    map.put("∴", "\\therefore");
    map.put("∵", "\\because");
    map.put("∼", "\\sim");
    map.put("≀", "\\wr");
    map.put("≁", "\\not{\\sim}");
    map.put("≂", "\\eqsim");
    map.put("≃", "\\simeq");
    map.put("≄", "\\not{\\simeq}");
    map.put("≅", "\\cong");
    map.put("≇", "\\ncong");
    map.put("≈", "\\approx");
    map.put("≉", "\\not{\\approx}");
    map.put("≍", "\\stackrel{\\smile}{\\frown}");
    map.put("≎", "\\Bumpeq");
    map.put("≏", "\\bumpeq");
    map.put("≐", "\\doteq");
    map.put("≡", "\\equiv");
    map.put("≢", "\\not{\\equiv}");
    map.put("≤", "\\le");
    map.put("≥", "\\ge");
    map.put("≦", "\\leqq");
    map.put("≧", "\\geqq");
    map.put("≨", "\\nleqq");
    map.put("≩", "\\ngeqq");
    map.put("≪", "\\ll");
    map.put("≫", "\\gg");
    map.put("≭", "\\not{\\stackrel{\\smile}{\\frown}}");
    map.put("≮", "\\nless");
    map.put("≯", "\\ngtr");
    map.put("≰", "\\nleq");
    map.put("≱", "\\ngeq");
    map.put("≲", "\\lesssim");
    map.put("≳", "\\gtrsim");
    map.put("≴", "\\not{\\lesssim}");
    map.put("≵", "\\not{\\gtrsim}");
    map.put("≶", "\\lessgtr");
    map.put("≷", "\\gtrless");
    map.put("≸", "\\not{\\lessgtr}");
    map.put("≹", "\\not{\\gtrless}");
    map.put("≺", "\\prec");
    map.put("≻", "\\succ");
    map.put("≼", "\\preccurlyeq");
    map.put("⩽", "\\leq");
    map.put("≽", "\\succeq");
    map.put("⩾", "\\geq");
    map.put("≾", "\\precsim");
    map.put("≿", "\\succsim");
    map.put("⊀", "\\nprec");
    map.put("⊁", "\\nsucc");
    map.put("⊂", "\\subset");
    map.put("⊃", "\\supset");
    map.put("⊄", "\\not{\\subset}");
    map.put("⊅", "\\not{\\supset}");
    map.put("⊆", "\\subseteq");
    map.put("⊇", "\\supseteq");
    map.put("⊈", "\\nsubseteq");
    map.put("⊉", "\\nsupseteq");
    map.put("⊎", "\\uplus");
    map.put("⊏", "\\sqsubset");
    map.put("⊐", "\\sqsupset");
    map.put("lim", "\\lim_");
    map.put("⊑", "\\sqsubseteq");
    map.put("⊒", "\\sqsupseteq");
    map.put("⊓", "\\sqcap");
    map.put("⊔", "\\sqcup");
    map.put("⊕", " \\oplus");
    map.put("⊖", "\\ominus");
    map.put("⊗", "\\otimes");
    map.put("⊙", "\\odot");
    map.put("⪡", "\\ll");
    map.put("⪢", "\\gg");
    map.put("⊢", "\\vdash");
    map.put("⊣", "\\dashv");
    map.put("⊤", "\\top");
    map.put("⊥", "\\bot");
    map.put("𝑑", "\\,d");
    map.put("⊨", "\\vDash");
    map.put("⪯", "\\preceq");
    map.put("⪰", "\\succeq");
    map.put("±", "\\pm");
    map.put("⊲", "\\triangleleft");
    map.put("⊳", "\\triangleright");
    map.put("⊴", "\\trianglelefteq");
    map.put("⊵", "\\trianglerighteq");
    map.put("·", "\\cdot");
    map.put("⊻", "\\oplus");
    map.put("⊼", "\\barwedge");
    map.put("⊽", "\\veebar");
    map.put("⋀", "\\wedge");
    map.put("⋁", "\\vee");
    map.put("⋃", "\\cup");
    map.put("⋄", "\\diamond");
    map.put("⋆", "\\star");
    map.put("×", "\\times");
    map.put("⋚", "\\lesseqgtr");
    map.put("⋛", "a\\gtreqless b");
    map.put("⋠", "\\not{\\preccurlyeq}");
    map.put("⋡", "\\not{\\succeq}");
    map.put("⋢", "\\not{\\sqsubseteq}");
    map.put("⋨", "\\not{\\precsim}");
    map.put("⋩", "\\not{\\succsim}");
    map.put("⋪", "\\ntriangleleft");
    map.put("⋫", "\\ntriangleright");
    map.put("⋬", "\\ntrianglelefteq");
    map.put("⋭", "\\ntrianglerighteq");
    map.put("÷", "\\div");
    map.put("⤒", "\\bar{\\uparrow}");
    map.put("⤓", "\\underline{\\downarrow}");
    map.put("⌢", "\\cap");
    map.put("⌣", "\\cup");
    map.put("ⅅ", "\\mathbb{D}");
    map.put("⥎", "\\leftharpoonup \\rightharpoonup");
    map.put("⥏", "\\stackrel{\\upharpoonright}{\\downharpoonright}");
    map.put("⥐", "\\leftharpoondown \\rightharpoondown");
    map.put("⥑", "\\stackrel{\\upharpoonleft}{\\downharpoonleft}");
    map.put("⥒", "|\\leftharpoonup");
    map.put("⥓", "\\rightharpoonup |");
    map.put("⥔", "\\bar{\\upharpoonright}");
    map.put("⥖", "|\\leftharpoondown");
    map.put("⥗", "\\rightharpoondown |");
    map.put("⥘", "\\bar{\\upharpoonleft}");
    map.put("❘", "\\shortmid");
    map.put("⥙", "\\underline{\\downharpoonleft}");
    map.put("⥚", "\\leftharpoonup |");
    map.put("⥛", "|\\rightharpoonup");
    map.put("⥜", "\\underline{\\upharpoonright}");
    map.put("⥝", "\\bar{\\downharpoonright}");
    map.put("⥞", "\\leftharpoondown |");
    map.put("⥟", "|\\rightharpoondown");
    map.put("⥠", "\\underline{\\upharpoonleft}");
    map.put("⥡", "\\bar{\\downharpoonleft}");
    map.put("⥮", "\\upharpoonleft \\downharpoonright");
    map.put("⥯", "\\downharpoonleft\\upharpoonright");
    map.put("⥰", "\\text{RoundImplies}[a,b]");
    map.put("←", "\\leftarrow");
    map.put("↑", "\\uparrow");
    map.put("→", "\\rightarrow");
    map.put("↓", "\\downarrow");
    map.put("↔", "\\leftrightarrow");
    map.put("↕", "\\updownarrow");
    map.put("↖", "\\nwarrow");
    map.put("↗", "\\nearrow");
    map.put("↘", "\\searrow");
    map.put("↙", "\\swarrow");
    map.put("↤", "\\mapsfrom");
    map.put("↥", "\\underline{\\uparrow}");
    map.put("↦", "\\vdash");
    map.put("↧", "\\bar{\\downarrow}");
    map.put("▫", "\\square");
    map.put("↼", "\\leftharpoonup");
    map.put("↽", "\\leftharpoondown");
    map.put("↾", "\\upharpoonright");
    map.put("↿", "\\upharpoonleft");
    map.put("⇀", "\\rightharpoonup");
    map.put("⇁", "\\rightharpoondown");
    map.put("⟂", "\\perp");
    map.put("⇂", "\\underline{\\downharpoonright}");
    map.put("⇃", "\\downharpoonleft");
    map.put("⇄", "\\rightleftarrows");
    map.put("⇅", "\\updownarrow");
    map.put("⇆", "\\leftrightarrows");
    map.put("⇋", "\\leftrightharpoons");
    map.put("⇌", "\\rightleftharpoons");
    map.put("⧏", "\\triangleleft |");
    map.put("⇐", "\\Leftarrow");
    map.put("⧐", "|\\triangleright");
    map.put("⇑", "\\Uparrow");
    map.put("⇒", "\\Rightarrow");
    map.put("⇓", "\\Downarrow");
    map.put("⇔", "\\Leftrightarrow");
    map.put("⇕", "\\Updownarrow");
    map.put("⇤", "|\\leftarrow");
    map.put("⇥", "\\rightarrow |");
    map.put("⧴", ":\\to");
    map.put("⇵", "\\downarrow \\uparrow");
    map.put("⟵", "\\longleftarrow");
    map.put("⟶", "\\longrightarrow");
    map.put("⟷", "\\longleftrightarrow");
    map.put("⟸", "\\Longleftarrow");
    map.put("⟹", "\\Longrightarrow");
    map.put("⟺", "\\Longleftrightarrow");
    map.put("⟼", "\\mathsto");
    return Collections.unmodifiableMap(map);
  }

  /** Set of all operator strings for efficient scanning */
  public static final Set<String> ALL_OPERATOR_STRINGS = createAllOperatorStringsSet();

  private static Set<String> createAllOperatorStringsSet() {
    Set<String> set = new HashSet<>();
    // Add all operator representation strings
    set.add(">>>");
    set.add("⊂");
    set.add("≾");
    set.add("∨");
    set.add("||");
    set.add("⪢");
    set.add("!!");
    set.add("⥔");
    set.add("∏");
    set.add("∴");
    set.add("⊐");
    set.add("≿");
    set.add("⊁");
    set.add("⥚");
    set.add("⊓");
    set.add("∷");
    set.add("::");
    set.add("⇔");
    set.add("**");
    set.add("≷");
    set.add("≢");
    set.add("≡");
    set.add("≐");
    set.add("⌣");
    set.add("≉");
    set.add("∑");
    set.add("//@");
    set.add("⇌");
    set.add("≍");
    set.add("≽");
    set.add("⊕");
    set.add("===");
    set.add("⇃");
    set.add("⇕");
    set.add("⊴");
    set.add("⊗");
    set.add("⊢");
    set.add("⥕");
    set.add("⥡");
    set.add("⊻");
    set.add("−");
    set.add("-");
    set.add("≇");
    set.add("=");
    set.add("⋪");
    set.add("⥘");
    set.add("..");
    set.add("⊉");
    set.add("⋃");
    set.add("∯");
    set.add("⥎");
    set.add("⋆");
    set.add("/:");
    set.add("⇤");
    set.add("⋛");
    set.add("≅");
    set.add("∝");
    set.add("≱");
    set.add("↽");
    set.add("ⅅ");
    set.add("d");
    set.add("⥰");
    set.add("⋀");
    set.add("≎");
    set.add("⇄");
    set.add("↾");
    set.add("⊔");
    set.add("⟶");
    set.add("⊅");
    set.add("^");
    set.add("⊵");
    set.add("");
    set.add("≨");
    set.add("⟂");
    set.add("⋠");
    set.add("@@");
    set.add("~");
    set.add("±");
    set.add("÷");
    set.add("/");
    set.add("⇒");
    set.add("≪");
    set.add("⊤");
    set.add("∍");
    set.add("⥓");
    set.add("⊄");
    set.add("≳");
    set.add("...");
    set.add("⇂");
    set.add("↙");
    set.add("|");
    set.add("⊽");
    set.add("⋚");
    set.add("//");
    set.add("¬");
    set.add("!");
    set.add("↔");
    set.add("∵");
    set.add("⋫");
    set.add("∄");
    set.add(":=");
    set.add("⩾");
    set.add("⥯");
    set.add("__");
    set.add("//.");
    set.add("⤒");
    set.add("⊈");
    set.add("⪡");
    set.add("∈");
    set.add("≄");
    set.add("⥮");
    set.add("⇅");
    set.add("⊆");
    set.add("⥛");
    set.add("∖");
    set.add("∦");
    set.add("⊨");
    set.add("∶");
    set.add(":");
    set.add("⋣");
    set.add("/;");
    set.add("_");
    set.add("@*");
    set.add("⊙");
    set.add("≂");
    set.add("∌");
    set.add("⊀");
    set.add("⋄");
    set.add("⊣");
    set.add("⊼");
    set.add(">>");
    set.add("∓");
    set.add("∃");
    set.add("→");
    set.add("·");
    set.add("↗");
    set.add("∉");
    set.add("*=");
    set.add("≮");
    set.add("∐");
    set.add("≴");
    set.add("↑");
    set.add("ϴ");
    set.add("⧏");
    set.add("⊖");
    set.add("≥");
    set.add(">=");
    set.add("⊲");
    set.add("⩵");
    set.add("==");
    set.add("↓");
    set.add("∳");
    set.add("/*");
    set.add("⟹");
    set.add("↼");
    set.add("↥");
    set.add("+=");
    set.add("⋩");
    set.add("⟷");
    set.add("⋨");
    set.add("--");
    set.add("⥞");
    set.add("≤");
    set.add("<=");
    set.add(".");
    set.add("⋡");
    set.add("ᵀ");
    set.add("▫");
    set.add("∥");
    set.add("≺");
    set.add("≩");
    set.add("<<");
    set.add("⇐");
    set.add("^:=");
    set.add("⊃");
    set.add("=!=");
    set.add("->");
    set.add("⋢");
    set.add("↿");
    set.add("/@");
    set.add("/.");
    set.add("⋂");
    set.add("/=");
    set.add("≈");
    set.add("^=");
    set.add("⟺");
    set.add("@@@");
    set.add(";;");
    set.add("≵");
    set.add("⊇");
    set.add("⥝");
    set.add("≁");
    set.add("⇥");
    set.add("⟵");
    set.add("≻");
    set.add("∘");
    set.add("⤓");
    set.add("⥐");
    set.add("<->");
    set.add("√");
    set.add("⇵");
    set.add("∆");
    set.add("↕");
    set.add("⇋");
    set.add("⇀");
    set.add("\\!");
    set.add("≹");
    set.add("⊎");
    set.add("⥠");
    set.add("⋁");
    set.add("⥗");
    set.add("𝑑");
    set.add("`");
    set.add("⇑");
    set.add("↤");
    set.add("≫");
    set.add("⋭");
    set.add("⇆");
    set.add("↧");
    set.add("⇓");
    set.add("⩽");
    set.add("⧴");
    set.add(":>");
    set.add("≭");
    set.add("⥟");
    set.add("≼");
    set.add("↘");
    set.add("lim");
    set.add("//=");
    set.add("+");
    set.add("<");
    set.add("←");
    set.add("⪰");
    set.add("❘");
    set.add("≸");
    set.add("⥑");
    set.add("≃");
    set.add("");
    set.add("⌢");
    set.add("∂");
    set.add("⋬");
    set.add("∧");
    set.add("&&");
    set.add("⧦");
    set.add(";");
    set.add("⊥");
    set.add("'");
    set.add("⇁");
    set.add("⊑");
    set.add("≲");
    set.add("++");
    set.add("⨯");
    set.add("?");
    set.add("-=");
    set.add("≰");
    set.add("??");
    set.add("⥖");
    set.add("⟼");
    set.add("|->");
    set.add("⥏");
    set.add("≏");
    set.add("∲");
    set.add("⊏");
    set.add("≀");
    set.add("↖");
    set.add("⥜");
    set.add("⪯");
    set.add("⥙");
    set.add("⟸");
    set.add("≧");
    set.add("≶");
    set.add("∋");
    set.add("=.");
    set.add("≦");
    set.add("∼");
    set.add("∇");
    set.add("⥒");
    set.add("⊒");
    set.add("∮");
    set.add("⧐");
    set.add("⫤");
    set.add("=|");
    set.add("___");
    set.add("<>");
    set.add("≯");
    set.add("⊳");
    set.add("×");
    set.add("*");
    set.add("~~");
    set.add("∀");
    set.add("↦");
    set.add("∣");
    return Collections.unmodifiableSet(set);
  }

  /**
   * Get the precedence for an operator, or null if not defined.
   * @param operator The operator string
   * @return The precedence value, or null if not found
   */
  public static Integer getOperatorPrecedence(String operator) {
    return OPERATOR_PRECEDENCES.get(operator);
  }

  /**
   * Check if an operator is right associative.
   * @param operator The operator string
   * @return true if the operator is right associative
   */
  public static boolean isRightAssociative(String operator) {
    return RIGHT_BINARY_OPERATORS.containsKey(operator);
  }

  /**
   * Check if an operator is left associative.
   * @param operator The operator string
   * @return true if the operator is left associative
   */
  public static boolean isLeftAssociative(String operator) {
    return LEFT_BINARY_OPERATORS.containsKey(operator);
  }

  /**
   * Check if an operator is a prefix operator.
   * @param operator The operator string
   * @return true if the operator is a prefix operator
   */
  public static boolean isPrefixOperator(String operator) {
    return PREFIX_OPERATORS.containsKey(operator);
  }

  /**
   * Check if an operator is a postfix operator.
   * @param operator The operator string
   * @return true if the operator is a postfix operator
   */
  public static boolean isPostfixOperator(String operator) {
    return POSTFIX_OPERATORS.containsKey(operator);
  }

  /**
   * Get the operator name for a character string.
   * @param character The character string
   * @return The operator name, or null if not found
   */
  public static String getOperatorForCharacter(String character) {
    return CHARACTER_TO_OPERATOR.get(character);
  }
}

package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.ISymbol;
import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.patternmatching.Matcher;

/**
 * <p>
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.
 * </p>
 * <p>
 * See GIT repository at:
 * <a href="https://github.com/axkr/symja_android_library">github.com/axkr/symja_android_library
 * under the tools directory</a>.
 * </p>
 */
public interface ArcTanhRules {
  /**
   * <ul>
   * <li>index 0 - number of equal rules in <code>RULES</code></li>
   * </ul>
   */
  final public static int[] SIZES = {9, 0};

  final public static IAST RULES = List(IInit(ArcTanh, SIZES),
      // ArcTanh(Undefined)=Undefined
      ISet(ArcTanh(Undefined), Undefined),
      // ArcTanh(0)=0
      ISet(ArcTanh(C0), C0),
      // ArcTanh(I/Sqrt(3))=Pi*I/6
      ISet(ArcTanh(Times(CI, C1DSqrt3)), Times(CC(0L, 1L, 1L, 6L), Pi)),
      // ArcTanh(I)=Pi*I/4
      ISet(ArcTanh(CI), Times(CC(0L, 1L, 1L, 4L), Pi)),
      // ArcTanh(I*Sqrt(3))=Pi*I/3
      ISet(ArcTanh(Times(CI, CSqrt3)), Times(CC(0L, 1L, 1L, 3L), Pi)),
      // ArcTanh(1)=Infinity
      ISet(ArcTanh(C1), oo),
      // ArcTanh(Infinity)=-1/2*Pi*I
      ISet(ArcTanh(oo), Times(CC(0L, 1L, -1L, 2L), Pi)),
      // ArcTanh(I*Infinity)=1/2*Pi*I
      ISet(ArcTanh(DirectedInfinity(CI)), Times(CC(0L, 1L, 1L, 2L), Pi)),
      // ArcTanh(ComplexInfinity)=Pi/2
      ISet(ArcTanh(CComplexInfinity), CPiHalf));
}

package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.C0;
import static org.matheclipse.core.expression.F.CComplexInfinity;
import static org.matheclipse.core.expression.F.CN1D2;
import static org.matheclipse.core.expression.F.Condition;
import static org.matheclipse.core.expression.F.Greater;
import static org.matheclipse.core.expression.F.ISetDelayed;
import static org.matheclipse.core.expression.F.Less;
import static org.matheclipse.core.expression.F.List;
import static org.matheclipse.core.expression.F.Re;
import static org.matheclipse.core.expression.F.WhittakerM;
import static org.matheclipse.core.expression.F.m_;
import static org.matheclipse.core.expression.F.n_;
import static org.matheclipse.core.expression.S.m;
import org.matheclipse.core.interfaces.IAST;

/**
 * <p>
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.
 * </p>
 * <p>
 * See GIT repository at:
 * <a href="https://github.com/axkr/symja_android_library">github.com/axkr/symja_android_library
 * under the tools directory</a>.
 * </p>
 */
public interface WhittakerMRules {
  final public static IAST RULES = List(
      // WhittakerM(n_,m_,0):=0/;Re(m)>-1/2
      ISetDelayed(WhittakerM(n_, m_, C0), Condition(C0, Greater(Re(m), CN1D2))),
      // WhittakerM(n_,m_,0):=ComplexInfinity/;Re(m)<-1/2
      ISetDelayed(WhittakerM(n_, m_, C0), Condition(CComplexInfinity, Less(Re(m), CN1D2))));
}

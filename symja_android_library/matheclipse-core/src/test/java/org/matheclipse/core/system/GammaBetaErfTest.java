package org.matheclipse.core.system;

import org.junit.Test;
import org.matheclipse.core.basic.Config;

public class GammaBetaErfTest extends ExprEvaluatorTestCase {


  @Test
  public void testBeta() {
    check("Beta(1,b) // FunctionExpand", //
        "1/b");
    check("Beta(10,b) // FunctionExpand", //
        "362880/(b*(1+b)*(2+b)*(3+b)*(4+b)*(5+b)*(6+b)*(7+b)*(8+b)*(9+b))");


    // https://functions.wolfram.com/GammaBetaErf/Beta4/03/01/03/0003/
    check("Beta(z, 1, a, 3)", //
        "Beta(a,3)-Beta(z,a,3)");

    // TODO https://github.com/mtommila/apfloat/issues/31
    // checkNumeric("Beta(-0.5,101/(1+Sqrt(5)),1317624576693539401)", //
    // "");

    check("N(Beta(22/10, 33/10), 50)", //
        "0.056485691373282566807051754004491429369537777015239");
    checkNumeric("Beta({-1},7*Sqrt(2),2.718281828459045)", //
        "{0.291809067060784+I*(-0.09532667408582604)}");
    check("N(Beta(13/2, 7/2, 9/2), 50)", //
        "0.007669903939428206148590437947459723838371995+I*(-35239.47067974661869463578515152264883317438910642)");
    check("N(Beta(1/4, 1/3, 1/2, 3/2), 50)", //
        "0.13027275197090082754239201460417447494316441645475");

    check("Beta(z, 1, 12)", //
        "1/12*(1-(1-z)^12)");

    check("Beta( 2.5 + I, 1 - I, 0.5)", //
        "1.83058+I*3.75044");
    check("Beta(0.5, 2.5 + I, 1 - I)", //
        "0.0506278+I*(-0.0346442)");
    check("Beta(0.5, 3.2, 1.5)", //
        "0.0266833");
    check("Beta(2.5 + I, 1 - I)", //
        "0.0831078+I*0.142164");

    check("Beta(2.3, 3.2)", //
        "0.0540298");

    check("Beta(a, a+1)", //
        "1/(a*(1+a)*CatalanNumber(a))");
    check("Beta(b-1, b)", //
        "1/((-1+b)*b*CatalanNumber(-1+b))");

    check("Beta(5,4)", //
        "1/280");
    check("Beta(5/2,7/2)", //
        "3/256*Pi");
    check("Beta(2.3,3.2)", //
        "0.0540298");
    // check("Beta(2.5+I,1-I)", "0.05403");

    check("Beta(a, 0)", //
        "ComplexInfinity");
    check("Beta(0,b)", //
        "ComplexInfinity");

    check("Beta(-n-4, n+1)", //
        "0");
  }

  @Test
  public void testBetaRegularized() {
    // 4 args
    checkNumeric("BetaRegularized({2, 3, 5, 7}, 2, 7/2,1.5)", //
        "{0.0,I*(-103.37304852766408),I*(-1069.1375512159648),I*(-4377.740983381134)}");

    // 3 args
    check("N(BetaRegularized(15/17, 5, 1), 50)", //
        "0.53482498589646703858205438998434349374620120195202");
    check("BetaRegularized(0.211111111111111111, 5, 1)", //
        "0.000419329539873664243");
    checkNumeric("N(BetaRegularized(23/47, 5 - I, 2))", //
        "0.08470978294168378+I*0.05452582633879841");

    checkNumeric("BetaRegularized({2, 3, 5, 7}, 2.5, 0.5)", //
        "{1.0+I*(-2.6618379233724276),1.0+I*(-5.407884471224192),1.0+I*(-13.25626430682117),1.0+I*(-24.415962537061432)}");

    check("BetaRegularized(0,0,0)", //
        "Indeterminate");
    check("BetaRegularized(2 , 2 , 3)", //
        "8");
    check("BetaRegularized(2 , 7 , 17)", //
        "5512320");
    check("BetaRegularized(2 , 7 , -17)", //
        "0");

    // see github #203
    check("BetaRegularized(1.0000001,1,1)", //
        "1.0");
    check("BetaRegularized(-0.000000001,1,1)", //
        "-1.*10^-9");

    check("BetaRegularized(0.9768451023103443, 337.0, 0.5)", //
        "0.0000712171");
    check("BetaRegularized(2,Quantity(1.2,\"m\"),1009)", //
        "BetaRegularized(2,1.2[m],1009)");

    check("BetaRegularized(0.99,ByteArray(1),1009)", //
        "BetaRegularized(0.99,ByteArray(1),1009)");
    // slow
    check("BetaRegularized({0.25,0.5,0.75},0.5,2147483647)", //
        "{BetaRegularized(0.25,0.5,2.14748*10^9),BetaRegularized(0.5,0.5,2.14748*10^9),BetaRegularized(0.75,0.5,2.14748*10^9)}");

    checkNumeric("BetaRegularized(-1.5707963267948966,-I,-I)", //
        "0.8506422193103679+I*(-1.41891817181187441)");
    check("BetaRegularized(2,-2147483648,17)", //
        "1");
    check("BetaRegularized(0,1+I,b)", //
        "0");
    check("BetaRegularized(0,-1+I,b)", //
        "ComplexInfinity");
    check("BetaRegularized(z,a,-10)", //
        "0");
    check("BetaRegularized(1,a,42)", //
        "1");

    // TODO get Indeterminate
    check("BetaRegularized(10^20., 10^30., 10.^20.)", //
        "BetaRegularized(1.*10^20,1.*10^30,1.*10^20)");

    check("BetaRegularized({0.25, 0.5, 0.75}, 2.5, 0.5)", //
        "{0.0117248,0.0755868,0.25317}");
    check("BetaRegularized(0.99 , 255.0 , 2.0)", //
        "0.273655");
  }


  @Test
  public void testBinomial() {
    // issue #946
    // message Binomial: BigInteger bit length `1` exceeded.
    check("Binomial(12!, 9!)", //
        "Binomial(12!,9!)");

    check("N(Binomial(7/3, 1/5), 20)", //
        "1.3331254244650286522");
    check("Binomial(8.2211111111115000000, 4) ", //
        "80.344138315176948065");

    check("Binomial(8.5, -4.2)", //
        "0.0000604992");
    check("N(Binomial(7/3, 1/5), 20)", //
        "1.3331254244650286522");
    check("Binomial(2. + I, 7 - 3*I)", //
        "-75.46835+I*106.8153");

    check("Binomial(a,b,c)", //
        "Binomial(a,b,c)");
    check("Binomial(a)", //
        "Binomial(a)");

    check("Factorial(10)/Factorial(3)", //
        "604800");
    check("Gamma(11)/Gamma(4)", //
        "604800");
    check("Binomial(4.5, 3.76)", //
        "3.39253");
    check("Binomial(2+k, k)", //
        "1/2*(1+k)*(2+k)");
    check("Binomial(5+k, k)", //
        "1/120*(1+k)*(2+k)*(3+k)*(4+k)*(5+k)");
    check("Binomial(-200,-100)", //
        "0");
    check("Binomial(-100,-200)", //
        "45274257328051640582702088538742081937252294837706668420660");
    check("Binomial(k, -1)", //
        "0");
    check("Binomial(3,3)", //
        "1");
    check("Binomial(0,0)", //
        "1");
    check("Binomial(-3,-5)", //
        "6");
    check("Binomial(Infinity, 0)", //
        "1");
    check("Binomial(-Infinity, {-3,-2,-1,0,1,2,3,4,5,6})", //
        "{0,0,0,1,-Infinity,Infinity,-Infinity,Infinity,-Infinity,Binomial(-Infinity,6)}");
    check("Binomial(-Infinity, -12)", //
        "0");
    check("Binomial(Infinity, {-3,-2,-1,0,1,2,3,4,5,6})", //
        "{0,0,0,1,Infinity,Infinity,Infinity,Infinity,Infinity,Binomial(Infinity,6)}");
    check("Binomial(Infinity, -12)", //
        "0");
    check("Binomial({2, 3, 5, 7, 11}, 3)", //
        "{0,1,10,35,165}");
    check(
        "With({eps = 10^-6.}, \n" + " Table(Binomial(-3 - p eps, -5 - eps), {p, {-3, -2, -1, \n"
            + "    1, 2, 3, 4}}))", //
        "{-2.0,-3.0,-6.0,6.0,3.0,2.0,1.5}");

    check("Binomial(k, -1)", //
        "0");
    check("Binomial(k, -1.4)", //
        "Binomial(k,-1.4)");
    check("Binomial(k, 0)", //
        "1");
    check("Binomial(40,1)", //
        "40");
    check("Binomial(40.0,1.0)", //
        "40.0");
    check("Binomial(40.3,1.2)", //
        "76.37683");
    check("Binomial(n, n+1)", //
        "0");
    check("Binomial(n, n+2)", //
        "0");
    check("Binomial(4,2)", //
        "6");
    check("Binomial(5,3)", //
        "10");

    check("Binomial(n0, 2)", //
        "1/2*(-1+n0)*n0");
    check("Binomial(k/3, k)", //
        "Binomial(k/3,k)");
    check("Binomial(0, 0)", //
        "1");
    check("Binomial(1000, 500)", //
        "2702882409454365695156146936259752754961520084465482870073928751066254287055221\\\n"
            + "9389861248392450237016536260608502154610480220975005067991754989421969951847542\\\n"
            + "3665484263751733356162464079737887344364574161119497604571044985756287880514600\\\n"
            + "994219426752366915856603136862602484428109296905863799821216320");
    check("Binomial(n0, n0)", //
        "1");
    check("Binomial(n0, 0)", //
        "1");
    check("Binomial(n0, n0-1)", //
        "n0");
    check("Binomial(n0, 1)", //
        "n0");
    check("Binomial(n0, 2)", //
        "1/2*(-1+n0)*n0");
    check("Binomial(n0, 3)", //
        "1/6*(-2+n0)*(-1+n0)*n0");
    // check("Binomial(-3, -5)", "0");

    check("Binomial(k, 2)", //
        "1/2*(-1+k)*k");
    check("Binomial(k, 5)", //
        "1/120*(-4+k)*(-3+k)*(-2+k)*(-1+k)*k");
    check("Binomial(k, 6)", //
        "Binomial(k,6)");
  }

  @Test
  public void testCosIntegral() {
    checkNumeric("CosIntegral(2.8)", //
        "0.18648838964345027");
    check("Table(CosIntegral(x), {x,-4.0, 4.0, 1/4})", //
        "{-0.140982+I*3.14159,-0.093103+I*3.14159,-0.0321285+I*3.14159,0.0398086+I*3.14159,0.11963+I*3.14159," //
            + "0.203307+I*3.14159,0.285871+I*3.14159,0.361402+I*3.14159,0.422981+I*3.14159,0.46252+I*3.14159," //
            + "0.470356+I*3.14159,0.434301+I*3.14159,0.337404+I*3.14159,0.152164+I*3.14159,-0.177784+I*3.14159," //
            + "-0.824663+I*3.14159,-Infinity,-0.824663,-0.177784,0.152164,0.337404,0.434301,0.470356,0.46252," //
            + "0.422981,0.361402,0.285871,0.203307,0.11963,0.0398086,-0.0321285,-0.093103,-0.140982}");
    check("Table(CosIntegral(x+I), {x,-4.0, 4.0, 1/4})", //
        "{-0.265563+I*3.31255,-0.208538+I*3.37786,-0.130716+I*3.43686,-0.0341048+I*3.48549,0.0781342+I*3.51974," //
            + "0.201739+I*3.53574,0.331465+I*3.52983,0.461254+I*3.49865,0.584476+I*3.43909,0.694251+I*3.34816," //
            + "0.783918+I*3.22281,0.847756+I*3.05959,0.882172+I*2.85434,0.887634+I*2.60237,0.871301+I*2.30022," //
            + "0.848481+I*1.95082,0.837867+I*1.5708,0.848481+I*1.19077,0.871301+I*0.841369,0.887634+I*0.539222," //
            + "0.882172+I*0.287249,0.847756+I*0.0820006,0.783918+I*(-0.0812194),0.694251+I*(-0.206567)," //
            + "0.584476+I*(-0.297495),0.461254+I*(-0.35706),0.331465+I*(-0.388237),0.201739+I*(-0.394143)," //
            + "0.0781342+I*(-0.378147),-0.0341048+I*(-0.343896),-0.130716+I*(-0.295264),-0.208538+I*(-0.236271)," //
            + "-0.265563+I*(-0.170956)}");
  }

  @Test
  public void testCatalanNumber() {
    check("N(CatalanNumber(I),20)", //
        "0.39764993382373624266+I*(-0.0208843416208425557)");
    check("N(CatalanNumber(1/4),20)", //
        "0.86296416190140697066");
    check("CatalanNumber(-10)", //
        "0");
    check("CatalanNumber(-1)", //
        "-1");
    check("CatalanNumber(0)", //
        "1");
    check("CatalanNumber(1)", //
        "1");
    check("CatalanNumber(3)", //
        "5");
    check("CatalanNumber(10)", //
        "16796");

    check("CatalanNumber(-5/2)", //
        "ComplexInfinity");

    check("CatalanNumber(5/2)", //
        "1024/105*1/Pi");
    check("CatalanNumber(41/2)", //
        "2417851639229258349412352/60755857577415*1/Pi");
    check("CatalanNumber(1.2 + I)", //
        "0.730729+I*0.569846");
  }

  @Test
  public void testCoshIntegral() {
    // TODO https://github.com/paulmasson/math/issues/15
    check("CoshIntegral(-4.0)", //
        "9.81355+I*3.14159");
    check("CoshIntegral(2.8)", //
        "4.33122");

    check("Table(CoshIntegral(x), {x,-4.0, 4.0, 1/4})", //
        "{9.81355+I*3.14159,8.2561+I*3.14159,6.95919+I*3.14159,5.87389+I*3.14159,4.96039+I*3.14159," //
            + "4.18616+I*3.14159,3.52443+I*3.14159,2.9529+I*3.14159,2.45267+I*3.14159,2.00708+I*3.14159," //
            + "1.60063+I*3.14159,1.21732+I*3.14159,0.837867+I*3.14159,0.433496+I*3.14159,-0.0527768+I*3.14159," //
            + "-0.793413+I*3.14159,-Infinity,-0.793413,-0.0527768,0.433496,0.837867,1.21732,1.60063,2.00708," //
            + "2.45267,2.9529,3.52443,4.18616,4.96039,5.87389,6.95919,8.2561,9.81355}");
  }

  @Test
  public void testErf() {
    // assertEquals(org.hipparchus.special.Erf.erf(new Complex(1.0, 1.5)).toString(), //
    // "");

    check("Table(erf(x), {x,-10.0, 10.0, 1/100})", //
        "{
            + "-0.999999,-0.999999,-0.999999,-0.999999,-0.999999,-0.999999,-0.999999,-0.999999,-0.999999,-0.999999,-0.999999,-0.999999,-0.999999,-0.999999,-0.999999,-0.999998,-0.999998,-0.999998,-0.999998,-0.999998,-0.999998,-0.999998,-0.999998,-0.999997,-0.999997,-0.999997,-0.999997,-0.999996,-0.999996,-0.999996,-0.999996,-0.999995,-0.999995,-0.999995,-0.999994,-0.999994,-0.999994,-0.999993,-0.999993,-0.999992,-0.999992,-0.999991,-0.99999,-0.99999,-0.999989,-0.999988,-0.999988,-0.999987,-0.999986,-0.999985,-0.999984,-0.999983,-0.999982,-0.999981,-0.999979,-0.999978,-0.999976,-0.999975,-0.999973,-0.999972,-0.99997,-0.999968,-0.999966,-0.999964,-0.999961,-0.999959,-0.999956,-0.999954,-0.999951,-0.999948,-0.999944,-0.999941,-0.999937,-0.999933,-0.999929,-0.999925,-0.99992,-0.999916,-0.99991,-0.999905,-0.999899,-0.999893,-0.999887,-0.99988,-0.999873,-0.999866,-0.999858,-0.999849,-0.999841,-0.999831,-0.999822,-0.999811,-0.9998,-0.999789,-0.999777,-0.999764,-0.999751,-0.999736,-0.999722,-0.999706,-0.999689,-0.999672,-0.999654,-0.999635,-0.999614,-0.999593,-0.999571,-0.999547,-0.999523,-0.999497,-0.999469,-0.999441,-0.999411,-0.999379,-0.999346,-0.999311,-0.999275,-0.999237,-0.999197,-0.999155,-0.999111,-0.999065,-0.999016,-0.998966,-0.998912,-0.998857,-0.998799,-0.998738,-0.998674,-0.998607,-0.998537,-0.998464,-0.998388,-0.998308,-0.998224,-0.998137,-0.998046,-0.997951,-0.997851,-0.997747,-0.997639,-0.997525,-0.997407,-0.997284,-0.997155,-0.997021,-0.99688,-0.996734,-0.996582,-0.996423,-0.996258,-0.996086,-0.995906,-0.995719,-0.995525,-0.995322,-0.995111,-0.994892,-0.994664,-0.994426,-0.994179,-0.993923,-0.993656,-0.993378,-0.99309,-0.99279,-0.992479,-0.992156,-0.991821,-0.991472,-0.991111,-0.990736,-0.990347,-0.989943,-0.989525,-0.989091,-0.988641,-0.988174,-0.987691,-0.98719,-0.986672,-0.986135,-0.985578,-0.985003,-0.984407,-0.98379,-0.983153,-0.982493,-0.98181,-0.981105,-0.980376,-0.979622,-0.978843,-0.978038,-0.977207,-0.976348,-0.975462,-0.974547,-0.973603,-0.972628,-0.971623,-0.970586,-0.969516,-0.968413,-0.967277,-0.966105,-0.964898,-0.963654,-0.962373,-0.961054,-0.959695,-0.958297,-0.956857,-0.955376,-0.953852,-0.952285,-0.950673,-0.949016,-0.947312,-0.945561,-0.943762,-0.941914,-0.940015,-0.938065,-0.936063,-0.934008,-0.931899,-0.929734,-0.927514,-0.925236,-0.9229,-0.920505,-0.91805,-0.915534,-0.912956,-0.910314,-0.907608,-0.904837,-0.902,-0.899096,-0.896124,-0.893082,-0.889971,-0.886788,-0.883533,-0.880205,-0.876803,-0.873326,-0.869773,-0.866144,-0.862436,-0.85865,-0.854784,-0.850838,-0.84681,-0.842701,-0.838508,-0.834232,-0.82987,-0.825424,-0.820891,-0.816271,-0.811564,-0.806768,-0.801883,-0.796908,-0.791843,-0.786687,-0.78144,-0.7761,-0.770668,-0.765143,-0.759524,-0.753811,-0.748003,-0.742101,-0.736103,-0.73001,-0.723822,-0.717537,-0.711156,-0.704678,-0.698104,-0.691433,-0.684666,-0.677801,-0.67084,-0.663782,-0.656628,-0.649377,-0.642029,-0.634586,-0.627046,-0.619411,-0.611681,-0.603856,-0.595936,-0.587923,-0.579816,-0.571616,-0.563323,-0.554939,-0.546464,-0.537899,-0.529244,-0.5205,-0.511668,-0.50275,-0.493745,-0.484655,-0.475482,-0.466225,-0.456887,-0.447468,-0.437969,-0.428392,-0.418739,-0.409009,-0.399206,-0.38933,-0.379382,-0.369365,-0.359279,-0.349126,-0.338908,-0.328627,-0.318283,-0.30788,-0.297418,-0.2869,-0.276326,-0.2657,-0.255023,-0.244296,-0.233522,-0.222703,-0.21184,-0.200936,-0.189992,-0.179012,-0.167996,-0.156947,-0.145867,-0.134758,-0.123623,-0.112463,-0.101281,-0.0900781,-0.0788577,-0.0676216,-0.056372,-0.0451111,-0.0338412,-0.0225646,-0.0112834,-1.90571*10^-13,0.0112834,0.0225646,0.0338412,0.0451111,0.056372,0.0676216,0.0788577,0.0900781,0.101281,0.112463,0.123623,0.134758,0.145867,0.156947,0.167996,0.179012,0.189992,0.200936,0.21184,0.222703,0.233522,0.244296,0.255023,0.2657,0.276326,0.2869,0.297418,0.30788,0.318283,0.328627,0.338908,0.349126,0.359279,0.369365,0.379382,0.38933,0.399206,0.409009,0.418739,0.428392,0.437969,0.447468,0.456887,0.466225,0.475482,0.484655,0.493745,0.50275,0.511668,0.5205,0.529244,0.537899,0.546464,0.554939,0.563323,0.571616,0.579816,0.587923,0.595936,0.603856,0.611681,0.619411,0.627046,0.634586,0.642029,0.649377,0.656628,0.663782,0.67084,0.677801,0.684666,0.691433,0.698104,0.704678,0.711156,0.717537,0.723822,0.73001,0.736103,0.742101,0.748003,0.753811,0.759524,0.765143,0.770668,0.7761,0.78144,0.786687,0.791843,0.796908,0.801883,0.806768,0.811564,0.816271,0.820891,0.825424,0.82987,0.834232,0.838508,0.842701,0.84681,0.850838,0.854784,0.85865,0.862436,0.866144,0.869773,0.873326,0.876803,0.880205,0.883533,0.886788,0.889971,0.893082,0.896124,0.899096,0.902,0.904837,0.907608,0.910314,0.912956,0.915534,0.91805,0.920505,0.9229,0.925236,0.927514,0.929734,0.931899,0.934008,0.936063,0.938065,0.940015,0.941914,0.943762,0.945561,0.947312,0.949016,0.950673,0.952285,0.953852,0.955376,0.956857,0.958297,0.959695,0.961054,0.962373,0.963654,0.964898,0.966105,0.967277,0.968413,0.969516,0.970586,0.971623,0.972628,0.973603,0.974547,0.975462,0.976348,0.977207,0.978038,0.978843,0.979622,0.980376,0.981105,0.98181,0.982493,0.983153,0.98379,0.984407,0.985003,0.985578,0.986135,0.986672,0.98719,0.987691,0.988174,0.988641,0.989091,0.989525,0.989943,0.990347,0.990736,0.991111,0.991472,0.991821,0.992156,0.992479,0.99279,0.99309,0.993378,0.993656,0.993923,0.994179,0.994426,0.994664,0.994892,0.995111,0.995322,0.995525,0.995719,0.995906,0.996086,0.996258,0.996423,0.996582,0.996734,0.99688,0.997021,0.997155,0.997284,0.997407,0.997525,0.997639,0.997747,0.997851,0.997951,0.998046,0.998137,0.998224,0.998308,0.998388,0.998464,0.998537,0.998607,0.998674,0.998738,0.998799,0.998857,0.998912,0.998966,0.999016,0.999065,0.999111,0.999155,0.999197,0.999237,0.999275,0.999311,0.999346,0.999379,0.999411,0.999441,0.999469,0.999497,0.999523,0.999547,0.999571,0.999593,0.999614,0.999635,0.999654,0.999672,0.999689,0.999706,0.999722,0.999736,0.999751,0.999764,0.999777,0.999789,0.9998,0.999811,0.999822,0.999831,0.999841,0.999849,0.999858,0.999866,0.999873,0.99988,0.999887,0.999893,0.999899,0.999905,0.99991,0.999916,0.99992,0.999925,0.999929,0.999933,0.999937,0.999941,0.999944,0.999948,0.999951,0.999954,0.999956,0.999959,0.999961,0.999964,0.999966,0.999968,0.99997,0.999972,0.999973,0.999975,0.999976,0.999978,0.999979,0.999981,0.999982,0.999983,0.999984,0.999985,0.999986,0.999987,0.999988,0.999988,0.999989,0.99999,0.99999,0.999991,0.999992,0.999992,0.999993,0.999993,0.999994,0.999994,0.999994,0.999995,0.999995,0.999995,0.999996,0.999996,0.999996,0.999996,0.999997,0.999997,0.999997,0.999997,0.999998,0.999998,0.999998,0.999998,0.999998,0.999998,0.999998,0.999998,0.999999,0.999999,0.999999,0.999999,0.999999,0.999999,0.999999,0.999999,0.999999,0.999999,0.999999,0.999999,0.999999,0.999999,0.999999,"
            + "1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0}");

    // check("N(Erf(10000), 30)", //
    // "1");
    check("N(Erf(3/2-I), 50)", //
        "1.0783992074989334503393327040582123696121612366804+"
            + "I*0.0279637112386558494484658962059072085066945367208");
    check("N(Erf(3/2), 50)", //
        "0.96610514647531072706697626164594785868141047925763");

    checkNumeric("Erf(-10007.0)", //
        "-1.0");
    checkNumeric("Erf(-0.5)", //
        "-0.5204998778130466");
    checkNumeric("Erf(3.0)", //
        "0.9999779095030014");

    check("Erf(-z)", //
        "-Erf(z)");
    check("Erf(-42*I*x)", //
        "-I*Erfi(42*x)");
    check("Erf(43*I*x)", //
        "I*Erfi(43*x)");
    check("Erf(I)", //
        "I*Erfi(1)");
    check("Erf(-I)", //
        "-I*Erfi(1)");

    checkNumeric("Erf(1.5, 2)", //
        "0.02921711854364195");
    check("Erf(-Infinity, Infinity)", //
        "2");

    check("Erf(0.0)", //
        "0.0");
    check("Erf(1.5-I)", //
        "1.0784+I*0.0279637");
    check("Erf({0.5, 1.0, 1.5})", //
        "{0.5205,0.842701,0.966105}");
    check("Erf({Infinity, -Infinity, I Infinity, -I Infinity})", //
        "{1,-1,I*Infinity,-I*Infinity}");

    check("Erf(-x)", //
        "-Erf(x)");
    check("Erf(1.0)", //
        "0.842701");
    check("Erf(0)", //
        "0");
    check("{Erf(0, x), Erf(x, 0)}", //
        "{Erf(x),-Erf(x)}");

    check("Erf(ComplexInfinity)", //
        "Indeterminate");
    checkNumeric("Erf(0.95)", //
        "0.8208908072732778");
  }

  @Test
  public void testErfc() {
    check("N(Erfc(100000000000000000000000000000000035/2*1/Sqrt(2)),30)", //
        "0");
    checkNumeric("Erfc(1.5-I)", //
        "-0.07839920749893325+I*(-0.02796371123865648)");
    check("Erfc({0.5, 1.0, 1.5})", //
        "{0.4795,0.157299,0.0338949}");
    check("Erfc(0.95)", //
        "0.179109");
    checkNumeric("Erfc(5/Sqrt(2))/2 // N", //
        "2.866515718791932E-7");
    check("Erfc(-0.28991)", //
        "1.31819");
    // don't transform negative arg
    check("Erfc(-x) / 2", //
        "Erfc(-x)/2");
    checkNumeric("Erfc(1.0)", //
        "0.15729920705028488");
    check("Erfc(0)", //
        "1");
  }

  @Test
  public void testErfi() {
    // https://github.com/Hipparchus-Math/hipparchus/issues/278
    checkNumeric("Erfi(1.5-I)", //
        "-0.7013604642514806+I*(-1.846833014608542)");

    checkNumeric("N(Erfi(1/2),50)", //
        "0.6149520946965109808396811856236413930513456178954");
    check("Erfi(0.5000000000000000000000000000000000)", //
        "0.6149520946965109808396811856236413");
    // https://github.com/mtommila/apfloat/issues/31
    // checkNumeric("N(Erfi(1/2),50)", //
    // "0.6149520946965109808396811856236413930513456178954");
    check("Erfi({0.5, 1.5, 2.5})", //
        "{0.614952,4.58473,130.3958}");
    check("Erfi(I)", //
        "I*Erf(1)");
    check("Erfi(-I)", //
        "-I*Erf(1)");
    check("Erfi(-42*I*x)", //
        "-I*Erf(42*x)");
    check("Erfi(43*I*x)", //
        "I*Erf(43*x)");
    check("Erfi((-1)^(1/4)*2^2)", //
        "Erfi(4*(-1)^(1/4))");
    check("Erfi((-1)^(1/4)*2.0^2)", //
        "-0.121816+I*1.07044");
    check("Erfi(0)", //
        "0");
    check("Erfi({-Infinity, Infinity, I Infinity, -I Infinity})", //
        "{-Infinity,Infinity,I,-I}");
    check("Erfi(I*Infinity)", //
        "I");
    check("Erfi(-I*Infinity)", //
        "-I");
    check("Erfi(-x)", //
        "-Erfi(x)");
  }

  @Test
  public void testExpIntegralE() {
    // check("N(Table(ExpIntegralE(x, 2/3), {x,-4, 4, 1/4}),50)", //
    // "");
    checkNumeric("N(ExpIntegralE(3, 22/10), 50)", //
        "0.023520656648276500007831719911764625915312610516518");
    checkNumeric("ExpIntegralE(1.0+I,2.0+3.0*I)", //
        "-0.01894383050841671+I*0.020443770103244958");
    check("ExpIntegralE(0,z)", //
        "1/(E^z*z)");
    check("ExpIntegralE(n,0)", //
        "ExpIntegralE(n,0)");
    check("ExpIntegralE(17,0)", //
        "1/16");
    check("ExpIntegralE(-17,0)", //
        "ComplexInfinity");
    // https://github.com/paulmasson/math/issues/14
    check("Table(ExpIntegralE(x, 2/3), {x,-4.0, 4.0, 1/4})", //
        "{182.1347,113.6881,71.99039,46.27989,30.22743,20.0743,13.56576,9.33534,6.54607,4.6798,3.41217," //
            + "2.53784,1.92531,1.4894,1.17424,0.942781,0.770126,0.639355,0.538822,0.460414,0.398409,0.348723," //
            + "0.308405,0.275299,0.247811,0.224748,0.205209,0.188505,0.174105,0.161593,0.150644,0.140999,0.132449}");
  }

  @Test
  public void testExpIntegralEi() {
    check("ExpIntegralEi(0)", //
        "-Infinity");
    check("ExpIntegralEi(Infinity)", //
        "Infinity");
    check("ExpIntegralEi(-Infinity)", //
        "0");
    checkNumeric("ExpIntegralEi(I*1.0)", //
        "0.3374039229708732+I*2.516879397177189");
    checkNumeric("ExpIntegralEi(-I*1.0)", //
        "0.3374039229708732+I*(-2.516879397177189)");
    checkNumeric("ExpIntegralEi(-1.0)", //
        "-0.21938393443307924");
    checkNumeric("ExpIntegralEi(1.0)", //
        "1.8951178163550635");
    check("ExpIntegralEi(I*Infinity)", //
        "I*Pi");
    check("ExpIntegralEi(-I*Infinity)", //
        "-I*Pi");
    check("Table(ExpIntegralEi(x), {x,-4.0, 4.0, 1/4})", //
        "{-0.00377935,-0.0051241,-0.00697014,-0.00951651,-0.0130484,-0.0179789,-0.0249149,-0.0347621," //
            + "-0.0489005,-0.0694887,-0.10002,-0.146413,-0.219384,-0.340341,-0.559774,-1.04428,-Infinity," //
            + "-0.542543,0.45422,1.20733,1.89512,2.58105,3.30129,4.08365,4.95423,5.94057,7.07377,8.3903," //
            + "9.93383,11.7573,13.92535,16.51732,19.63087}");
    check("Table(ExpIntegralEi(x), {x, -3.0, 3.0, 0.25})", //
        "{-0.0130484,-0.0179789,-0.0249149,-0.0347621,-0.0489005,-0.0694887,-0.10002,-0.146413,-0.219384,-0.340341," //
            + "-0.559774,-1.04428,-Infinity,-0.542543,0.45422,1.20733,1.89512,2.58105,3.30129,4.08365,4.95423,5.94057," //
            + "7.07377,8.3903,9.93383}");
    check("ExpIntegralEi(1.8)", //
        "4.24987");
  }

  @Test
  public void testFactorial() {
    check("Factorial(-1.0)", //
        "ComplexInfinity");
    check("Factorial(-2.0)", //
        "ComplexInfinity");
    check("170.0!", //
        "7.25742*10^306");
    check("Factorial(5.211111111111111111)", //
        "172.7183563387097672");
    check("(5/2)!", //
        "15/8*Sqrt(Pi)");
    check("(-7/2)!", //
        "-8/15*Sqrt(Pi)");
    check("(-121/2)!", //
        "1152921504606846976/6972993461801137628817411854132406856519268086997480719774989309037307630499025\\\n"
            + "82163482720947265625*Sqrt(Pi)");
    check("Factorial(I*Infinity)", //
        "0");
    check("Factorial(-I*Infinity)", //
        "0");
    check("Factorial(ComplexInfinity)", //
        "Indeterminate");
    check("Factorial(Factorial(x))", //
        "(x!)!");
    check("Factorial(2.5)", //
        "3.32335");
    check("Factorial(Infinity)", //
        "Infinity");

    check("Factorial(-1/2)", //
        "Sqrt(Pi)");
    check("Factorial(1/2)", //
        "Sqrt(Pi)/2");
    check("Factorial(0)", //
        "1");
    check("Factorial(1)", //
        "1");
    check("Factorial(-1)", //
        "ComplexInfinity");
    check("Factorial(10)", //
        "3628800");
    check("Factorial(-10)", //
        "ComplexInfinity");
    check("Factorial(11)", //
        "39916800");
    check("Factorial(-11)", //
        "ComplexInfinity");
    check("Factorial(19)", //
        "121645100408832000");
    check("Factorial(20)", //
        "2432902008176640000");
    check("Factorial(21)", //
        "51090942171709440000");
    checkNumeric("10.5!", //
        "1.1899423083962249E7");
    check("!a! //FullForm", //
        "Not(Factorial(a))");
  }

  @Test
  public void testFactorial2() {
    check("Factorial2(x)", //
        "x!!");
    check("Factorial2(0)", //
        "1");
    check("Factorial2(-1)", //
        "1");
    check("N(Factorial2(3/13), 10)", //
        "0.9953739588");
    check("Factorial2(5.211111111111111111)", //
        "18.6046636633029321");

    check("Factorial2(2 + 3*I) // FunctionExpand", //
        "2^(1+I*3/2+1/4*(1-Cosh(3*Pi)))*Pi^(1/4*(-1+Cosh(3*Pi)))*Gamma(2+I*3/2)");
    check("Factorial2(2.0 + I)", //
        "5.15473+I*3.27618");

    check("Factorial2(-1)", //
        "1");
    check("Factorial2(-2)", //
        "ComplexInfinity");
    check("Factorial2(-3)", //
        "-1");
    check("Factorial2(-4)", //
        "ComplexInfinity");
    check("Factorial2(-5)", //
        "1/3");
    check("Factorial2(-6)", //
        "ComplexInfinity");
    check("Factorial2(-7)", //
        "-1/15");
    check("Factorial2(10)", //
        "3840");
    check("Factorial2(Infinity)", //
        "Infinity");
    check("Factorial(-Infinity)", //
        "Indeterminate");
    check("Factorial2(-Infinity)", //
        "Indeterminate");
    check("3!", "6");
    check("3!!", "3");

  }

  @Test
  public void testFresnelC() {
    check("N(FresnelC(2),50)", //
        "0.48825340607534075450022350335726103768836715450921");

    check("FresnelC(1.8)", //
        "0.333633");
    check("FresnelC(2.0)", //
        "0.488253");
    checkNumeric("FresnelC(2.5+I)", //
        "116.64806138055195+I*(-105.22873567055957)");
    checkNumeric("FresnelC({1.5, 2.5, 3.5})", //
        "{0.4452611760398215,0.45741300964177706,0.5325724350280008}");

    check("FresnelC(0)", //
        "0");
    check("FresnelC(Infinity)", //
        "1/2");
    check("FresnelC(-Infinity)", //
        "-1/2");
    check("FresnelC(I*Infinity)", //
        "I*1/2");
    check("FresnelC(-I*Infinity)", //
        "-I*1/2");

    check("FresnelC(-z)", //
        "-FresnelC(z)");
    check("FresnelC(I*z)", //
        "I*FresnelC(z)");
    checkNumeric("FresnelC(1.8)", //
        "0.33363292722155713");

    check("D(FresnelC(x),x)", //
        "Cos(1/2*Pi*x^2)");
  }

  @Test
  public void testFresnelS() {
    check("N(FresnelS(2),50)", //
        "0.34341567836369824219530081595806845688654181220252");
    check("FresnelS(1.8)", //
        "0.450939");
    check("FresnelS(2.0)", //
        "0.343416");
    checkNumeric("FresnelS(2.5+I)", //
        "105.72873498286873+I*116.14801684869202");
    checkNumeric("FresnelS({1.5, 2.5, 3.5})", //
        "{0.6975049600820931,0.619181755819593,0.41524801197243755}");

    check("FresnelS(0)", //
        "0");
    check("FresnelS(Infinity)", //
        "1/2");
    check("FresnelS(-Infinity)", //
        "-1/2");
    check("FresnelS(I*Infinity)", //
        "-I*1/2");
    check("FresnelS(-I*Infinity)", //
        "I*1/2");

    check("FresnelS(-z)", //
        "-FresnelS(z)");
    check("FresnelS(I*z)", //
        "-I*FresnelS(z)");
    checkNumeric("FresnelS(1.8)", //
        "0.45093876926758314");
    check("D(Fresnels(x),x)", //
        "Sin(1/2*Pi*x^2)");
  }

  @Test
  public void testGamma() {
    // https://github.com/Mathics3/mathics-core/pull/1395
    check("Gamma(x,y,z)", //
        "Gamma(x,y,z)");
    check("Gamma(1+I*0.5,10,12)", //
        "0.0000148068+I*0.0000363437");
    checkNumeric("{Gamma(2.2), Gamma(1.5,7.5), Gamma(1, 1.1, 2.2)}", //
        "{1.1018024908797128,0.0016099632282723204,0.22206792533574568}");

    check("Table(x+2432902008176640000/(Gamma(49/5)*Gamma(61/5)), {x,-100.0, 100.0, 1/3})", //
        "{160947.2,160947.6,160947.9,160948.2,160948.6,160948.9,160949.2,160949.6,160949.9,160950.2,160950.6,160950.9,160951.2,160951.6,160951.9,160952.2,160952.6,160952.9,160953.2,160953.6,160953.9,160954.2,160954.6,160954.9,160955.2,160955.6,160955.9,160956.2,160956.6,160956.9,160957.2,160957.6,160957.9,160958.2,160958.6,160958.9,160959.2,160959.6,160959.9,160960.2,160960.6,160960.9,160961.2,160961.6,160961.9,160962.2,160962.6,160962.9,160963.2,160963.6,160963.9,160964.2,160964.6,160964.9,160965.2,160965.6,160965.9,160966.2,160966.6,160966.9,160967.2,160967.6,160967.9,160968.2,160968.6,160968.9,160969.2,160969.6,160969.9,160970.2,160970.6,160970.9,160971.2,160971.6,160971.9,160972.2,160972.6,160972.9,160973.2,160973.6,160973.9,160974.2,160974.6,160974.9,160975.2,160975.6,160975.9,160976.2,160976.6,160976.9,160977.2,160977.6,160977.9,160978.2,160978.6,160978.9,160979.2,160979.6,160979.9,160980.2,160980.6,160980.9,160981.2,160981.6,160981.9,160982.2,160982.6,160982.9,160983.2,160983.6,160983.9,160984.2,160984.6,160984.9,160985.2,160985.6,160985.9,160986.2,160986.6,160986.9,160987.2,160987.6,160987.9,160988.2,160988.6,160988.9,160989.2,160989.6,160989.9,160990.2,160990.6,160990.9,160991.2,160991.6,160991.9,160992.2,160992.6,160992.9,160993.2,160993.6,160993.9,160994.2,160994.6,160994.9,160995.2,160995.6,160995.9,160996.2,160996.6,160996.9,160997.2,160997.6,160997.9,160998.2,160998.6,160998.9,160999.2,160999.6,160999.9,161000.2,161000.6,161000.9,161001.2,161001.6,161001.9,161002.2,161002.6,161002.9,161003.2,161003.6,161003.9,161004.2,161004.6,161004.9,161005.2,161005.6,161005.9,161006.2,161006.6,161006.9,161007.2,161007.6,161007.9,161008.2,161008.6,161008.9,161009.2,161009.6,161009.9,161010.2,161010.6,161010.9,161011.2,161011.6,161011.9,161012.2,161012.6,161012.9,161013.2,161013.6,161013.9,161014.2,161014.6,161014.9,161015.2,161015.6,161015.9,161016.2,161016.6,161016.9,161017.2,161017.6,161017.9,161018.2,161018.6,161018.9,161019.2,161019.6,161019.9,161020.2,161020.6,161020.9,161021.2,161021.6,161021.9,161022.2,161022.6,161022.9,161023.2,161023.6,161023.9,161024.2,161024.6,161024.9,161025.2,161025.6,161025.9,161026.2,161026.6,161026.9,161027.2,161027.6,161027.9,161028.2,161028.6,161028.9,161029.2,161029.6,161029.9,161030.2,161030.6,161030.9,161031.2,161031.6,161031.9,161032.2,161032.6,161032.9,161033.2,161033.6,161033.9,161034.2,161034.6,161034.9,161035.2,161035.6,161035.9,161036.2,161036.6,161036.9,161037.2,161037.6,161037.9,161038.2,161038.6,161038.9,161039.2,161039.6,161039.9,161040.2,161040.6,161040.9,161041.2,161041.6,161041.9,161042.2,161042.6,161042.9,161043.2,161043.6,161043.9,161044.2,161044.6,161044.9,161045.2,161045.6,161045.9,161046.2,161046.6,161046.9,161047.2,161047.6,161047.9,161048.2,161048.6,161048.9,161049.2,161049.6,161049.9,161050.2,161050.6,161050.9,161051.2,161051.6,161051.9,161052.2,161052.6,161052.9,161053.2,161053.6,161053.9,161054.2,161054.6,161054.9,161055.2,161055.6,161055.9,161056.2,161056.6,161056.9,161057.2,161057.6,161057.9,161058.2,161058.6,161058.9,161059.2,161059.6,161059.9,161060.2,161060.6,161060.9,161061.2,161061.6,161061.9,161062.2,161062.6,161062.9,161063.2,161063.6,161063.9,161064.2,161064.6,161064.9,161065.2,161065.6,161065.9,161066.2,161066.6,161066.9,161067.2,161067.6,161067.9,161068.2,161068.6,161068.9,161069.2,161069.6,161069.9,161070.2,161070.6,161070.9,161071.2,161071.6,161071.9,161072.2,161072.6,161072.9,161073.2,161073.6,161073.9,161074.2,161074.6,161074.9,161075.2,161075.6,161075.9,161076.2,161076.6,161076.9,161077.2,161077.6,161077.9,161078.2,161078.6,161078.9,161079.2,161079.6,161079.9,161080.2,161080.6,161080.9,161081.2,161081.6,161081.9,161082.2,161082.6,161082.9,161083.2,161083.6,161083.9,161084.2,161084.6,161084.9,161085.2,161085.6,161085.9,161086.2,161086.6,161086.9,161087.2,161087.6,161087.9,161088.2,161088.6,161088.9,161089.2,161089.6,161089.9,161090.2,161090.6,161090.9,161091.2,161091.6,161091.9,161092.2,161092.6,161092.9,161093.2,161093.6,161093.9,161094.2,161094.6,161094.9,161095.2,161095.6,161095.9,161096.2,161096.6,161096.9,161097.2,161097.6,161097.9,161098.2,161098.6,161098.9,161099.2,161099.6,161099.9,161100.2,161100.6,161100.9,161101.2,161101.6,161101.9,161102.2,161102.6,161102.9,161103.2,161103.6,161103.9,161104.2,161104.6,161104.9,161105.2,161105.6,161105.9,161106.2,161106.6,161106.9,161107.2,161107.6,161107.9,161108.2,161108.6,161108.9,161109.2,161109.6,161109.9,161110.2,161110.6,161110.9,161111.2,161111.6,161111.9,161112.2,161112.6,161112.9,161113.2,161113.6,161113.9,161114.2,161114.6,161114.9,161115.2,161115.6,161115.9,161116.2,161116.6,161116.9,161117.2,161117.6,161117.9,161118.2,161118.6,161118.9,161119.2,161119.6,161119.9,161120.2,161120.6,161120.9,161121.2,161121.6,161121.9,161122.2,161122.6,161122.9,161123.2,161123.6,161123.9,161124.2,161124.6,161124.9,161125.2,161125.6,161125.9,161126.2,161126.6,161126.9,161127.2,161127.6,161127.9,161128.2,161128.6,161128.9,161129.2,161129.6,161129.9,161130.2,161130.6,161130.9,161131.2,161131.6,161131.9,161132.2,161132.6,161132.9,161133.2,161133.6,161133.9,161134.2,161134.6,161134.9,161135.2,161135.6,161135.9,161136.2,161136.6,161136.9,161137.2,161137.6,161137.9,161138.2,161138.6,161138.9,161139.2,161139.6,161139.9,161140.2,161140.6,161140.9,161141.2,161141.6,161141.9,161142.2,161142.6,161142.9,161143.2,161143.6,161143.9,161144.2,161144.6,161144.9,161145.2,161145.6,161145.9,161146.2,161146.6,161146.9,161147.2}");

    check("Gamma(-9223372036854775808/11,-3.141592653589793,3/4)", //
        "-1.0032310722904763*10^104759677232087062");


    check("Gamma(4,3)", //
        "78/E^3");

    check("Gamma(Underflow())", //
        "Overflow()");
    check("Log(Gamma(1.*^20))", //
        "Overflow()");
    check("Gamma(-1.0000)", //
        "ComplexInfinity");
    check("N(Gamma(-42), 100)", //
        "ComplexInfinity");
    check("N(Gamma(15/10, 75/10), 100)", //
        "0.001609963228272320187037891277384183535570037262441668777093667293610308190983760142167627458859492548");
    check("N(Gamma(15/10+2*I, 75/10-1/3*I), 30)", //
        "-0.0002066609364277930243748741602+I*(-0.00168711069242446915572696537201)");

    // Iteration limit
    check("Gamma(1009,-9223372036854775807/9223372036854775808)",
        "Hold(Gamma(1009,-9223372036854775807/9223372036854775808))");
    check("Gamma(-9223372036854775808/11,0.5)", //
        "Gamma(-8.38488*10^17,0.5)");
    check("Gamma(2147483647)", //
        "Hold(Gamma(2147483647))");

    check("Gamma(a,b,Infinity)", //
        "Gamma(a,b)");
    check("Gamma(4,a,0)", //
        "-6+Gamma(4,a)");
    check("Gamma(42,0,b)", //
        "33452526613163807108170062053440751665152000000000-Gamma(42,b)");
    check("{Gamma(2.2), Gamma(1.5, 7.5), Gamma(1, 1.1, 2.2)}", //
        "{1.1018,0.00160996,0.222068}");
    check("Gamma(2.3 + I)", //
        "0.719141+I*0.540614");
    check("Gamma(2.20000000000000000000000000000000000000000)", //
        "1.10180249087971273276914198622299648082418");
    check("N(Gamma(100.000000000000000000000000000+374.000000000000000000000000000*I), 30)", //
        "47.4294943677064514689542753376+I*(-32.7488916473624576880974867017)");
    check("Gamma(1/2, a*x)", //
        "Gamma(1/2,a*x)");
    check("Gamma(3, a*x)", //
        "Gamma(3,a*x)");
    check("Gamma(0)", //
        "ComplexInfinity");
    check("Gamma(0.0+I*0.0)", //
        "ComplexInfinity");
    check("Table(Gamma(x+I*y), {x,-0.5, 0.5, 1/4}, {y,-0.5, 0.5, 1/4})", //
        "{{-1.58148+I*0.0548502,-2.75473+I*0.0310004,-3.54491,-2.75473+I*(-0.0310004),-1.58148+I*(-0.0548502)},{-1.31815+I*1.01078,-2.77536+I*1.61484,-4.90167,-2.77536+I*(-1.61484),-1.31815+I*(-1.01078)},{-0.399279+I*1.60339,-0.524105+I*3.76716,ComplexInfinity,-0.524105+I*(-3.76716),-0.399279+I*(-1.60339)},{0.515524+I*1.30733,1.65113+I*1.83788,3.62561,1.65113+I*(-1.83788),0.515524+I*(-1.30733)},{0.818164+I*0.763314,1.38511+I*0.673182,1.77245,1.38511+I*(-0.673182),0.818164+I*(-0.763314)}}");
    check("Table(Gamma(x+I ), {x,-10.0, 10.0, 1/2})", //
        "{5.57498*10^-8+I*5.54232*10^-8,-1.68355*10^-7+I*1.86667*10^-7,-6.12921*10^-7+I*(-4.98482*10^-7),1.4127*10^-6+I*(-1.94169*10^-6),6.01477*10^-6+I*3.87342*10^-6,-0.0000100663+I*0.0000179171,-0.0000519916+I*(-0.0000249726),0.00005758+I*(-0.000144445),0.000388914+I*0.000122817,-0.000229825+I*0.00099647,-0.0024563+I*(-0.000347985),0.00026757+I*(-0.00571041),0.0126295+I*(-0.000716374),0.00450635+I*0.0259644,-0.0498016+I*0.015495,-0.0417366+I*(-0.0863691),0.13391+I*(-0.0962865),0.190711+I*0.174186,-0.171533+I*0.326483,-0.460252+I*(-0.0705685),-0.15495+I*(-0.498016),0.300695+I*(-0.424968),0.498016+I*(-0.15495),0.575315+I*0.0882107,0.652965+I*0.343066,0.774762+I*0.707631,0.962865+I*1.3391,1.22927+I*2.54384,1.5495+I*4.98016,1.75862+I*10.13271,1.21784+I*21.47013,-2.21893+I*47.35583,-15.38094+I*108.5685,-59.55994+I*258.2382,-200.8541+I*636.0298,-645.3778+I*1618.988,-2042.009+I*4251.355,-6459.321+I*11497.03,-20587.42+I*31968.83,-66401.27+I*91265.46,-217255.6+I*267132.0}");

    check("Refine(Gamma(n), Element(n,Integers)&&n>=0)", //
        "(-1+n)!");

    check("Gamma(-1)", //
        "ComplexInfinity");
    check("Gamma(Infinity)", //
        "Infinity");
    check("Gamma(-Infinity)", //
        "Indeterminate");
    check("Gamma(I*Infinity)", //
        "0");
    check("Gamma(-I*Infinity)", //
        "0");
    check("Gamma(ComplexInfinity)", //
        "Indeterminate");

    checkNumeric("Gamma(1.5,7.5)", //
        "0.0016099632282723204");
    checkNumeric("LogGamma(1.5)", //
        "-0.1207822376352452");
    checkNumeric("Gamma(0.5+0.5*-0.5, -0.5*-0.5)", //
        "0.9293237832774184");
    check("Table(Gamma(-x+0.5*y, x*y), {x,-0.5, 0.5, 1/4}, {y,-0.5, 0.5, 1/4})", //
        "{{0.929324,1.18798,1.77245,1.60979+I*(-0.423147),1.59749+I*(-0.372071)}," //
            + "{1.62343,1.91573,3.62561,2.00338+I*(-0.886162),1.77245+I*(-0.737708)}," //
            + "{ComplexInfinity,ComplexInfinity,Infinity,7.53394,3.62561}," //
            + "{-3.54491+I*(-4.93464),-1.04856+I*(-6.70384),ComplexInfinity,2.69605,1.62343}," //
            + "{-5.44839+I*(-0.614248),-5.56253+I*(-4.27276),ComplexInfinity,2.41664,1.20262}}");
    check("Table(Gamma(-x+0.5*I*y, x+I*y), {x,-0.5, 0.5, 1/4}, {y,-0.5, 0.5, 1/4})", //
        "{{0.454825+I*1.15991,0.929691+I*1.43063,1.77245+I*(-1.68993),0.929691+I*(-1.43063),0.454825+I*(-1.15991)}," //
            + "{0.193901+I*1.01773,0.624332+I*1.42459,1.51824+I*(-2.10737),0.624332+I*(-1.42459),0.193901+I*(-1.01773)}," //
            + "{0.113061+I*0.824051,0.642244+I*1.21171,Infinity,0.642244+I*(-1.21171),0.113061+I*(-0.824051)}," //
            + "{0.12069+I*0.587019,0.604734+I*0.69309,1.20262,0.604734+I*(-0.69309),0.12069+I*(-0.587019)}," //
            + "{0.114848+I*0.359991,0.391432+I*0.335157,0.590691,0.391432+I*(-0.335157),0.114848+I*(-0.359991)}}");

    check("Gamma(-3/4, 0)", //
        "ComplexInfinity");
    check("Gamma(10, -1)", //
        "133496*E");
    check("Gamma(1/2, x)", //
        "Gamma(1/2,x)");
    check("Gamma(8)", //
        "5040");
    check("Gamma(1/2)", //
        "Sqrt(Pi)");
    checkNumeric("Gamma(1.0+I)", //
        "0.49801566811835635+I*(-0.15494982830181053)");
    checkNumeric("Gamma(2.2)", //
        "1.1018024908797128");
  }

  @Test
  public void testGammaRegularized() {
    checkNumeric("GammaRegularized({0,Sequence(),1,2},-Sqrt(2),Interval(a))", //
        "{0,Interval({E^Sqrt(2)-1/E^a,E^Sqrt(2)-1/E^a}),GammaRegularized(2,-Sqrt(2),Interval({a,a}))}");
    check("N(GammaRegularized(5, 3,{2,3,5,7}), 50)", //
        "{-0.13208373813251677697126440853762923150933999928159," //
            + "0," //
            + "0.37476995945855965484415039060643335707553920092208," //
            + "0.64227163664170072066013711492328393408012799819306}");

    check("N(GammaRegularized(2, 33/10), 50)", //
        "0.15859761982533202341609593038851663410395766708586");

    checkNumeric("N(GammaRegularized(2 + 3 I, 4 - I))", //
        "-1.1522398554329518+I*(-0.23324343668110903)");
    check("GammaRegularized(1, 1.5)", //
        "0.22313");
    check("GammaRegularized(2,  2.2)", //
        "0.35457");
    check("GammaRegularized(2,  3.3)", //
        "0.158598");
    check("GammaRegularized(2,  3.3, 3.4)", //
        "0.0117552");

    // TODO improve output Format to E^(-x)-E^(-y)
    check("GammaRegularized(1,x,y)", //
        "E^(-x)-1/E^y");
    check("GammaRegularized(-42,x,y)", //
        "0");
    // check("GammaRegularized(a,z1,z2)", "GammaRegularized(a,z1)-GammaRegularized(a,z2)");

    check("GammaRegularized(1/2, z)", //
        "Erfc(Sqrt(z))");
    check("GammaRegularized(-4, z)", //
        "0");
    check("GammaRegularized(12, 0)", //
        "1");
    check("GammaRegularized(-42, 0)", //
        "0");
    check("GammaRegularized(1, x)", //
        "E^(-x)");
  }

  @Test
  public void testHarmonicNumber() {
    // check("Table(Print(r1,i1);HarmonicNumber(r1+I*i1), {r1,-1.0,1.0},{i1,-1.0,1.0} )", //
    // "");
    checkNumeric("HarmonicNumber(-1.0)", //
        "ComplexInfinity");
    checkNumeric("N(HarmonicNumber(-1),30)", //
        "ComplexInfinity");
    checkNumeric("HarmonicNumber(-2.5)", //
        "1.2803723055467762");
    checkNumeric("HarmonicNumber(-1.0, 2.0)", //
        "ComplexInfinity");
    checkNumeric("N(HarmonicNumber(-1, 2),30)", //
        "ComplexInfinity");

    check("HarmonicNumber(Infinity,1)", //
        "Infinity");
    check("HarmonicNumber(Infinity,5)", //
        "Zeta(5)");
    checkNumeric("HarmonicNumber({-3.1415,2.987,-1,0,1},0.5)", //
        "{-0.19602750271156133+I*4.277725609252295,2.277519248535999,ComplexInfinity,0.0,1.0000000000000007}");
    checkNumeric("HarmonicNumber(-0.5,0.5)", //
        "-0.8554558653879558");
    check("D(HarmonicNumber(x),{x,4})", //
        "24/x^5+PolyGamma(4,x)");
    check("HarmonicNumber(-9223372036854775808/11,0.5)", //
        "ComplexInfinity");
    check("N(HarmonicNumber(1/17, 5), 50)", //
        "0.25327615206118707521034626118754228313433140885746");
    check("HarmonicNumber(0.33000000000000000000) ", //
        "0.44152364693736352811");

    check("n /. FindRoot(HarmonicNumber(n) == 1.5, {n, 5})", //
        "2.0");
    check("HarmonicNumber(400,{-1,-2})", //
        "{80200,21413400}");
    check("HarmonicNumber(0.8)", //
        "0.862207");
    check("HarmonicNumber(130.71)", //
        "5.45402");
    check("HarmonicNumber(0.8,3 )", //
        "0.940124");
    check("HarmonicNumber(E,1.0)", //
        "1.75002");
    check("N(HarmonicNumber(1/17,5))", //
        "0.253276");
    check("N(HarmonicNumber(27,5-I))", //
        "1.02598+I*0.0251513");
    check("HarmonicNumber(n, -1)", //
        "n/2+n^2/2");

    // Iteration limit
    check("HarmonicNumber(2147483647,2)", //
        "Hold(HarmonicNumber(2147483647,2))");
    check("HarmonicNumber(10007, 3)", //
        "Hold(HarmonicNumber(10007,3))");

    check(" HarmonicNumber(m,-2) ", //
        "m/6+m^2/2+m^3/3");
    check("Table(HarmonicNumber(m,-n), {n, 1, 5, 1})", //
        "{m/2+m^2/2,m/6+m^2/2+m^3/3,m^2/4+m^3/2+m^4/4,-m/30+m^3/3+m^4/2+m^5/5,-m^2/12+5/\n"
            + "12*m^4+m^5/2+m^6/6}");

    check("HarmonicNumber(z, -2)", //
        "z/6+z^2/2+z^3/3");
    check("HarmonicNumber(10007, -2)", //
        "334083895140");
    check("HarmonicNumber(10007, -1)", //
        "50075028");
    check("HarmonicNumber(-10, -3)", //
        "2025");
    check("HarmonicNumber(10, 3)", //
        "19164113947/16003008000");
    check("HarmonicNumber(10, -3)", //
        "3025");
    check("HarmonicNumber(-10, 3)", //
        "ComplexInfinity");

    if (Config.EXPENSIVE_JUNIT_TESTS) {
      check("HarmonicNumber(101,1009)", //
          "BigInteger bit length 206136 exceeded");
      check("HarmonicNumber(1009,101)", //
          "BigInteger bit length 201800 exceeded");
    }
    check("HarmonicNumber(10007)", //
        "Hold(HarmonicNumber(10007))");
    check("HarmonicNumber(-Infinity)", //
        "ComplexInfinity");
    check("HarmonicNumber(Infinity)", //
        "Infinity");
    check("HarmonicNumber(-42)", //
        "ComplexInfinity");
    check("HarmonicNumber(2,-3/2)", //
        "1+2*Sqrt(2)");
    check("Table(HarmonicNumber(n), {n, 8})", //
        "{1,3/2,11/6,25/12,137/60,49/20,363/140,761/280}");
    check("HarmonicNumber(4,r)", //
        "1+2^(-r)+3^(-r)+4^(-r)");
    check("HarmonicNumber(1,r)", //
        "1");
    check("HarmonicNumber(0, r)", //
        "0");
    check("HarmonicNumber(Infinity,2)", //
        "Pi^2/6");
  }

  @Test
  public void testInverseBetaRegularized() {
    check("InverseBetaRegularized(10, 12.0, 0.5)", //
        "InverseBetaRegularized(10.0,12.0,0.5)");
    check("InverseBetaRegularized(0.1, 12.0, 0.5)", //
        "0.891295");
    check("InverseBetaRegularized(0.8, 1, 2)", //
        "0.552786");
    check("Table(InverseBetaRegularized(s, 2, 3), {s, 0, 1,0.1})", //
        "{0.0,0.142559,0.212317,0.272384,0.329167,0.385728,0.4445,0.508405,0.582454,0.679539,1.0}");
    check("InverseBetaRegularized(0,42,b)", //
        "0");
    check("InverseBetaRegularized(1,47.11,b)", //
        "1");
    check("InverseBetaRegularized(z,0,a,b)", //
        "z");
    check("InverseBetaRegularized(0,z,a,b)", //
        "InverseBetaRegularized(z,a,b)");
  }

  @Test
  public void testInverseErf() {
    check("D(InverseErf(f(x),y),x)", //
        "f'(x)/E^(f(x)^2-InverseErf(f(x),y)^2)");
    check("D(InverseErf(x,f(y)),y)", //
        "1/2*E^InverseErf(x,f(y))^2*Sqrt(Pi)*f'(y)");
    check("InverseErf(Indeterminate,z)", //
        "Indeterminate");
    check("InverseErf(z,Indeterminate)", //
        "Indeterminate");
    check("InverseErf(0,0)", //
        "0");
    check("InverseErf(0,1)", //
        "Infinity");
    check("InverseErf(1,0)", //
        "1");
    check("InverseErf(0,z)", //
        "InverseErf(z)");
    check("InverseErf(Infinity,z)", //
        "InverseErfc(-z)");
    check("InverseErf(z,0)", //
        "z");


    check("InverseErf({0.5, 1.5, 2.5})", //
        "{0.476936,InverseErf(1.5),InverseErf(2.5)}");
    check("N(InverseErf(33/100), 50)", //
        "0.30133214613370582612850271815839477396582428282853");
    check("InverseErf(0.330000000000000000000000)", //
        "0.301332146133705826128502");

    check("InverseErf({-1, 0, 1})", //
        "{-Infinity,0,Infinity}");
    checkNumeric("InverseErf /@ {0.9, 1.0, 1.1}", //
        "{1.1630871536766743,Infinity,InverseErf(1.1)}");
    check("InverseErf(1)", //
        "Infinity");
    check("InverseErf(-1)", //
        "-Infinity");
    checkNumeric("InverseErf(0.6)", //
        "0.5951160814499948");
    checkNumeric("Sqrt(2)*InverseErf(0.99)", //
        "2.5758293035489004");
    checkNumeric("InverseErf(1/{2., 3., 4., 5.})", //
        "{0.47693627620446977,0.3045701941739856,0.22531205501217808,0.17914345462129166}");
    checkNumeric("InverseErf(-1/{2., 3., 4., 5.})", //
        "{-0.47693627620446977,-0.3045701941739856,-0.22531205501217808,-0.17914345462129166}");
    checkNumeric("InverseErf({-2.,-3.,3.})", //
        "{InverseErf(-2.0),InverseErf(-3.0),InverseErf(3.0)}");
  }

  @Test
  public void testInverseErfc() {
    check("N(InverseErfc(33/100), 50)", //
        "0.68880252811655645040250472890525783544948992349371");
    check("InverseErfc(0.330000000000000000000000)", //
        "0.688802528116556450402504");

    check("InverseErfc /@ {0, 1, 2}", //
        "{Infinity,0,-Infinity}");
    check("InverseErfc(0)", //
        "Infinity");
    check("InverseErfc(1)", //
        "0");
    check("InverseErfc(2)", //
        "-Infinity");
    check("InverseErfc(0.6)", //
        "0.370807");
    checkNumeric("Sqrt(2)*InverseErfc(0.99)", //
        "0.012533469508069274");
    checkNumeric("InverseErfc(1/{2., 3., 4., 5.})", //
        "{0.47693627620446977,0.6840703496566226,0.8134198475976184,0.9061938024368233}");
    checkNumeric("InverseErfc(-1/{2., 3., 4., 5.})", //
        "{InverseErfc(-0.5),InverseErfc(-0.3333333333333333),InverseErfc(-0.25),InverseErfc(-0.2)}");
  }

  @Test
  public void testInverseGammaRegularized() {
    check("InverseGammaRegularized(a, Infinity, z)", //
        "InverseGammaRegularized(a,-z)");
    check("InverseGammaRegularized(42,0)", //
        "Infinity");
    check("InverseGammaRegularized(10,1)", //
        "0");
  }

  @Test
  public void testLogGamma() {
    check("LogGamma(0.0)", //
        "Infinity");
    checkNumeric("LogGamma(-42.0)", //
        "Infinity");
    checkNumeric("LogGamma(-1.5)", //
        "0.860047015376481+I*(-6.283185307179586)");

    check("N(LogGamma(22/10), 50)", //
        "0.096947466790638776492015185854629186237721721052839");
    check("Table(LogGamma(x), {x,0.0, 8.0, 0.25})", //
        "{Infinity,1.28802,0.572365,0.203281,0.0,-0.0982718,-0.120782,-0.0844011,0.0,0.124872,0.284683,0.475215,0.693147,0.935802," //
            + "1.20097,1.48682,1.79176,2.11446,2.45374,2.80857,3.17805,3.56138,3.95781,4.36672,4.78749,5.2196,5.66256,6.11592,6.57925," //
            + "7.05219,7.53436,8.02546,8.52516}");
    checkNumeric("LogGamma(2.5 + 3*I)", //
        "-1.4709546103488411+I*2.8226156382607996");
    checkNumeric("LogGamma({2.0+ 3*I, 3+ 3.0*I, 4.0+ 3*I, 5.0+ 3*I, 6.0+ 3*I})", //
        "{-2.0928517530927335+I*2.302396543466868,-0.8103770743619652+I*3.2851902667141966,0.6348088045861172+I*4.070588430111645," //
            + "2.2442467170202174+I*4.714089538904929,4.007426979328298+I*5.254509039175513}");
    check("LogGamma(-11/2)", //
        "LogGamma(-11/2)");
    check("LogGamma(1/2)", //
        "Log(Pi)/2");
    check("LogGamma(11/2)", //
        "Log(945/32*Sqrt(Pi))");
    check("LogGamma(43/2)", //
        "Log(13113070457687988603440625/2097152*Sqrt(Pi))");
    check("LogGamma(7.7)", //
        "7.92654");
    check("LogGamma(-I*Infinity)", //
        "ComplexInfinity");
    check("LogGamma(6)", //
        "Log(120)");
    check("LogGamma(1)", //
        "0");
    check("LogGamma(0)", //
        "Infinity");
    check("LogGamma(-6)", //
        "Infinity");
  }

  @Test
  public void testLogIntegral() {
    // https://github.com/mtommila/apfloat/issues/62
    check("N(LogIntegral(1/2),50)", //
        "-0.37867104306108797672720718463656098055123404097821");
    check("N(LogIntegral(2),50)", //
        "1.0451637801174927848445888891946131365226155781512");
    // perf test
    // check("N(Table(LogIntegral(x), {x,-4, 4, 1/4}),50)", //
    // "");
    check("LogIntegral(-4.0)", //
        "-0.158346+I*4.30335");

    check("Attributes(LogIntegral)", //
        "{Listable,NumericFunction,Protected}");

    check("LogIntegral(20.0)", //
        "9.9053");
    check("LogIntegral(Infinity)", //
        "Infinity");
    check("LogIntegral(ComplexInfinity)", //
        "ComplexInfinity");
    check("Table(LogIntegral(x), {x,-4.0, 4.0, 1/4})", //
        "{-0.158346+I*4.30335,-0.129418+I*4.23625,-0.101495+I*4.16812,-0.0747069+I*4.09891,-0.0492077+I*4.02858," //
            + "-0.0251827+I*3.95708,-0.00285625+I*3.88437,0.0174962+I*3.8104,0.0355323+I*3.73515,0.0508192+I*3.65864," //
            + "0.0628003+I*3.58092,0.0707443+I*3.50217,0.0736679+I*3.42273,0.0702127+I*3.34336,0.0584548+I*3.26567," //
            + "0.0356721+I*3.19357,0.0,-0.118662,-0.378671,-0.93693,-Infinity,-0.686488,0.125065,0.645476,1.04516," //
            + "1.37776,1.66729,1.92665,2.16359,2.38314,2.58877,2.78296,2.96759}");
    check("Table(LogIntegral(x), {x, -3.0, 3.0, 0.25})", //
        "{-0.0492077+I*4.02858,-0.0251827+I*3.95708,-0.00285625+I*3.88437,0.0174962+I*3.8104,0.0355323+I*3.73515," //
            + "0.0508192+I*3.65864,0.0628003+I*3.58092,0.0707443+I*3.50217,0.0736679+I*3.42273,0.0702127+I*3.34336," //
            + "0.0584548+I*3.26567,0.0356721+I*3.19357,0.0,-0.118662,-0.378671,-0.93693,-Infinity,-0.686488,0.125065," //
            + "0.645476,1.04516,1.37776,1.66729,1.92665,2.16359}");
    check("Table(LogIntegral(x), {x,-2.0, 20.0, 2/3})", //
        "{0.0355323+I*3.73515,0.0685993+I*3.52852,0.067332+I*3.31716,0.0,-0.693308,-0.358914,1.04516,1.843,2.45309," //
            + "2.96759,3.42296,3.83761,4.22222,4.58359,4.92632,5.25372,5.56822,5.87169,6.1656,6.4511,6.72916,7.00055," //
            + "7.26593,7.52587,7.78083,8.03122,8.27742,8.51972,8.7584,8.99371,9.22587,9.45508,9.6815,9.9053}"); //
  }

  @Test
  public void testMultinomial() {
    check("Multinomial(1,2,3,ByteArray({1}))", //
        "60*Binomial(6+ByteArray[1 Bytes],ByteArray[1 Bytes])");
    check("Multinomial(2147483647,10007,-1,ByteArray({}))", //
        "{}");
    // check("Multinomial(-5,3)", //
    // "-4");
    check("Multinomial(-11,2,3,5)", //
        "2520");
    check("Multinomial(-18,2,3,5,7)", //
        "-49008960");
    check("Multinomial(-100,2,3,5)", //
        "39259781847205920");
    check("Multinomial(-3,1,2,5)", //
        "0");
    check("Multinomial(-4,2,3,5)", //
        "0");


    check("Multinomial(2, .2, 5)", //
        "34.3178");
    check("N(Multinomial(1/3, 1/7, 1/5, 1/6))", //
        "1.32595");
    check("N(Multinomial(1/3, 1/11, 1/5, 1/6), 50)", //
        "1.2787822309985889320726165068248758021178962038957");
    check("Multinomial(1 + I, .2, 4)", //
        "2.89406+I*9.10463");

    check("Multinomial(1,1,1)", //
        "6");
    check("Multinomial(1,k,1)", //
        "(1+k)*(2+k)");
    check("Multinomial(10,f(x),2,3,4)", //
        "116396280*Binomial(19+f(x),f(x))");

    check("Multinomial(0,0,0,0,0)", //
        "1");
    check("Multinomial(a,b)", //
        "Binomial(a+b,b)");
    check("Multinomial(2, 3, 4, 5)", //
        "2522520");
    check("Multinomial( )", //
        "1");
    check("Multinomial(1)", //
        "1");
    check("Multinomial(2, 3)", //
        "10");
    check("Multinomial(f(x))", //
        "1");
    check("Multinomial(f(x), g(x))", //
        "Binomial(f(x)+g(x),g(x))");
    check("Multinomial(n-k, k)", //
        "Binomial(n,-k+n)");
    check("Multinomial(k, 2)", //
        "1/2*(1+k)*(2+k)");
  }

  @Test
  public void testPochhammer() {
    check("Pochhammer(2,3)", //
        "24");

    check("Pochhammer(1.011111111111000000000000000, 8)", //
        "41552.27584908778038088829576");

    check("Pochhammer(2.4, 8.5)", //
        "2.31022*10^6");
    check("Pochhammer(0, 1285)", //
        "0");
    check("N(Pochhammer(1/3, 7),50)", //
        "505.97165066300868770004572473708276177411979881115");
    check("Pochhammer(2.0+5.0*I, 8.0*I)", //
        "2.13868*10^-6+I*(-0.0000142187)");

    // iteration limit exceeded
    check("Pochhammer(3/4,10007) // Short", //
        "15186567377613065641770402<<SHORT>>048\\\n" //
            + "475798133248972816384");

    check("Pochhammer(2-b,1)", //
        "2-b");
    check("Pochhammer({-7,-6,-5,-4,-3,-2,-1,0,1,2,3},-5)", //
        "{-1/95040,-1/55440,-1/30240,-1/15120,-1/6720,-1/2520,-1/720,-1/120,ComplexInfinity,ComplexInfinity,ComplexInfinity}");
    check("Pochhammer({-2,-1,0,1,2,3},-2)", //
        "{1/12,1/6,1/2,ComplexInfinity,ComplexInfinity,1/2}");

    check("Pochhammer(m, n) // FunctionExpand", //
        "Gamma(m+n)/Gamma(m)");
    check("Pochhammer(2.4, 8.5)", //
        "2.31022*10^6");

    // http://oeis.org/A054654
    check(
        "crow(n_) := Reverse( CoefficientList( (-1)^n*Pochhammer(-x, n), x) ); Flatten( Table(crow(n), {n, 0, 8}))", //
        "{1,1,0,1,-1,0,1,-3,2,0,1,-6,11,-6,0,1,-10,35,-50,24,0,1,-15,85,-225,274,-120,0,1,-\n"
            + "21,175,-735,1624,-1764,720,0,1,-28,322,-1960,6769,-13132,13068,-5040,0}");
    check("Pochhammer(0, 0)", //
        "1");
    check("Pochhammer(0, 42)", //
        "0");
    check("Pochhammer(0, -42)", //
        "1/1405006117752879898543142606244511569936384000000000");
    check("Pochhammer(a, -3)", //
        "1/((-3+a)*(-2+a)*(-1+a))");
    check("Pochhammer(a, -1)", //
        "1/(-1+a)");
    check("Pochhammer(b-c, -10)", //
        "1/((-10+b-c)*(-9+b-c)*(-8+b-c)*(-7+b-c)*(-6+b-c)*(-5+b-c)*(-4+b-c)*(-3+b-c)*(-2+b-c)*(-\n"
            + "1+b-c))");

    check("Pochhammer(b-c, 2)", //
        "(b-c)*(1+b-c)");
    check("Pochhammer(b-c, 3)", //
        "(b-c)*(1+b-c)*(2+b-c)");
    check("Pochhammer(c-b,42)", //
        "(-b+c)*(1-b+c)*(2-b+c)*(3-b+c)*(4-b+c)*(5-b+c)*(6-b+c)*(7-b+c)*(8-b+c)*(9-b+c)*(\n" + //
            "10-b+c)*(11-b+c)*(12-b+c)*(13-b+c)*(14-b+c)*(15-b+c)*(16-b+c)*(17-b+c)*(18-b+c)*(\n" + //
            "19-b+c)*(20-b+c)*(21-b+c)*(22-b+c)*(23-b+c)*(24-b+c)*(25-b+c)*(26-b+c)*(27-b+c)*(\n" + //
            "28-b+c)*(29-b+c)*(30-b+c)*(31-b+c)*(32-b+c)*(33-b+c)*(34-b+c)*(35-b+c)*(36-b+c)*(\n" + //
            "37-b+c)*(38-b+c)*(39-b+c)*(40-b+c)*(41-b+c)");
    check("Pochhammer(2,3)", //
        "24");

    check("Pochhammer(4, 8)", //
        "6652800");
    check("Pochhammer(10, 6)", //
        "3603600");
    check("Pochhammer(10, -6)", //
        "1/60480");
    check("Pochhammer(-10, -6)", //
        "1/5765760");
    check("Pochhammer(-10, -7)", //
        "-1/98017920");
    check("Pochhammer(-10, -12)", //
        "1/309744468633600");
    check("Pochhammer(3/2, 1/2)", //
        "2/Sqrt(Pi)");
    check("Pochhammer(-5, -3)", //
        "-1/336");
  }

  @Test
  public void testPolyGamma() {
    // https://github.com/mtommila/apfloat/issues/681
    checkNumeric("PolyGamma(1,-5003.5)", //
        "9.869404560962126");

    // switched to apfloat for this case
    // (formerly https://github.com/Hipparchus-Math/hipparchus/issues/394)
    checkNumeric("PolyGamma(-10000.5)", //
        "9.210440364617593");
    checkNumeric("PolyGamma(0, -10000.0)", //
        "ComplexInfinity");
    checkNumeric("PolyGamma(-10000.0)", //
        "ComplexInfinity");
    checkNumeric("PolyGamma(-1.0+I*0.5,-10000)", //
        "Indeterminate");
    // TODO
    check("N(PolyGamma(-2,3/2),30)", //
        "PolyGamma(-2,1.5)");
    check("N(PolyGamma(-I*1.0,0),30)", //
        "PolyGamma(I*(-1),0)");
    // TODO calculate for complex n:
    checkNumeric("PolyGamma(6+I,2.5+3*I)", //
        "PolyGamma(6.0+I*1.0,2.5+I*3.0)");

    check("N(PolyGamma(-2,0),30)", //
        "0");
    check("N(PolyGamma(-2-I*1,0),30)", //
        "0");

    check("PolyGamma(0,-42)", //
        "ComplexInfinity");
    check("PolyGamma(-1,z)", //
        "LogGamma(z)");
    check("PolyGamma(-1,0)", //
        "Infinity");
    check("PolyGamma(-1,12)", //
        "Log(39916800)");
    check("PolyGamma(-1,-7)", //
        "Infinity");
    check("PolyGamma(-1)", //
        "ComplexInfinity");
    check("PolyGamma(-1,1)", //
        "0");
    check("PolyGamma(-2)", //
        "ComplexInfinity");

    checkNumeric("PolyGamma(-2.5 + 3*I)", //
        "1.4452083452957387+I*2.3585086088019525");
    checkNumeric("PolyGamma(2.5 + 3*I)", //
        "1.2812739190662303+I*0.9798053153445595");

    checkNumeric("PolyGamma(0, 0.166667)", //
        "-6.33211506874618");
    checkNumeric("PolyGamma(0, 0.166667+1/2)", //
        "-1.3182333972336449");
    check("PolyGamma(-0.8)", //
        "-4.03904");
    // http://fungrim.org/entry/ea2482/
    check("PolyGamma(2147483647,3.1415926535897930)", //
        "6.8635973023279951*10^18039905265");

    check("N(PolyGamma(22/10), 50)", //
        "0.54429343674114503778612537088338122850774505912665");
    check("PolyGamma(2.20000000000000000000000)", //
        "0.544293436741145037786125");

    check("PolyGamma(3, 1)", //
        "Pi^4/15");
    check("PolyGamma(1, 1)", //
        "Pi^2/6");
    check("PolyGamma(100.5)", //
        "4.60517");
    check("PolyGamma(2.2)", //
        "0.544293");
    check("PolyGamma(1)", //
        "-EulerGamma");
    // http://fungrim.org/entry/ada157/
    check("PolyGamma(2)", //
        "1-EulerGamma");
    check("PolyGamma(3)", //
        "3/2-EulerGamma");

    check("PolyGamma(1,1/4)//FunctionExpand", //
        "8*Catalan+Pi^2");
    check("PolyGamma(1,3/4)//FunctionExpand", //
        "-8*Catalan+Pi^2");
    check("PolyGamma(2,5/6)//FunctionExpand", //
        "4*Sqrt(3)*Pi^3-182*Zeta(3)");
    check("PolyGamma({1,2,3,4,5})", //
        "{-EulerGamma,1-EulerGamma,3/2-EulerGamma,11/6-EulerGamma,25/12-EulerGamma}");
    check("D(PolyGamma(x),{x,n})", //
        "PolyGamma(n,x)");
  }


  @Test
  public void testSinIntegral() {
    checkNumeric(" D(SinIntegral(x), {x, 2})", //
        "Cos(x)/x-Sin(x)/x^2");
    checkNumeric("Table(D(SinIntegral(x), {x, n}), {n, 1, 4})", //
        "{Sinc(x),"//
            + "Cos(x)/x-Sin(x)/x^2,"//
            + "(-2*Cos(x))/x^2+(2*Sin(x))/x^3-Sin(x)/x,"//
            + "(6*Cos(x))/x^\n" //
            + "3-Cos(x)/x+(-6*Sin(x))/x^4+(3*Sin(x))/x^2}");

    checkNumeric("SinIntegral(-3.1)", //
        "-1.8516593076748515");
    check("SinIntegral(-3/4*I*x)", //
        "-I*SinhIntegral(3/4*x)");
    check("SinIntegral(Infinity)", //
        "Pi/2");
    check("SinIntegral(-Infinity)", //
        "-Pi/2");
    check("SinIntegral(I*Infinity)", //
        "I*Infinity");
    check("SinIntegral((-I)*Infinity)", //
        "-I*Infinity");
    check("SinIntegral(I*1/2*x)", //
        "I*SinhIntegral(x/2)");
    checkNumeric("SinIntegral(2.8)", //
        "1.8320965890790646");
    check("Table(SinIntegral(x), {x,-4.0, 4.0, 1/4})", //
        "{-1.7582,-1.80123,-1.83313,-1.85011,-1.84865,-1.82564,-1.77852,-1.70546,-1.60541,-1.47823,-1.32468,-1.14645," //
            + "-0.946083,-0.726954,-0.493107,-0.249134,0.0,0.249134,0.493107,0.726954,0.946083,1.14645,1.32468," //
            + "1.47823,1.60541,1.70546,1.77852,1.82564,1.84865,1.85011,1.83313,1.80123,1.7582}");
    check("Table(SinIntegral(x+I), {x,-4.0, 4.0, 1/4})", //
        "{-1.81528+I*(-0.231827),-1.89116+I*(-0.195138),-1.95531+I*(-0.14116),-2.00247+I*(-0.0705645),-2.02772+I*0.0152109," //
            + "-2.02661+I*0.114003,-1.99549+I*0.222995,-1.93158+I*0.338819,-1.83321+I*0.457692,-1.6999+I*0.575567," //
            + "-1.53242+I*0.688309,-1.33279+I*0.791868,-1.10422+I*0.882454,-0.851043+I*0.956708,-0.578517+I*1.01185," //
            + "-0.292658+I*1.04579,I*1.05725,0.292658+I*1.04579,0.578517+I*1.01185,0.851043+I*0.956708,1.10422+I*0.882454," //
            + "1.33279+I*0.791868,1.53242+I*0.688309,1.6999+I*0.575567,1.83321+I*0.457692,1.93158+I*0.338819,1.99549+I*0.222995," //
            + "2.02661+I*0.114003,2.02772+I*0.0152109,2.00247+I*(-0.0705645),1.95531+I*(-0.14116),1.89116+I*(-0.195138),"
            + "1.81528+I*(-0.231827)}");
  }

  @Test
  public void testSinhIntegral() {
    checkNumeric("SinhIntegral(-3.1)", //
        "-5.318897351437391");
    check("SinhIntegral(93/13*I*x)", //
        "I*SinIntegral(93/13*x)");
    check("SinhIntegral(-x)", //
        "-SinhIntegral(x)");
    check("SinhIntegral(Infinity)", //
        "Infinity");
    check("SinhIntegral(-Infinity)", //
        "-Infinity");
    check("SinhIntegral(I*Infinity)", //
        "I*1/2*Pi");
    check("SinhIntegral(-I*Infinity)", //
        "-I*1/2*Pi");
    check("SinhIntegral(I*1/2*x)", //
        "I*SinIntegral(x/2)");
    checkNumeric("SinhIntegral(2.8)", //
        "4.348076508124867");
    check("Table(SinhIntegral(x), {x,-4.0, 4.0, 1/4})", //
        "{-9.81733,-8.26122,-6.96616,-5.88341,-4.97344,-4.20414,-3.54934,-2.98767,-2.50157,-2.07657,-1.70065," //
            + "-1.36373,-1.05725,-0.773837,-0.506997,-0.25087,0.0,0.25087,0.506997,0.773837,1.05725,1.36373," //
            + "1.70065,2.07657,2.50157,2.98767,3.54934,4.20414,4.97344,5.88341,6.96616,8.26122,9.81733}");
    check("Table(SinhIntegral(x+I), {x,-4.0, 4.0, 1/4})", //
        "{-7.40401+I*6.13828,-6.29879+I*5.11278,-5.36892+I*4.27784,-4.58248+I*3.59748,-3.91346+I*3.04277," //
            + "-3.34061+I*2.59043,-2.84649+I*2.22177,-2.4168+I*1.92172,-2.03968+I*1.67824,-1.70531+I*1.48166," //
            + "-1.40546+I*1.3243,-1.13315+I*1.20006,-0.882454+I*1.10422,-0.648183+I*1.03315,-0.425752+I*0.984193," //
            + "-0.210992+I*0.955523,I*0.946083,0.210992+I*0.955523,0.425752+I*0.984193,0.648183+I*1.03315," //
            + "0.882454+I*1.10422,1.13315+I*1.20006,1.40546+I*1.3243,1.70531+I*1.48166,2.03968+I*1.67824," //
            + "2.4168+I*1.92172,2.84649+I*2.22177,3.34061+I*2.59043,3.91346+I*3.04277,4.58248+I*3.59748," //
            + "5.36892+I*4.27784,6.29879+I*5.11278,7.40401+I*6.13828}");
  }
}

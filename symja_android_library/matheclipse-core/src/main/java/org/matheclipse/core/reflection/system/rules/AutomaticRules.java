package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.ISymbol;
import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.patternmatching.Matcher;

/**
 * <p>Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.</p>
 * <p>See GIT repository at: <a href="https://github.com/axkr/symja_android_library">github.com/axkr/symja_android_library under the tools directory</a>.</p>
 */
public class AutomaticRules {
  public static void initialize() {
    IAST rules = null;
    rules = AbsRules.RULES;
    rules = ArcCoshRules.RULES;
    rules = ArcCosRules.RULES;
    rules = ArcCothRules.RULES;
    rules = ArcCotRules.RULES;
    rules = ArcCschRules.RULES;
    rules = ArcCscRules.RULES;
    rules = ArcSechRules.RULES;
    rules = ArcSecRules.RULES;
    rules = ArcSinhRules.RULES;
    rules = ArcSinRules.RULES;
    rules = ArcTanhRules.RULES;
    rules = ArcTanRules.RULES;
    rules = BesselIRules.RULES;
    rules = BesselJRules.RULES;
    rules = BesselKRules.RULES;
    rules = BesselYRules.RULES;
    rules = ConjugateRules.RULES;
    rules = CoshRules.RULES;
    rules = CosRules.RULES;
    rules = CothRules.RULES;
    rules = CotRules.RULES;
    rules = CschRules.RULES;
    rules = CscRules.RULES;
    rules = DerivativeRules.RULES;
    rules = DRules.RULES;
    rules = GammaRules.RULES;
    rules = GudermannianRules.RULES;
    rules = HurwitzLerchPhiRules.RULES;
    rules = Hypergeometric1F1Rules.RULES;
    rules = Hypergeometric2F1RegularizedRules.RULES;
    rules = Hypergeometric2F1Rules.RULES;
    rules = HypergeometricPFQRules.RULES;
    rules = HypergeometricURules.RULES;
    rules = InterquartileRangeRules.RULES;
    rules = InverseLaplaceTransformRules.RULES;
    rules = InverseZTransformRules.RULES;
    rules = JacobiSCRules.RULES;
    rules = KleinInvariantJRules.RULES;
    rules = LaplaceTransformRules.RULES;
    rules = LimitRules.RULES;
    rules = LogRules.RULES;
    rules = MatrixDRules.RULES;
    rules = PolyGammaRules.RULES;
    rules = PolyLogRules.RULES;
    rules = PowerRules.RULES;
    rules = ProductLogRules.RULES;
    rules = QuantileRules.RULES;
    rules = RGBColorRules.RULES;
    rules = SechRules.RULES;
    rules = SecRules.RULES;
    rules = SincRules.RULES;
    rules = SinhRules.RULES;
    rules = SinRules.RULES;
    rules = SphericalBesselJRules.RULES;
    rules = SphericalBesselYRules.RULES;
    rules = SphericalHarmonicYRules.RULES;
    rules = StandardDeviationRules.RULES;
    rules = StieltjesGammaRules.RULES;
    rules = StruveHRules.RULES;
    rules = StruveLRules.RULES;
    rules = TanhRules.RULES;
    rules = TanRules.RULES;
    rules = WhittakerMRules.RULES;
    rules = WhittakerWRules.RULES;
    rules = ZTransformRules.RULES;
  }
}

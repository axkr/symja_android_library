package org.matheclipse.core.system;

import org.junit.Test;

public class JacobiTestCase extends ExprEvaluatorTestCase {

  @Test
  public void testJacobiAmplitude() {
    check("JacobiAmplitude(-z, m)", //
        "-JacobiAmplitude(z,m)");
    check("JacobiAmplitude(4.0, 2/3)", //
        "3.0837");
    check("JacobiAmplitude(0.2+0.1*I, 0.2*I)", //
        "0.200364+I*0.0999307");
    check("JacobiAmplitude(Pi/3, 0.2)", //
        "1.01656");
    check(
        "{JacobiAmplitude(z,0), JacobiAmplitude(z,1),JacobiAmplitude(0,m), JacobiAmplitude(EllipticK(m),m)}", //
        "{z,-Pi/2+2*ArcTan(E^z),0,Pi/2}");
    check("{JacobiAmplitude(Infinity,0), JacobiAmplitude(Infinity,1) }", //
        "{Infinity,Pi/2}");
    check("{JacobiAmplitude(z,0), JacobiAmplitude(z,1)}", //
        "{z,-Pi/2+2*ArcTan(E^z)}");
    check("JacobiAmplitude({a,b},c)", //
        "{JacobiAmplitude(a,c),JacobiAmplitude(b,c)}");
    check("Table(JacobiAmplitude(x, 2/3), {x,-4.0, 4.0, 1/4})", //
        "{-3.0837,-2.83685,-2.60166,-2.38451,-2.18786,-2.01066,-1.8494,-1.69911,-1.55408,-1.40835,-1.256,-1.09146,-0.909994,-0.708571,-0.486877,-0.248289,0.0,0.248289,0.486877,0.708571,0.909994,1.09146,1.256,1.40835,1.55408,1.69911,1.8494,2.01066,2.18786,2.38451,2.60166,2.83685,3.0837}");
    // TODO https://github.com/Hipparchus-Math/hipparchus/issues/75
    // check("Table(JacobiAmplitude(x, 4.0), {x,-4.0, 4.0, 1/4})", //
    // "{-0.484111+I*7.90368*10^-13,-0.344254+I*1.92379*10^-12,-0.127094+I*2.57994*10^-12,0.120312+I*2.59237*10^-12,0.339059+I*2.03570*10^-12,0.481513+I*1.18550*10^-12,0.522889+I*2.95208*10^-13,0.457272+I*(-4.88054*10^-13),0.294331+I*(-1.06004*10^-12),0.0640731+I*(-1.32339*10^-12),-0.181535+I*(-1.24989*10^-12),-0.384344+I*(-9.50573*10^-13),-0.502307+I*(-5.93081*10^-13),-0.516139+I*(-2.93543*10^-13),-0.423899+I*(-9.92539*10^-14),-0.239834+I*(-1.35447*10^-14),0.0,0.239834+I*1.36557*10^-14,0.423899+I*9.94760*10^-14,0.516139+I*2.93543*10^-13,0.502307+I*5.93081*10^-13,0.384344+I*9.50684*10^-13,0.181535+I*1.24978*10^-12,-0.0640731+I*1.32327*10^-12,-0.294331+I*1.06037*10^-12,-0.457272+I*4.87943*10^-13,-0.522889+I*(-2.95319*10^-13),-0.481513+I*(-1.18550*10^-12),-0.339059+I*(-2.03570*10^-12),-0.120312+I*(-2.59237*10^-12),0.127094+I*(-2.58016*10^-12),0.344254+I*(-1.92379*10^-12),0.484111+I*(-7.90479*10^-13)}");

  }

  @Test
  public void testInverseJacobiCD() {

    check("InverseJacobiCD(0.3,0.5)", //
        "1.54702");
    check("JacobiCD(1.54702,0.5)", //
        "0.3");
    check("InverseJacobiCD(0.2 + I, 0.1 - 0.3*I)", //
        "1.49215+I*(-1.01835)");

    check("InverseJacobiCD(Pi,0.3)", //
        "1.08216+I*(-2.07536)");
    // check("InverseJacobiCD(3.0,1/2)", //
    // "-0.867403");
    // check("InverseJacobiCD(2.0,1/3)", //
    // "-0.26196");
    // check("InverseJacobiCD(10.0,1/3)", //
    // "-0.945268");
    // check("InverseJacobiCD(z, 0)", //
    // "Cos(z)");
    // check("InverseJacobiCD(0,z)", //
    // "1");
    // check("InverseJacobiCD(-5/4, 1)", //
    // "1");
    check("Table(InverseJacobiCD(x, 1/3), {x,-10.0, 10, 1/4})", //
        "{1.90829+I*(-2.02896),1.91283+I*(-2.02896),1.91761+I*(-2.02896),1.92265+I*(-2.02896),1.92798+I*(-2.02896),1.93362+I*(-2.02896),"
            + "1.9396+I*(-2.02896),1.94596+I*(-2.02896),1.95273+I*(-2.02896),1.95995+I*(-2.02896),1.96766+I*(-2.02896),1.97593+I*(-2.02896),"
            + "1.98482+I*(-2.02896),1.99439+I*(-2.02896),2.00473+I*(-2.02896),2.01595+I*(-2.02896),2.02815+I*(-2.02896),2.04148+I*(-2.02896),"
            + "2.0561+I*(-2.02896),2.07223+I*(-2.02896),2.0901+I*(-2.02896),2.11003+I*(-2.02896),2.13241+I*(-2.02896),2.15775+I*(-2.02896),"
            + "2.18668+I*(-2.02896),2.2201+I*(-2.02896),2.2592+I*(-2.02896),2.30567+I*(-2.02896),2.36206+I*(-2.02896),2.43234+I*(-2.02896),"
            + "2.5233+I*(-2.02896),2.64815+I*(-2.02896),2.83969+I*(-2.02896),3.29257+I*(-2.02896),3.46783+I*(-1.33676),3.46783+I*(-0.891899),"
            + "3.46783,2.61425,2.26537,1.98749,1.73392,1.48034,1.20247,0.853587,0.0,I*(-0.891899),I*(-1.33676),0.175266+I*(-2.02896),"
            + "0.628145+I*(-2.02896),0.819683+I*(-2.02896),0.944538+I*(-2.02896),1.0355+I*(-2.02896),1.10577+I*(-2.02896),1.16216+I*(-2.02896),"
            + "1.20864+I*(-2.02896),1.24773+I*(-2.02896),1.28115+I*(-2.02896),1.31009+I*(-2.02896),1.33542+I*(-2.02896),1.3578+I*(-2.02896),"
            + "1.37773+I*(-2.02896),1.39561+I*(-2.02896),1.41173+I*(-2.02896),1.42635+I*(-2.02896),1.43969+I*(-2.02896),1.45189+I*(-2.02896),"
            + "1.4631+I*(-2.02896),1.47345+I*(-2.02896),1.48302+I*(-2.02896),1.4919+I*(-2.02896),1.50017+I*(-2.02896),1.50789+I*(-2.02896),"
            + "1.51511+I*(-2.02896),1.52187+I*(-2.02896),1.52823+I*(-2.02896),1.53421+I*(-2.02896),1.53986+I*(-2.02896),1.54519+I*(-2.02896),"
            + "1.55023+I*(-2.02896),1.55501+I*(-2.02896),1.55954+I*(-2.02896)}"); //
  }

  @Test
  public void testJacobiCD() {
    check("JacobiCD(3.14,0.3)", //
        "-0.970918");
    check("JacobiCD(3.0,1/2)", //
        "-0.867403");
    check("JacobiCD(2.0,1/3)", //
        "-0.26196");
    check("JacobiCD(10.0,1/3)", //
        "-0.945268");
    check("JacobiCD(z, 0)", //
        "Cos(z)");
    check("JacobiCD(0,z)", //
        "1");
    check("JacobiCD(-5/4, 1)", //
        "1");
    check("Table(JacobiCD(x, 1/3), {x,-10.0, 10, 1/4})", //
        "{-0.945268,-0.854814,-0.719348,-0.539887,-0.322584,-0.0803002,0.168507,0.403769,0.608694,0.772849,0.892191," //
            + "0.966891,0.99862,0.988487,0.936112,0.839921,0.698655,0.513846,0.292465,0.0482244,-0.199942,-0.432125,"
            + "-0.632242,-0.790743,-0.904274,-0.973347,-0.999655,-0.984142,-0.92623,-0.824279,-0.677234,-0.487189,"
            + "-0.26196,-0.0160822,0.231106,0.459941,0.655093,0.807886,0.915619,0.979096,1.0,0.979096,0.915619,0.807886,"
            + "0.655093,0.459941,0.231106,-0.0160822,-0.26196,-0.487189,-0.677234,-0.824279,-0.92623,-0.984142,-0.999655,"
            + "-0.973347,-0.904274,-0.790743,-0.632242,-0.432125,-0.199942,0.0482244,0.292465,0.513846,0.698655,0.839921,"
            + "0.936112,0.988487,0.99862,0.966891,0.892191,0.772849,0.608694,0.403769,0.168507,-0.0803002,-0.322584,"
            + "-0.539887,-0.719348,-0.854814,-0.945268}"); //
  }

  @Test
  public void testUInverseJacobiCN() {
    // https://github.com/Hipparchus-Math/hipparchus/issues/189
    // final FieldJacobiElliptic<Complex> je = JacobiEllipticBuilder.build(new Complex(0.3));
    // System.out.println(je.arccn(new Complex(2.5)));
    check("InverseJacobiCN(2.5,0.3)", //
        "I*(-1.3652)");
    check("JacobiCN(-I*1.3652,0.3)", //
        "2.49998");
    check("InverseJacobiCN(10.0,1/3)", //
        "I*(-1.85604)");
    check("InverseJacobiCN(2.0,1/3)", //
        "I*(-1.1866)");
    check("InverseJacobiCN(z, 0)", //
        "ArcCos(z)");
    check("InverseJacobiCN(0,z)", //
        "EllipticK(z)");
    check("InverseJacobiCN(-5/4, 1)", //
        "ArcSech(-5/4)");
    check("InverseJacobiCN({a,b},m)", //
        "{InverseJacobiCN(a,m),InverseJacobiCN(b,m)}");
    check("InverseJacobiCN(2.5 + I, 1 - I)", //
        "0.302156+I*(-1.10394)");
    // check("Table(InverseJacobiCN(x, 1/3), {x,-10.0, 10, 1/4})", //
    // " "); //
  }

  @Test
  public void testJacobiCN() {
    check("JacobiCN(2.5,0.3)", //
        "-0.626032");
    check("JacobiCN(10.0,1/3)", //
        "-0.92107");
    check("JacobiCN(2.0,1/3)", //
        "-0.216378");
    check("JacobiCN(z, 0)", //
        "Cos(z)");
    check("JacobiCN(0,z)", //
        "1");
    check("JacobiCN(-5/4, 1)", //
        "Sech(5/4)");
    check("JacobiCN({a,b},m)", //
        "{JacobiCN(a,m),JacobiCN(b,m)}");
    check("JacobiCN(2.5 + I, 1 - I)", //
        "1.21224+I*0.0342293");
    check("Table(JacobiCN(x, 1/3), {x,-10.0, 10, 1/4})", //
        "{-0.92107,-0.802493,-0.645663,-0.463929,-0.268079,-0.0656354,0.138241,0.339016,0.530857,0.705115," //
            + "0.8499,0.951524,0.997932,0.982878,0.908441,0.784163,0.623417,0.439332,0.242275,0.0393903,-0.16435," //
            + "-0.36435,-0.554484,-0.725677,-0.865683,-0.960795,-0.999483,-0.976491,-0.894982,-0.765231,-0.600788," //
            + "-0.414525,-0.216378,-0.0131316,0.1904,0.389525,0.577802,0.745726,0.88072,0.969124," //
            + "1.0,0.969124," //
            + "0.88072,0.745726,0.577802,0.389525,0.1904,-0.0131316,-0.216378,-0.414525,-0.600788,-0.765231,-0.894982," //
            + "-0.976491,-0.999483,-0.960795,-0.865683,-0.725677,-0.554484,-0.36435,-0.16435,0.0393903,0.242275," //
            + "0.439332,0.623417,0.784163,0.908441,0.982878,0.997932,0.951524,0.8499," //
            + "0.705115,0.530857,0.339016,0.138241,-0.0656354,-0.268079,-0.463929,-0.645663,-0.802493,-0.92107}"); //
  }

  @Test
  public void testInverseJacobiDN() {
    // https://github.com/Hipparchus-Math/hipparchus/issues/189
    // FieldJacobiElliptic<Complex> je = JacobiEllipticBuilder.build(new Complex(0.7));
    // System.out.println(je.arcdn(new Complex(0.3)));
    // FieldJacobiElliptic<Complex> je = JacobiEllipticBuilder.build(new Complex(0.3));
    // System.out.println(je.arcdn(new Complex(10.0)));
    check("InverseJacobiDN(0.3,0.7)", //
        "2.07536+I*(-1.12475)");
    check("JacobiDN(2.07536-I*(1.12475),0.7)", //
        "0.299999+I*1.37059*10^-6");
    check("InverseJacobiDN(4.0,2/3)", //
        "I*(-1.48034)");
    // check("InverseJacobiDN(10.0,1/3)", //
    // "3.46783+I*1.92868");
    check("InverseJacobiDN(-5/4, 1)", //
        "ArcSech(-5/4)");
    check("InverseJacobiDN({a,b},m)", //
        "{InverseJacobiDN(a,m),InverseJacobiDN(b,m)}");
    // check("InverseJacobiDN(2.5 - I, 1 - I)", //
    // "0.146227-I*1.081");
    // check("Table(InverseJacobiDN(x, 1/3), {x,-10.0, 10, 1/4})", //
    // " ");
  }

  @Test
  public void testJacobiDN() {
    check("JacobiDN(4.0,2/3)", //
        "0.998883");
    check("JacobiDN(10.0,1/3)", //
        "0.974401");
    check("JacobiDN(z, 0)", //
        "1");
    check("JacobiDN(0,z)", //
        "1");
    check("JacobiDN(-5/4, 1)", //
        "Sech(5/4)");
    check("JacobiDN({a,b},m)", //
        "{JacobiDN(a,m),JacobiDN(b,m)}");
    check("JacobiDN(2.5 - I, 1 - I)", //
        "0.999167+I*0.217359");
    check("Table(JacobiDN(x, 1/3), {x,-10.0, 10, 1/4})", //
        "{0.974401,0.938793,0.897567,0.859308,0.831037,0.817375,0.820388,0.839629,0.872126,0.912357,0.952598,0.984107," //
            + "0.999311,0.994326,0.970441,0.933615,0.892309,0.854988,0.828391,0.816813,0.821992,0.843159,0.877013,0.917716," //
            + "0.957324,0.987105,0.999828,0.992225,0.966263,0.928364,0.88712,0.850849,0.825998,0.816532,0.823863,0.846902," //
            + "0.882016,0.923058,0.961885,0.989815," //
            + "1.0," //
            + "0.989815,0.961885,0.923058,0.882016,0.846902,0.823863,0.816532," //
            + "0.825998,0.850849,0.88712,0.928364,0.966263,0.992225,0.999828,0.987105,0.957324,0.917716,0.877013,0.843159," //
            + "0.821992,0.816813,0.828391,0.854988,0.892309,0.933615,0.970441,0.994326,0.999311,0.984107,0.952598,0.912357," //
            + "0.872126,0.839629,0.820388,0.817375,0.831037,0.859308,0.897567,0.938793,0.974401}");
  }

  @Test
  public void testJacobiSC() {
    check("JacobiSC(Pi/3,0.333333)", //
        "1.54453");
    check("JacobiSC(0.2,0.5)", //
        "0.202022");
    check("JacobiSC(10.0,1/3)", //
        "-0.422766");
    check("JacobiSC(5.2 - 2.5*I, 0.3 + I)", //
        "-0.246094+I*0.742022");
    check("f(1/2*I*m_):={m}", //
        "");
    check("f(1/2*I*x)", //
        "{x}");
    check("JacobiSC((I*EllipticK(1 - m))/2, m)", //
        "I/Sqrt(1+Sqrt(m))");
    check("JacobiSC(z,0)", //
        "Tan(z)");
    check("JacobiSC(z,1)", //
        "Sinh(z)");
    check("JacobiSC(0,m)", //
        "0");
  }

  @Test
  public void testJacobiSD() {
    check("JacobiSD(2.5,0.5)", //
        "1.14653");
    check("JacobiSD(2.0,1/3)", //
        "1.18198");
    check("JacobiSD(10.0,1/3)", //
        "0.399627");
    check("JacobiSD(z, 0)", //
        "Sin(z)");
    check("JacobiSD(0,z)", //
        "0");
    check("JacobiSD(-5/4, 1)", //
        "-Sinh(5/4)");
    check("JacobiSD({a,b},m)", //
        "{JacobiSD(a,m),JacobiSD(b,m)}");
    // check(
    // "JacobiSD(2.5 + I, 1 - I)", //
    // "-0.0603969+I*0.687023");
    check("Table(JacobiSD(x, 1/3), {x,-10.0, 10, 1/4})", //
        "{-0.399627,-0.635563,-0.850769,-1.03091,-1.15927,-1.22079,-1.20723,-1.12047,-0.971719,-0.77721,-0.553166,-0.312542," //
            + "-0.0643176,0.185307,0.430745,0.664679,0.876254,1.05069,1.17119,1.22332,1.20001,1.10449,0.948896,0.749726,0.522909,"
            + "0.28088,0.0321644,-0.217249,-0.461678,-0.69343,-0.901127,-1.06957,-1.18198,-1.22459,-1.19159,-1.08751,-0.925354,"
            + "-0.721789,-0.492406,-0.249111,0.0,0.249111,0.492406,0.721789,0.925354,1.08751,1.19159,1.22459,1.18198,1.06957,"
            + "0.901127,0.69343,0.461678,0.217249,-0.0321644,-0.28088,-0.522909,-0.749726,-0.948896,-1.10449,-1.20001,-1.22332,"
            + "-1.17119,-1.05069,-0.876254,-0.664679,-0.430745,-0.185307,0.0643176,0.312542,0.553166,0.77721,0.971719,1.12047,1.20723,"
            + "1.22079,1.15927,1.03091,0.850769,0.635563,0.399627}");
  }

  @Test
  public void testJacobiSN() {
    check("JacobiSN(2.5,0.5)", //
        "0.890615");
    check("JacobiSN(10.0,1/3)", //
        "0.389397");
    check("JacobiSN(z, 0)", //
        "Sin(z)");
    check("JacobiSN(0,z)", //
        "0");
    check("JacobiSN(-5/4, 1)", //
        "-Tanh(5/4)");
    check("JacobiSN({a,b},m)", //
        "{JacobiSN(a,m),JacobiSN(b,m)}");
    check("JacobiSN(2.5 + I, 1 - I)", //
        "-0.0603969+I*0.687023");
    check("Table(JacobiSN(x, 1/3), {x,-10.0, 10, 1/4})", //
        "{-0.389397,-0.596662,-0.763622,-0.885872,-0.963397,-0.997844,-0.990399,-0.940781,-0.847461,-0.709093,-0.526945," //
            + "-0.307575,-0.0642733,0.184256,0.418013,0.620554,0.78189,0.898325,0.970208,0.999224,0.986402,0.931262,0.832194," //
            + "0.688035,0.500593,0.277258,0.0321588,-0.21556,-0.446102,-0.643756,-0.799408,-0.910038,-0.97631,-0.999914," //
            + "-0.981707,-0.921016,-0.816177,-0.666253,-0.473638,-0.246574," //
            + "0.0," //
            + "0.246574,0.473638,0.666253,0.816177,0.921016," //
            + "0.981707,0.999914,0.97631,0.910038,0.799408,0.643756,0.446102,0.21556,-0.0321588,-0.277258,-0.500593,-0.688035," //
            + "-0.832194,-0.931262,-0.986402,-0.999224,-0.970208,-0.898325,-0.78189,-0.620554,-0.418013,-0.184256,0.0642733," //
            + "0.307575,0.526945,0.709093,0.847461,0.940781,0.990399,0.997844,0.963397,0.885872,0.763622,0.596662,0.389397}");
  }

  @Test
  public void testJacobiZeta() {
    // check("JacobiZeta(2,0.5)", //
    // "-0.117772");

    check("JacobiZeta(z, 0)", //
        "0");
    check("JacobiZeta(-5/4, 1)", //
        "-Sin(5/4)");
    check("JacobiZeta(0, m)", //
        "0");
    check("JacobiZeta(Pi/2, m)", //
        "0");
    check("JacobiZeta(z, Infinity)", //
        "ComplexInfinity");
    check("JacobiZeta(z, -Infinity)", //
        "ComplexInfinity");
  }


}

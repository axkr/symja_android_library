package org.matheclipse.io.system;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.matheclipse.core.expression.AbstractFractionSym.valueOf;
import static org.matheclipse.core.expression.AbstractFractionSym.valueOfConvergent;
import static org.matheclipse.core.expression.AbstractFractionSym.valueOfExact;
import static org.matheclipse.core.expression.AbstractFractionSym.valueOfExactNice;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.DoubleSupplier;
import java.util.function.IntSupplier;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import org.hipparchus.fraction.BigFraction;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.matheclipse.core.eval.exception.ArgumentTypeException;
import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.core.interfaces.IFraction;

/**
 * Tests for the Java port of the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi - rule-based
 * integrator</a>.
 */
class FractionTestCase {

  @Test
  void testCTor() {
    assertEquals("1", valueOf(Integer.MIN_VALUE, Integer.MIN_VALUE));

    assertEquals("1", valueOf(Integer.MAX_VALUE, Integer.MAX_VALUE));

    assertEquals("-2147483647/2147483648", valueOf(Integer.MAX_VALUE, Integer.MIN_VALUE));

    assertEquals("-2147483648/2147483647", valueOf(Integer.MIN_VALUE, Integer.MAX_VALUE));

    assertEquals("1", valueOf(Long.MIN_VALUE, Long.MIN_VALUE));

    assertEquals("1", valueOf(Long.MAX_VALUE, Long.MAX_VALUE));

    assertEquals("-9223372036854775807/9223372036854775808",
        valueOf(Long.MAX_VALUE, Long.MIN_VALUE));

    assertEquals("-9223372036854775808/9223372036854775807",
        valueOf(Long.MIN_VALUE, Long.MAX_VALUE));

    assertEquals("1", valueOf(Integer.MIN_VALUE - 1L, Integer.MIN_VALUE - 1L));

    assertEquals("1", valueOf(Integer.MAX_VALUE + 1L, Integer.MAX_VALUE + 1L));

    assertEquals("-2147483648/2147483649", valueOf(Integer.MAX_VALUE + 1L, Integer.MIN_VALUE - 1L));

    assertEquals("-2147483649/2147483648", valueOf(Integer.MIN_VALUE - 1L, Integer.MAX_VALUE + 1L));
  }

  @Test
  void testCTor0() {
    assertEquals("0", valueOf(0, Integer.MIN_VALUE));

    assertThrows(ArgumentTypeException.class, () -> valueOf(Integer.MAX_VALUE, 0));

    assertThrows(ArgumentTypeException.class, () -> valueOf(Integer.MIN_VALUE, 0));

    assertEquals("0", valueOf(0, Integer.MAX_VALUE));

    // Long

    assertEquals("0", valueOf(0, Long.MIN_VALUE));

    assertThrows(ArgumentTypeException.class, () -> valueOf(Long.MAX_VALUE, 0));

    assertThrows(ArgumentTypeException.class, () -> valueOf(Long.MIN_VALUE, 0));

    assertEquals("0", valueOf(0, Long.MAX_VALUE));
  }

  @Test
  void testValueOfConvergent() {
    assertEquals("1", valueOfConvergent(1.0));
    assertEquals("0", valueOfConvergent(0.0));
    assertEquals("8", valueOfConvergent(8.0));
    assertEquals("43", valueOfConvergent(43.0));
    assertEquals("10", valueOfConvergent(10.0));
    assertEquals("1000", valueOfConvergent(1000.0));

    assertEquals("1/10", valueOfConvergent(0.1));
    assertEquals("1/5", valueOfConvergent(0.2));
    assertEquals("3/10", valueOfConvergent(0.3));
    assertEquals("2/5", valueOfConvergent(0.4));
    assertEquals("1/2", valueOfConvergent(0.5));
    assertEquals("3/5", valueOfConvergent(0.6));
    assertEquals("7/10", valueOfConvergent(0.7));
    assertEquals("4/5", valueOfConvergent(0.8));
    assertEquals("9/10", valueOfConvergent(0.9));

    assertEquals("1/10", valueOfConvergent(0.1));
    assertEquals("1/100", valueOfConvergent(0.01));
    assertEquals("1/1000", valueOfConvergent(0.001));
    assertEquals("1/10000", valueOfConvergent(0.0001));
    assertEquals("0", valueOfConvergent(0.00001)); // rounded to zero

    assertEquals("3/4", valueOfConvergent(0.75));
    assertEquals("11/5", valueOfConvergent(2.2));

    assertEquals("1943/4", valueOfConvergent(485.75));

    assertEquals("245850922/78256779", valueOfConvergent(Math.PI));

    assertThrows(NoSuchElementException.class, () -> valueOfConvergent(1.1859405905877545));
    assertThrows(NoSuchElementException.class, () -> valueOfConvergent(1.6265889544859224));

    assertEquals("0", valueOfConvergent(4.547476426840269E-13));
    assertEquals("0", valueOfConvergent(8.147473162667989E-47));
    assertEquals("1", valueOfConvergent(0.9999999976191776));
    assertEquals("2", valueOfConvergent(1.9999992626312268));

    assertThrows(NoSuchElementException.class, () -> valueOfConvergent(7.03791863104313E29));
    assertThrows(NoSuchElementException.class, () -> valueOfConvergent(4.144353439643559E85));
    assertThrows(NoSuchElementException.class, () -> valueOfConvergent(8.365327199922554E240));
  }

  @Test
  void testValueOfExact_standardValues() {

    assertExactSameValue("0", 0.0);
    assertExactSameValue("1", 1.0);
    assertExactSameValue("5", 5.0);
    assertExactSameValue("10", 10.0);
    assertExactSameValue("43", 43.0);
    assertExactSameValue("500", 500.0);
    assertExactSameValue("1000", 1000.0);

    assertExactSameValue("-7", -7.0);
    assertExactSameValue("-10", -10.0);
    assertExactSameValue("-500", -500.0);

    assertExactSameValue("3602879701896397/36028797018963968", 0.1);
    assertExactSameValue("1152921504606847/1152921504606846976", 0.001);
    assertExactSameValue("4951760157141521/4951760157141521099596496896", 0.1E-11);
    assertExactSameValue("6189700196426901/618970019642690137449562112", 0.1E-10);

    assertExactSameValue("3602879701896397/36028797018963968", 0.1);
    assertExactSameValue("3602879701896397/18014398509481984", 0.2);
    assertExactSameValue("5404319552844595/18014398509481984", 0.3);
    assertExactSameValue("3602879701896397/9007199254740992", 0.4);
    assertExactSameValue("1/2", 0.5);
    assertExactSameValue("5404319552844595/9007199254740992", 0.6);
    assertExactSameValue("3152519739159347/4503599627370496", 0.7);
    assertExactSameValue("3602879701896397/4503599627370496", 0.8);
    assertExactSameValue("8106479329266893/9007199254740992", 0.9);

    assertExactSameValue("3602879701896397/36028797018963968", 0.1);
    assertExactSameValue("5764607523034235/576460752303423488", 0.01);
    assertExactSameValue("1152921504606847/1152921504606846976", 0.001);
    assertExactSameValue("7378697629483821/73786976294838206464", 0.0001);
    assertExactSameValue("5902958103587057/590295810358705651712", 0.00001);

    assertExactSameValue("3/4", 0.75);
    assertExactSameValue("2476979795053773/1125899906842624", 2.2);
    assertExactSameValue("1943/4", 485.75);

    assertExactSameValue("884279719003555/281474976710656", Math.PI);
    assertExactSameValue("6121026514868073/2251799813685248", Math.E);
    assertExactSameValue("1/(2251799813685248*2^1023)", Double.MIN_VALUE);
    assertExactSameValue(
        "1/44942328371557897693232629769725618340449424473557664318357520289433168951375240783177119330601884005280028469967848339414697442203604155623211857659868531094441973356216371319075554900311523529863270738021251442209537670585615720368478277635206809290837627671146574559986811484619929076208839082406056034304",
        Double.MIN_NORMAL);
    assertExactSameValue(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368",
        Double.MAX_VALUE);

    assertExactSameValue("8411520910826421/649037107316853453566312041152512", 1.296E-17);
    assertExactSameValue(
        "3410816244736653/59285549689505892056868344324448208820874232148807968788202283012051522375647232",
        5.7532E-65);

    assertExactSameValue("1234563535345345280", 1234563535345345345.0);
    assertExactSameValue(
        "83798521235879822028356182861654024205270494733682569296620682227432861575418347644871348302736497360783637195649965345971993786906672903158981447511433390895291149953723670686446060864887183518790166143733459932436265955202321651037914521403392",
        83798521.23587982125E237);


    assertExactSameValue("5341001601854557/4503599627370496", 1.1859405905877545);
    assertExactSameValue("7325505409307765/4503599627370496", 1.6265889544859224);
  }

  @Test
  void testValueOfExact_difficultValues() {

    assertExactSameValue("5341001601854557/4503599627370496", 1.1859405905877545);
    assertExactSameValue("7325505409307765/4503599627370496", 1.6265889544859224);
    assertExactSameValue("703791863104313034795615518720", 7.03791863104313E29);
    assertExactSameValue("4503599616648225/4503599627370496", 0.9999999976191776);
    assertExactSameValue("2251798983481815/1125899906842624", 1.9999992626312268);
    assertExactSameValue("2251801429921417/562949953421312", 4.000002871012173);
    assertExactSameValue(
        "8379190137388997/102844034832575377634685573909834406561420991602098741459288064",
        8.147473162667989E-47);

    assertExactSameValue(
        "291400324666827532628471421352316956143162692757059510791380840748004719770009075712",
        2.9140032466682753E83);
    assertExactSameValue(
        "41443534396435588611213052456670629384928442103203783116298919828494368341312648773632",
        4.144353439643559E85);
    assertExactSameValue(
        "985153538497718977235437755145986803311038901286400075286521512009180556366973370611068340109123516692728643584",
        9.85153538497719E110);
    assertExactSameValue(
        "4350876748659000944221005379209253739082585763879021258742583359676747581076488783667520209060856660141894107951996867689046055585151431741856395409848075750151515799728102908640129712128",
        4.350876748659001E186);
    assertExactSameValue(
        "7050202128713718277140029001626075072999156878688425956682490896903132173623182401830493169269577517574325246973255426291693933027955148400101585798447110823609912672012864462277089572385199268823040",
        7.050202128713718E198);
    assertExactSameValue(
        "8365327199922553523412142632386866005829989115082364265187442262457444899190991167760856400050282180955268244806847868694420889116879412179164543828412908728421710223689854773971619786645931722628866130880103557100913478166634542534393593856",
        8.365327199922554E240);
    assertExactSameValue(
        "83798521235879822028356182861654024205270494733682569296620682227432861575418347644871348302736497360783637195649965345971993786906672903158981447511433390895291149953723670686446060864887183518790166143733459932436265955202321651037914521403392",
        8.379852123587982E244);
    assertExactSameValue(
        "90801234621369023364912830817432388852694912650892754335686797738450782641769315666935443151036157212669309976667206970904787066158640755837610165050001849505103748321928536360065795340122962138649829790283022529146168016012205124678824713897311814239491649961984",
        9.080123462136902E262);
    assertExactSameValue(
        "354110377190812206919458956493127785529281287772524596418646100889962797727875140364302960532921039823494661363121902917238398549544253618094261077811575035910369639176904617504820412377956286054596183700988488459255342004439584599056070781291317662708996744593712848376465859325052827205632",
        3.541103771908122E290);
    assertExactSameValue(
        "45683984243838242571673140924294031038124325552461097077273738770428811948344937456377143549620615403178273304952863226184634975640616455375404598732456063183903419199759629627067696258026231118654700769629033120434813011977881090805650878364248140744294057736290627325020263326903346027506402741983379456",
        4.568398424383824E304);

    assertExactSameValue("4503602517193587/9903520314283042199192993792", 4.547476426840269E-13);
    assertExactSameValue("3377699259328409/730750818665451459101842416358141509827966271488",
        4.62223123539841E-33);
    assertExactSameValue(
        "2251801156815423/15914343565113172548972231940698266883214596825515126958094847260581103904401068017057792",
        1.414950700041274E-73);
    assertExactSameValue(
        "4503599632874391/2113178124542660985409359139666066426075389304144486088511842836106695610226899437897669023550628751578697579973028514715529390238010742149002155913851758307633546735996020336674926070705705764212096931632844753616592113171006246955353587595068145905958154323590951993344",
        2.131197356516773E-255);
    assertExactSameValue("5224396607931767/4503599627370496*1/2^992", 2.771536903091114E-299);
    assertExactSameValue("4000008001032099/2251799813685248*1/2^997", 1.3262500221902385E-300);
    assertExactSameValue("1858597777448391/2251799813685248*1/2^1023", 9.182693112741447E-309);

    assertExactSameValue("7517480700937777/4503599627370496*1/2^985", 5.104659969936841E-297);
    assertExactSameValue("5929084170570081/4503599627370496*1/2^973", 1.6490812741030425E-293);
  }

  @Test
  void testValueOfExact_randomValues() {
    getRandomStream().forEach(value -> {
      assertExactSame(value, valueOfExact(value));
    });
  }

  private static void assertExactSameValue(String expectedFraction, double value) {
    IExpr expression = valueOfExact(value);
    assertExactSame(value, expression);
    assertEquals(expectedFraction, expression);
  }

  @Test
  void testValueOfExactNice_standardValues() {

    assertExactNiceSameValue("0", 0.0);
    assertExactNiceSameValue("1", 1.0);
    assertExactNiceSameValue("5", 5.0);
    assertExactNiceSameValue("10", 10.0);
    assertExactNiceSameValue("43", 43.0);
    assertExactNiceSameValue("500", 500.0);
    assertExactNiceSameValue("1000", 1000.0);

    assertExactNiceSameValue("-7", -7.0);
    assertExactNiceSameValue("-10", -10.0);
    assertExactNiceSameValue("-500", -500.0);

    assertExactNiceSameValue("1/10", 0.1);
    assertExactNiceSameValue("1/1000", 0.001);
    assertExactNiceSameValue("1/1000000000000", 0.1E-11);
    assertExactNiceSameValue("6189700196426901/618970019642690137449562112", 0.1E-10);

    assertExactNiceSameValue("7/10", 0.7);

    assertExactNiceSameValue("1/10", 0.1);
    assertExactNiceSameValue("1/5", 0.2);
    assertExactNiceSameValue("3/10", 0.3);
    assertExactNiceSameValue("2/5", 0.4);
    assertExactNiceSameValue("1/2", 0.5);
    assertExactNiceSameValue("3/5", 0.6);
    assertExactNiceSameValue("7/10", 0.7);
    assertExactNiceSameValue("4/5", 0.8);
    assertExactNiceSameValue("9/10", 0.9);

    assertExactNiceSameValue("1/10", 0.1);
    assertExactNiceSameValue("1/100", 0.01);
    assertExactNiceSameValue("-1/1000", -0.001);
    assertExactNiceSameValue("1/10000", 0.0001);
    assertExactNiceSameValue("1/100000", 0.00001);

    assertExactNiceSameValue("3/4", 0.75);
    assertExactNiceSameValue("11/5", 2.2);
    assertExactNiceSameValue("387/10", 38.7);
    assertExactNiceSameValue("217/5", 43.4);
    assertExactNiceSameValue("623/5", 124.6);
    assertExactNiceSameValue("1943/4", 485.75);

    assertExactNiceSameValue("884279719003555/281474976710656", Math.PI);
    assertExactNiceSameValue("6121026514868073/2251799813685248", Math.E);
    assertExactNiceSameValue("1/(2251799813685248*2^1023)", Double.MIN_VALUE);
    assertExactNiceSameValue(
        "1/44942328371557897693232629769725618340449424473557664318357520289433168951375240783177119330601884005280028469967848339414697442203604155623211857659868531094441973356216371319075554900311523529863270738021251442209537670585615720368478277635206809290837627671146574559986811484619929076208839082406056034304",
        Double.MIN_NORMAL);
    assertExactNiceSameValue(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368",
        Double.MAX_VALUE);

    assertExactNiceSameValue("1/77160493827160496", 1.296E-17);
    assertExactNiceSameValue(
        "3410816244736653/59285549689505892056868344324448208820874232148807968788202283012051522375647232",
        5.7532E-65);

    assertExactNiceSameValue("1234563535345345280", 1234563535345345345.0);
    assertExactNiceSameValue(
        "83798521235879822028356182861654024205270494733682569296620682227432861575418347644871348302736497360783637195649965345971993786906672903158981447511433390895291149953723670686446060864887183518790166143733459932436265955202321651037914521403392",
        83798521.23587982125E237);

    assertExactNiceSameValue("5341001601854557/4503599627370496", 1.1859405905877545);
    assertExactNiceSameValue("7325505409307765/4503599627370496", 1.6265889544859224);
  }

  @Test
  void testValueOfExactNice_difficultValues() {

    assertExactNiceSameValue("5341001601854557/4503599627370496", 1.1859405905877545);
    assertExactNiceSameValue("7325505409307765/4503599627370496", 1.6265889544859224);
    assertExactNiceSameValue("703791863104313034795615518720", 7.03791863104313E29);
    assertExactNiceSameValue("420022924/420022925", 0.9999999976191776);
    assertExactNiceSameValue("2251798983481815/1125899906842624", 1.9999992626312268);
    assertExactNiceSameValue("2251801429921417/562949953421312", 4.000002871012173);
    assertExactNiceSameValue(
        "8379190137388997/102844034832575377634685573909834406561420991602098741459288064",
        8.147473162667989E-47);

    assertExactNiceSameValue(
        "291400324666827532628471421352316956143162692757059510791380840748004719770009075712",
        2.9140032466682753E83);
    assertExactNiceSameValue(
        "41443534396435588611213052456670629384928442103203783116298919828494368341312648773632",
        4.144353439643559E85);
    assertExactNiceSameValue(
        "985153538497718977235437755145986803311038901286400075286521512009180556366973370611068340109123516692728643584",
        9.85153538497719E110);
    assertExactNiceSameValue(
        "4350876748659000944221005379209253739082585763879021258742583359676747581076488783667520209060856660141894107951996867689046055585151431741856395409848075750151515799728102908640129712128",
        4.350876748659001E186);
    assertExactNiceSameValue(
        "7050202128713718277140029001626075072999156878688425956682490896903132173623182401830493169269577517574325246973255426291693933027955148400101585798447110823609912672012864462277089572385199268823040",
        7.050202128713718E198);
    assertExactNiceSameValue(
        "8365327199922553523412142632386866005829989115082364265187442262457444899190991167760856400050282180955268244806847868694420889116879412179164543828412908728421710223689854773971619786645931722628866130880103557100913478166634542534393593856",
        8.365327199922554E240);
    assertExactNiceSameValue(
        "83798521235879822028356182861654024205270494733682569296620682227432861575418347644871348302736497360783637195649965345971993786906672903158981447511433390895291149953723670686446060864887183518790166143733459932436265955202321651037914521403392",
        8.379852123587982E244);
    assertExactNiceSameValue(
        "90801234621369023364912830817432388852694912650892754335686797738450782641769315666935443151036157212669309976667206970904787066158640755837610165050001849505103748321928536360065795340122962138649829790283022529146168016012205124678824713897311814239491649961984",
        9.080123462136902E262);
    assertExactNiceSameValue(
        "354110377190812206919458956493127785529281287772524596418646100889962797727875140364302960532921039823494661363121902917238398549544253618094261077811575035910369639176904617504820412377956286054596183700988488459255342004439584599056070781291317662708996744593712848376465859325052827205632",
        3.541103771908122E290);
    assertExactNiceSameValue(
        "45683984243838242571673140924294031038124325552461097077273738770428811948344937456377143549620615403178273304952863226184634975640616455375404598732456063183903419199759629627067696258026231118654700769629033120434813011977881090805650878364248140744294057736290627325020263326903346027506402741983379456",
        4.568398424383824E304);

    assertExactNiceSameValue("4503602517193587/9903520314283042199192993792",
        4.547476426840269E-13);
    assertExactNiceSameValue("3377699259328409/730750818665451459101842416358141509827966271488",
        4.62223123539841E-33);
    assertExactNiceSameValue(
        "2251801156815423/15914343565113172548972231940698266883214596825515126958094847260581103904401068017057792",
        1.414950700041274E-73);
    assertExactNiceSameValue(
        "4503599632874391/2113178124542660985409359139666066426075389304144486088511842836106695610226899437897669023550628751578697579973028514715529390238010742149002155913851758307633546735996020336674926070705705764212096931632844753616592113171006246955353587595068145905958154323590951993344",
        2.131197356516773E-255);
    assertExactNiceSameValue("5224396607931767/4503599627370496*1/2^992", 2.771536903091114E-299);
    assertExactNiceSameValue("4000008001032099/2251799813685248*1/2^997", 1.3262500221902385E-300);
    assertExactNiceSameValue("1858597777448391/2251799813685248*1/2^1023", 9.182693112741447E-309);

    assertExactNiceSameValue("7517480700937777/4503599627370496*1/2^985", 5.104659969936841E-297);
    assertExactNiceSameValue("5929084170570081/4503599627370496*1/2^973", 1.6490812741030425E-293);
  }

  @Test
  void testValueOfExactNice_randomValues() {
    getRandomStream().forEach(value -> {
      assertExactSame(value, valueOfExactNice(value));
    });
  }

  private static void assertExactNiceSameValue(String expectedFraction, double value) {
    IExpr expression = valueOfExactNice(value);
    assertExactSame(value, expression);
    assertEquals(expectedFraction, expression);
  }

  private static void assertEquals(String expected, IExpr actual) {
    if (actual instanceof IFraction) {
      BigFraction bigFraction = ((IFraction) actual).toBigFraction();
      Assertions.assertEquals(expected, bigFraction.toString().replaceAll("[\\s]", ""));
    }
  }

  private static void assertExactSame(double value, IExpr expression) {
    Assertions.assertEquals(value, expression.evalDouble(),
        () -> "Not exact representation of value " + value + " by expression: " + expression);
  }

  private DoubleStream getRandomStream() {
    Random rnd = new Random();
    int maxExp = 308;
    IntSupplier sign = () -> (rnd.nextBoolean() ? -1 : 1);
    DoubleSupplier mantissa = rnd::nextDouble;
    DoubleSupplier power = () -> Math.pow(10, rnd.nextInt(2 * maxExp) - maxExp);
    return IntStream.range(0, 10_000)
        .mapToDouble(i -> sign.getAsInt() * mantissa.getAsDouble() * power.getAsDouble());
  }
}

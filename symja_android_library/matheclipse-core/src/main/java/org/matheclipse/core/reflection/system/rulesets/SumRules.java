package org.matheclipse.core.reflection.system.rulesets;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.ISymbol;
import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.patternmatching.Matcher;

/**
 * <p>Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.</p>
 * <p>See GIT repository at: <a href="https://github.com/axkr/symja_android_library">github.com/axkr/symja_android_library under the tools directory</a>.</p>
 */
public interface SumRules {
public static Matcher init1() {
  Matcher matcher = new Matcher();    // Sum(i_,{i_Symbol,a_Integer,n_Integer}):=If(a<=n,-1/2*(-1+a-n)*(a+n),0)
matcher.caseOf(Sum(i_,list(i_Symbol,$p(a, Integer),$p(n, Integer))),
      If(LessEqual(a,n),Times(CN1D2,Plus(CN1,a,Negate(n)),Plus(a,n)),C0));
    // Sum(c_^(i_+a_.),{i_Symbol,1,Infinity}):=-c^(1+a)/(-1+c)/;FreeQ({a,c},i)&&(!NumberQ(c)||(c>-1&&c<1))
matcher.caseOf(Sum(Power(c_,Plus(i_,a_DEFAULT)),list(i_Symbol,C1,oo)),
      Condition(Times(CN1,Power(Plus(CN1,c),CN1),Power(c,Plus(C1,a))),And(FreeQ(list(a,c),i),Or(Not(NumberQ(c)),And(Greater(c,CN1),Less(c,C1))))));
    // Sum(i_^k_,{i_Symbol,1,Infinity}):=Zeta(-k)/;FreeQ(k,i)
matcher.caseOf(Sum(Power(i_,k_),list(i_Symbol,C1,oo)),
      Condition(Zeta(Negate(k)),FreeQ(k,i)));
    // Sum(1/i_^k_,{i_Symbol,1,Infinity}):=Zeta(k)/;FreeQ(k,i)
matcher.caseOf(Sum(Power(Power(i_,k_),CN1),list(i_Symbol,C1,oo)),
      Condition(Zeta(k),FreeQ(k,i)));
    // Sum(k_^(a_.*i_),{i_Symbol,1,Infinity}):=-k^a/(-1+k^a)/;FreeQ(k,i)&&a<0&&(k>1||k<-1)
matcher.caseOf(Sum(Power(k_,Times(a_DEFAULT,i_)),list(i_Symbol,C1,oo)),
      Condition(Times(CN1,Power(k,a),Power(Plus(CN1,Power(k,a)),CN1)),And(FreeQ(k,i),Less(a,C0),Or(Greater(k,C1),Less(k,CN1)))));
    // Sum(i_^k_*c_^(a_.*i_),{i_Symbol,1,Infinity}):=PolyLog(-k,c^a)/;FreeQ({a,c,k},i)
matcher.caseOf(Sum(Times(Power(i_,k_),Power(c_,Times(a_DEFAULT,i_))),list(i_Symbol,C1,oo)),
      Condition(PolyLog(Negate(k),Power(c,a)),FreeQ(list(a,c,k),i)));
    // Sum(x_^(2*i_+1)/(2*i_+1)!,{i_Symbol,0,Infinity}):=Sinh(x)/;FreeQ(x,i)
matcher.caseOf(Sum(Times(Power(Factorial(Plus(Times(C2,i_),C1)),CN1),Power(x_,Plus(Times(C2,i_),C1))),list(i_Symbol,C0,oo)),
      Condition(Sinh(x),FreeQ(x,i)));
    // Sum((-1)^i_*x_^(2*i_+1)/(2*i_+1)!,{i_Symbol,0,Infinity}):=Sin(x)/;FreeQ(x,i)
matcher.caseOf(Sum(Times(Power(-1,i_),Power(Factorial(Plus(Times(C2,i_),C1)),CN1),Power(x_,Plus(Times(C2,i_),C1))),list(i_Symbol,C0,oo)),
      Condition(Sin(x),FreeQ(x,i)));
    // Sum(x_^(2*i_)/(2*i_)!,{i_Symbol,0,Infinity}):=Cosh(x)/;FreeQ(x,i)
matcher.caseOf(Sum(Times(Power(Factorial(Times(C2,i_)),CN1),Power(x_,Times(C2,i_))),list(i_Symbol,C0,oo)),
      Condition(Cosh(x),FreeQ(x,i)));
    // Sum((-1)^i_*x_^(2*i_)/(2*i_)!,{i_Symbol,0,Infinity}):=Cos(x)/;FreeQ(x,i)
matcher.caseOf(Sum(Times(Power(-1,i_),Power(Factorial(Times(C2,i_)),CN1),Power(x_,Times(C2,i_))),list(i_Symbol,C0,oo)),
      Condition(Cos(x),FreeQ(x,i)));
    // Sum((-1)^i_*x_^(2*i_+1)/(2*i_+1),{i_Symbol,0,Infinity}):=ArcTanh(x)/;FreeQ(x,i)
matcher.caseOf(Sum(Times(Power(-1,i_),Power(Plus(Times(C2,i_),C1),CN1),Power(x_,Plus(Times(C2,i_),C1))),list(i_Symbol,C0,oo)),
      Condition(ArcTanh(x),FreeQ(x,i)));
    // Sum(x_^i_/i_!,{i_Symbol,1,Infinity}):=-1+E^x/;FreeQ(x,i)
matcher.caseOf(Sum(Times(Power(Factorial(i_),CN1),Power(x_,i_)),list(i_Symbol,C1,oo)),
      Condition(Plus(CN1,Exp(x)),FreeQ(x,i)));
    // Sum(a_./i_!,{i_Symbol,1,Infinity}):=a*(-1+E)/;FreeQ(a,i)
matcher.caseOf(Sum(Times(Power(Factorial(i_),CN1),a_DEFAULT),list(i_Symbol,C1,oo)),
      Condition(Times(a,Plus(CN1,E)),FreeQ(a,i)));
    // Sum((-1+x_)^i_/(i_*(-1)^(1-i_)),{i_Symbol,1,Infinity}):=Log(x)/;FreeQ(x,i)
matcher.caseOf(Sum(Times(Power(i_,CN1),Power(-1,Plus(CN1,i_)),Power(Plus(CN1,x_),i_)),list(i_Symbol,C1,oo)),
      Condition(Log(x),FreeQ(x,i)));
    // Sum(1/((-1)^i_*(2*i_+1)),{i_Symbol,1,Infinity}):=1/4*(-4+Pi)
matcher.caseOf(Sum(Times(Power(-1,Negate(i_)),Power(Plus(Times(C2,i_),C1),CN1)),list(i_Symbol,C1,oo)),
      Times(C1D4,Plus(CN4,Pi)));
    // Sum(z_^k_*(k_+a_)^s_,{k_,0,Infinity}):=HurwitzLerchPhi(z,-s,a)
matcher.caseOf(Sum(Times(Power(z_,k_),Power(Plus(k_,a_),s_)),list(k_,C0,oo)),
      HurwitzLerchPhi(z,Negate(s),a));
    // Sum(i_^k_Symbol,{i_Symbol,1,n_Symbol}):=HarmonicNumber(n,-k)/;FreeQ(k,i)&&FreeQ(n,i)
matcher.caseOf(Sum(Power(i_,k_Symbol),list(i_Symbol,C1,n_Symbol)),
      Condition(HarmonicNumber(n,Negate(k)),And(FreeQ(k,i),FreeQ(n,i))));
    // Sum(i_^c_,{i_Symbol,0,n_Symbol}):=0^c+HarmonicNumber(n,-c)/;FreeQ({c,n},i)
matcher.caseOf(Sum(Power(i_,c_),list(i_Symbol,C0,n_Symbol)),
      Condition(Plus(Power(C0,c),HarmonicNumber(n,Negate(c))),FreeQ(list(c,n),i)));
    // Sum(i_^c_,{i_Symbol,1,n_Symbol}):=HarmonicNumber(n,-c)/;FreeQ({c,n},i)
matcher.caseOf(Sum(Power(i_,c_),list(i_Symbol,C1,n_Symbol)),
      Condition(HarmonicNumber(n,Negate(c)),FreeQ(list(c,n),i)));
    // Sum(a_.*b_^i_,{i_Symbol,1,n_Symbol}):=(a*b*(-1+b^k))/(-1+b)/;FreeQ({a,b,n},i)
matcher.caseOf(Sum(Times(a_DEFAULT,Power(b_,i_)),list(i_Symbol,C1,n_Symbol)),
      Condition(Times(a,Power(Plus(CN1,b),CN1),b,Plus(CN1,Power(b,k))),FreeQ(list(a,b,n),i)));
    // Sum(Ceiling(Log(i_)),{i_Symbol,1,n_Symbol}):=(Floor(Log(n))*E^(Floor(Log(n))+1)-(Floor(Log(n))+1)*E^Floor(Log(n))+1)/(-1+E)+(-E^Floor(Log(n))+n)*Ceiling(Log(n))/;FreeQ(n,i)
matcher.caseOf(Sum(Ceiling(Log(i_)),list(i_Symbol,C1,n_Symbol)),
      Condition(Plus(Times(Plus(Times(Floor(Log(n)),Exp(Plus(Floor(Log(n)),C1))),Times(CN1,Plus(Floor(Log(n)),C1),Exp(Floor(Log(n)))),C1),Power(Plus(CN1,E),CN1)),Times(Plus(Negate(Exp(Floor(Log(n)))),n),Ceiling(Log(n)))),FreeQ(n,i)));
    // Sum(Ceiling(Log(i_)/Log(a_)),{i_Symbol,1,n_Symbol}):=(Floor(Log(a,n))*a^(Floor(Log(a,n))+1)-(Floor(Log(a,n))+1)*a^Floor(Log(a,n))+1)/(-1+a)+(-a^Floor(Log(a,n))+n)*Ceiling(Log(a,n))/;FreeQ(a,i)&&FreeQ(n,i)
matcher.caseOf(Sum(Ceiling(Times(Power(Log(a_),CN1),Log(i_))),list(i_Symbol,C1,n_Symbol)),
      Condition(Plus(Times(Plus(Times(Floor(Log(a,n)),Power(a,Plus(Floor(Log(a,n)),C1))),Times(CN1,Plus(Floor(Log(a,n)),C1),Power(a,Floor(Log(a,n)))),C1),Power(Plus(CN1,a),CN1)),Times(Plus(Negate(Power(a,Floor(Log(a,n)))),n),Ceiling(Log(a,n)))),And(FreeQ(a,i),FreeQ(n,i))));
    // Sum(1/Binomial(2*i_,i_),{i_Symbol,1,Infinity}):=1/27*(2*Pi*Sqrt(3)+9)
matcher.caseOf(Sum(Power(Binomial(Times(C2,i_),i_),CN1),list(i_Symbol,C1,oo)),
      Times(QQ(1L,27L),Plus(Times(C2,Pi,CSqrt3),C9)));
    // Sum(1/(i_*Binomial(2*i_,i_)),{i_Symbol,1,Infinity}):=1/9*Sqrt(3)*Pi
matcher.caseOf(Sum(Times(Power(i_,CN1),Power(Binomial(Times(C2,i_),i_),CN1)),list(i_Symbol,C1,oo)),
      Times(QQ(1L,9L),CSqrt3,Pi));
    // Sum(1/(i_^2*Binomial(2*i_,i_)),{i_Symbol,1,Infinity}):=Zeta(2)/3
matcher.caseOf(Sum(Times(Power(i_,CN2),Power(Binomial(Times(C2,i_),i_),CN1)),list(i_Symbol,C1,oo)),
      Times(C1D3,Zeta(C2)));
    // Sum(1/((-1)^(1-i_)*i_),{i_Symbol,1,Infinity}):=Log(2)
matcher.caseOf(Sum(Times(Power(-1,Plus(CN1,i_)),Power(i_,CN1)),list(i_Symbol,C1,oo)),
      Log(C2));
    // Sum(z_^i_/i_^n_,{i_Symbol,1,Infinity}):=PolyLog(n,z)/;FreeQ({z,n},i)
matcher.caseOf(Sum(Times(Power(z_,i_),Power(i_,Negate(n_))),list(i_Symbol,C1,oo)),
      Condition(PolyLog(n,z),FreeQ(list(z,n),i)));
    // Sum(Log(i_)/i_^2,{i_,1,Infinity}):=-1/6*Pi^2*(EulerGamma+Log(2)-12*Log(Glaisher)+Log(Pi))
matcher.caseOf(Sum(Times(Log(i_),Power(i_,CN2)),list(i_,C1,oo)),
      Times(QQ(-1L,6L),Sqr(Pi),Plus(EulerGamma,Log(C2),Times(ZZ(-12L),Log(Glaisher)),Log(Pi))));
    // Sum(Log(i_)*i_^n_Integer,{i_,1,Infinity}):=-Zeta'(-n)/;n<-2
matcher.caseOf(Sum(Times(Log(i_),Power(i_,$p(n, Integer))),list(i_,C1,oo)),
      Condition(Negate($($(Derivative(C1),Zeta),Negate(n))),Less(n,CN2)));
    // Sum(c_^(a_.*i_),{i_Symbol,0,n_}):=(-1+c^(a+a*n))/(-1+c^a)/;FreeQ({a,c},i)&&SpecialsFreeQ(n)
matcher.caseOf(Sum(Power(c_,Times(a_DEFAULT,i_)),list(i_Symbol,C0,n_)),
      Condition(Times(Power(Plus(CN1,Power(c,a)),CN1),Plus(CN1,Power(c,Plus(a,Times(a,n))))),And(FreeQ(list(a,c),i),SpecialsFreeQ(n))));
    // Sum(c_^(i_+m_.),{i_Symbol,0,n_}):=(c^m*(-1+c^(1+n)))/(-1+c)/;FreeQ({c,n,m},i)&&SpecialsFreeQ(n)
matcher.caseOf(Sum(Power(c_,Plus(i_,m_DEFAULT)),list(i_Symbol,C0,n_)),
      Condition(Times(Power(Plus(CN1,c),CN1),Power(c,m),Plus(CN1,Power(c,Plus(C1,n)))),And(FreeQ(list(c,n,m),i),SpecialsFreeQ(n))));
    // Sum(i_*c_^i_,{i_Symbol,0,Infinity}):=c/(-1+c)^2/;FreeQ({c,n},i)&&SpecialsFreeQ(n)
matcher.caseOf(Sum(Times(i_,Power(c_,i_)),list(i_Symbol,C0,oo)),
      Condition(Times(Power(Plus(CN1,c),CN2),c),And(FreeQ(list(c,n),i),SpecialsFreeQ(n))));
    // Sum(i_*c_^i_,{i_Symbol,0,n_}):=(c+c^(1+n)*(-1-n+c*n))/(1-c)^2/;FreeQ({c,n},i)&&!IntegerQ(n)&&SpecialsFreeQ(n)
matcher.caseOf(Sum(Times(i_,Power(c_,i_)),list(i_Symbol,C0,n_)),
      Condition(Times(Power(Subtract(C1,c),CN2),Plus(c,Times(Power(c,Plus(C1,n)),Plus(CN1,Negate(n),Times(c,n))))),And(FreeQ(list(c,n),i),Not(IntegerQ(n)),SpecialsFreeQ(n))));
    // Sum(Binomial(n_,i_),{i_Symbol,0,n_}):=2^n/;FreeQ(n,i)
matcher.caseOf(Sum(Binomial(n_,i_),list(i_Symbol,C0,n_)),
      Condition(Power(C2,n),FreeQ(n,i)));
    // Sum(i_*Binomial(n_,i_),{i_Symbol,0,n_}):=n/2^(1-n)/;FreeQ(n,i)
matcher.caseOf(Sum(Times(i_,Binomial(n_,i_)),list(i_Symbol,C0,n_)),
      Condition(Times(n,Power(C2,Plus(CN1,n))),FreeQ(n,i)));
    // Sum(i_!,{i_Symbol,0,n_}):=-Subfactorial(-1)-(-1)^n*Gamma(2+n)*Subfactorial(-2-n)/;FreeQ(n,i)&&SpecialsFreeQ(n)
matcher.caseOf(Sum(Factorial(i_),list(i_Symbol,C0,n_)),
      Condition(Plus(Negate(Subfactorial(CN1)),Times(CN1,Power(-1,n),Gamma(Plus(C2,n)),Subfactorial(Subtract(CN2,n)))),And(FreeQ(n,i),SpecialsFreeQ(n))));
    // Sum(Cos(i_*c_.),{i_Symbol,0,n_}):=Csc(c/2)*Cos(1/2*c*n)*Sin(1/2*c*(1+n))/;FreeQ({c,n},i)&&SpecialsFreeQ(n)
matcher.caseOf(Sum(Cos(Times(i_,c_DEFAULT)),list(i_Symbol,C0,n_)),
      Condition(Times(Csc(Times(C1D2,c)),Cos(Times(C1D2,c,n)),Sin(Times(C1D2,c,Plus(C1,n)))),And(FreeQ(list(c,n),i),SpecialsFreeQ(n))));
    // Sum(Sin(i_*c_.),{i_Symbol,0,n_}):=Csc(c/2)*Sin(1/2*c*n)*Sin(1/2*c*(1+n))/;FreeQ({c,n},i)&&SpecialsFreeQ(n)
matcher.caseOf(Sum(Sin(Times(i_,c_DEFAULT)),list(i_Symbol,C0,n_)),
      Condition(Times(Csc(Times(C1D2,c)),Sin(Times(C1D2,c,n)),Sin(Times(C1D2,c,Plus(C1,n)))),And(FreeQ(list(c,n),i),SpecialsFreeQ(n))));
return matcher;
}
}

package org.matheclipse.core.reflection.system.rulesets;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.ISymbol;
import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.patternmatching.Matcher;

/**
 * <p>
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.
 * </p>
 * <p>
 * See GIT repository at:
 * <a href="https://github.com/axkr/symja_android_library">github.com/axkr/symja_android_library
 * under the tools directory</a>.
 * </p>
 */
public interface EliminateRules {

  public final static ISymbol eliminv = Dummy("eliminv");

  public static Matcher init1() {
    Matcher matcher = new Matcher(); // eliminv(a_^x_*x_*z_.,x_):=ProductLog((x*Log(a))/z)/Log(a)/;FreeQ({a,z},x)
    matcher.caseOf($(eliminv, Times(Power(a_, x_), x_, z_DEFAULT), x_),
        Condition(Times(Power(Log(a), CN1), ProductLog(Times(x, Power(z, CN1), Log(a)))),
            FreeQ(List(a, z), x)));
    return matcher;
  }

  public final static ISymbol elimzeroplus = Dummy("elimzeroplus");

  public static Matcher init2() {
    Matcher matcher = new Matcher(); // elimzeroplus(b_.*x_^m_+a_.*x_^n_.,x_):=E^((-I*Pi+Log(a)-Log(b))/(m-n))/;FreeQ(a,x)&&FreeQ(b,x)&&FreeQ(n,x)&&FreeQ(m,x)
    matcher.caseOf(
        $(elimzeroplus,
            Plus(Times(b_DEFAULT, Power(x_, m_)), Times(a_DEFAULT, Power(x_, n_DEFAULT))), x_),
        Condition(
            Exp(Times(Power(Subtract(m, n), CN1), Plus(Times(CNI, Pi), Log(a), Negate(Log(b))))),
            And(FreeQ(a, x), FreeQ(b, x), FreeQ(n, x), FreeQ(m, x))));
    // elimzeroplus(b_.*m_^x_+a_.*x_^n_,x_):={(-n*ProductLog((-(-b/a)^(1/n)*Log(m))/n))/Log(m),(-n*ProductLog(((-b/a)^(1/n)*Log(m))/n))/Log(m)}/;FreeQ(a,x)&&FreeQ(b,x)&&FreeQ(n,x)&&FreeQ(m,x)
    matcher.caseOf(
        $(elimzeroplus, Plus(Times(b_DEFAULT, Power(m_, x_)), Times(a_DEFAULT, Power(x_, n_))), x_),
        Condition(
            List(
                Times(CN1, n, Power(Log(m), CN1),
                    ProductLog(Times(CN1, Power(Times(CN1, Power(a, CN1), b), Power(n, CN1)),
                        Power(n, CN1), Log(m)))),
                Times(CN1, n, Power(Log(m), CN1),
                    ProductLog(Times(Power(Times(CN1, Power(a, CN1), b), Power(n, CN1)),
                        Power(n, CN1), Log(m))))),
            And(FreeQ(a, x), FreeQ(b, x), FreeQ(n, x), FreeQ(m, x))));
    // elimzeroplus(w_.*Sqrt(a_.+b_.*x_)+z_.,x_):=Expand(-a*w^2+z^2)/(b*w^2)/;FreeQ({a,b,w,z},x)
    matcher.caseOf(
        $(elimzeroplus,
            Plus(Times(w_DEFAULT, Sqrt(Plus(a_DEFAULT, Times(b_DEFAULT, x_)))), z_DEFAULT), x_),
        Condition(Times(Power(Times(b, Sqr(w)), CN1), Expand(Plus(Times(CN1, a, Sqr(w)), Sqr(z)))),
            FreeQ(List(a, b, w, z), x)));
    // elimzeroplus(w_.*Sqrt(a_.+b_.*x_)+x_*y_.+z_.,x_):={(b*w^2-2*y*z-w*Sqrt(b^2*w^2+4*a*y^2-4*b*y*z))/(2*y^2),(b*w^2-2*y*z+w*Sqrt(b^2*w^2+4*a*y^2-4*b*y*z))/(2*y^2)}/;FreeQ({a,b,w,y,z},x)&&!PossibleZeroQ(y)
    matcher.caseOf(
        $(elimzeroplus,
            Plus(Times(w_DEFAULT, Sqrt(Plus(a_DEFAULT, Times(b_DEFAULT, x_)))),
                Times(x_, y_DEFAULT), z_DEFAULT),
            x_),
        Condition(
            List(
                Times(Power(Times(C2, Sqr(y)), CN1),
                    Plus(Times(b, Sqr(w)), Times(CN2, y, z),
                        Times(CN1, w,
                            Sqrt(Plus(Times(Sqr(b), Sqr(w)), Times(C4, a, Sqr(y)),
                                Times(CN4, b, y, z)))))),
                Times(Power(Times(C2, Sqr(y)), CN1),
                    Plus(Times(b, Sqr(w)), Times(CN2, y, z),
                        Times(w,
                            Sqrt(Plus(Times(Sqr(b), Sqr(w)), Times(C4, a, Sqr(y)),
                                Times(CN4, b, y, z))))))),
            And(FreeQ(List(a, b, w, y, z), x), Not(PossibleZeroQ(y)))));
    // elimzeroplus(w_.*Sqrt(a_.+b_.*x_+c_.*x_^2)+x_*y_.+z_.,x_):=If(PossibleZeroQ(c*w^2-y^2),Expand(-w^2*a+z^2)/(w^2*b-2*y*z),{(-b*w^2+2*y*z-Sqrt(b^2*w^4-4*a*c*w^4+4*a*w^2*y^2-4*b*w^2*y*z+4*c*w^2*z^2))/(2*(c*w^2-y^2)),(-b*w^2+2*y*z+Sqrt(b^2*w^4-4*a*c*w^4+4*a*w^2*y^2-4*b*w^2*y*z+4*c*w^2*z^2))/(2*(c*w^2-y^2))})/;FreeQ({a,b,c,w,y,z},x)
    matcher
        .caseOf(
            $(elimzeroplus,
                Plus(
                    Times(w_DEFAULT,
                        Sqrt(Plus(a_DEFAULT, Times(b_DEFAULT, x_), Times(c_DEFAULT, Sqr(x_))))),
                    Times(x_, y_DEFAULT), z_DEFAULT),
                x_),
            Condition(
                If(PossibleZeroQ(Subtract(Times(c, Sqr(w)), Sqr(y))),
                    Times(Power(Plus(Times(Sqr(w), b), Times(CN2, y, z)), CN1),
                        Expand(Plus(Times(CN1, Sqr(w), a), Sqr(z)))),
                    List(
                        Times(Power(Times(C2, Subtract(Times(c, Sqr(w)), Sqr(y))), CN1),
                            Plus(Times(CN1, b, Sqr(w)), Times(C2, y, z),
                                Negate(Sqrt(Plus(Times(Sqr(b), Power(w, C4)),
                                    Times(CN4, a, c, Power(w, C4)), Times(C4, a, Sqr(w), Sqr(y)),
                                    Times(CN4, b, Sqr(w), y, z), Times(C4, c, Sqr(w), Sqr(z))))))),
                        Times(Power(Times(C2, Subtract(Times(c, Sqr(w)), Sqr(y))), CN1),
                            Plus(Times(CN1, b, Sqr(w)), Times(C2, y, z),
                                Sqrt(Plus(Times(Sqr(b), Power(w, C4)),
                                    Times(CN4, a, c, Power(w, C4)), Times(C4, a, Sqr(w), Sqr(y)),
                                    Times(CN4, b, Sqr(w), y, z), Times(C4, c, Sqr(w), Sqr(z)))))))),
                FreeQ(List(a, b, c, w, y, z), x)));
    return matcher;
  }
}

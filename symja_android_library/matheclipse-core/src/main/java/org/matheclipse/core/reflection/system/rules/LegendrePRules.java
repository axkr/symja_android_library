package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.C0;
import static org.matheclipse.core.expression.F.C1;
import static org.matheclipse.core.expression.F.C1D2;
import static org.matheclipse.core.expression.F.C2;
import static org.matheclipse.core.expression.F.CN1;
import static org.matheclipse.core.expression.F.CN1D2;
import static org.matheclipse.core.expression.F.CN2;
import static org.matheclipse.core.expression.F.EllipticK;
import static org.matheclipse.core.expression.F.Gamma;
import static org.matheclipse.core.expression.F.IInit;
import static org.matheclipse.core.expression.F.ISet;
import static org.matheclipse.core.expression.F.ISetDelayed;
import static org.matheclipse.core.expression.F.LegendreP;
import static org.matheclipse.core.expression.F.List;
import static org.matheclipse.core.expression.F.PatternTest;
import static org.matheclipse.core.expression.F.Plus;
import static org.matheclipse.core.expression.F.Power;
import static org.matheclipse.core.expression.F.Sqrt;
import static org.matheclipse.core.expression.F.Subtract;
import static org.matheclipse.core.expression.F.Times;
import static org.matheclipse.core.expression.F.x_;
import static org.matheclipse.core.expression.F.z_;
import static org.matheclipse.core.expression.S.IntegerQ;
import static org.matheclipse.core.expression.S.LegendreP;
import static org.matheclipse.core.expression.S.NumericQ;
import static org.matheclipse.core.expression.S.Pi;
import static org.matheclipse.core.expression.S.x;
import static org.matheclipse.core.expression.S.z;
import org.matheclipse.core.interfaces.IAST;

/**
 * <p>
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.
 * </p>
 * <p>
 * See GIT repository at:
 * <a href="https://github.com/axkr/symja_android_library">github.com/axkr/symja_android_library
 * under the tools directory</a>.
 * </p>
 */
public interface LegendrePRules {
  /**
   * <ul>
   * <li>index 0 - number of equal rules in <code>RULES</code></li>
   * </ul>
   */
  final public static int[] SIZES = {1, 1};

  final public static IAST RULES = List(IInit(LegendreP, SIZES),
      // LegendreP(x_,1)=1
      ISet(LegendreP(x_, C1), C1),
      // LegendreP(x_?NumericQ,0):=Sqrt(Pi)/(Gamma(1/2*(1-x))*Gamma(1+x/2))
      ISetDelayed(LegendreP(PatternTest(x_, NumericQ), C0),
          Times(Sqrt(Pi),
              Power(Times(Gamma(Times(C1D2, Subtract(C1, x))), Gamma(Plus(C1, Times(C1D2, x)))),
                  CN1))),
      // LegendreP(x_?IntegerQ,-1):=(-1)^x
      ISetDelayed(LegendreP(PatternTest(x_, IntegerQ), CN1), Power(CN1, x)),
      // LegendreP(-1/2,1-2*z_):=2/Pi*EllipticK(z)
      ISetDelayed(LegendreP(CN1D2, Plus(C1, Times(CN2, z_))),
          Times(C2, Power(Pi, CN1), EllipticK(z))));
}
